name: Prepare mongosh Release

on:
  workflow_dispatch:
    inputs:
      jiraTicket:
        description: 'Jira ticket for the release, e.g. MONGOSH-1234'
        required: true

      versionBump:
        description: 'Version bump'
        type: choice
        required: true
        default: 'patch'
        options:
        - patch
        - minor
        - major
        - exact-version

      exactVersion:
        description: 'Exact version: (Only effective selecting "exact-version" as version bump)'
        required: false

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      - uses: mongodb-js/devtools-shared/actions/setup-bot-token@main
        id: app-token
        with:
          app-id: ${{ vars.DEVTOOLS_BOT_APP_ID }}
          private-key: ${{ secrets.DEVTOOLS_BOT_PRIVATE_KEY }}
      
      - uses: actions/checkout@v4
        with:
          # don't checkout a detatched HEAD
          ref: ${{ github.head_ref }}

          # this is important so git log can pick up on
          # the whole history to generate the list of AUTHORS
          fetch-depth: "0"
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.1

      - name: Determine Next Version
        shell: bash
        run: |
          set -e

          VERSION_BUMP=${{ github.event.inputs.versionBump }}

          if [[ "$VERSION_BUMP" == "major" || "$VERSION_BUMP" == "minor" || "$VERSION_BUMP" == "patch" ]]; then
            PREV_VERSION_TAG=$(gh api repos/:owner/:repo/releases --jq '. | map(select(.draft == false)) | .[0] | .tag_name')
            PREV_VERSION=$(npx semver --coerce ${PREV_VERSION_TAG})

            NEXT_VERSION=$(npx semver -i $VERSION_BUMP $PREV_VERSION)
          else
            NEXT_VERSION=${{ github.event.inputs.exactVersion }}
          fi
          
          # Remove the 'v' prefix from NEXT_VERSION if it exists
          NEXT_VERSION="${NEXT_VERSION#v}"

          # Validates the version before using it
          npx semver v"${NEXT_VERSION}"

          echo "RELEASE_TAG=v${NEXT_VERSION}" >> "$GITHUB_ENV"

      - name: Validate release tag
        shell: bash
        run: |
          if [ -z "${RELEASE_TAG}" ]; then
            echo "RELEASE_TAG is not set or is empty"
            exit 1
          fi

          if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Error: Tag $RELEASE_TAG already exists"
            echo "If you are trying to re-create a draft release with this version, please delete the release and the tag first."
            echo "If this version has already been release consider using a different one."
            exit 1
          fi

      - name: Bump mongosh and package versions
        shell: bash
        env:
          MONGOSH_RELEASE_VERSION: ${{ env.NEXT_VERSION }}
        run: |
          set -e
          echo Bumping mongosh versions to ${NEXT_VERSION} and packages

          npm run bump
            
          git add .
          git commit --no-allow-empty -m "chore(release): prepare for mongosh v${NEXT_VERSION} ${{ github.event.inputs.jiraTicket }}" || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # 7.0.5
        with:
          token: ${{ steps.app-token.outputs.token }}
          commit-message: "chore(release): prepare for mongosh v${NEXT_VERSION} ${{ github.event.inputs.jiraTicket }}"
          branch: release/${NEXT_VERSION}
          title: "chore(release): prepare for mongosh v${NEXT_VERSION} ${{ github.event.inputs.jiraTicket }}"
          body: |
            - [${{ github.event.inputs.jiraTicket }}](https://jira.mongodb.org/browse/${{ github.event.inputs.jiraTicket }})
            - This PR is for the release of mongosh v${NEXT_VERSION}. 
            - **Do not merge manually, use the Release mongosh action instead.**