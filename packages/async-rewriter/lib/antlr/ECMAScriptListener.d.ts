export var ECMAScriptListener: typeof ECMAScriptListener;
declare function ECMAScriptListener(): any;
declare class ECMAScriptListener {
    constructor: typeof ECMAScriptListener;
    enterProgram(ctx: any): void;
    exitProgram(ctx: any): void;
    enterSourceElements(ctx: any): void;
    exitSourceElements(ctx: any): void;
    enterSourceElement(ctx: any): void;
    exitSourceElement(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterStatementOrBlock(ctx: any): void;
    exitStatementOrBlock(ctx: any): void;
    enterBlock(ctx: any): void;
    exitBlock(ctx: any): void;
    enterStatementList(ctx: any): void;
    exitStatementList(ctx: any): void;
    enterVariableStatement(ctx: any): void;
    exitVariableStatement(ctx: any): void;
    enterVariableDeclarationList(ctx: any): void;
    exitVariableDeclarationList(ctx: any): void;
    enterVariableDeclaration(ctx: any): void;
    exitVariableDeclaration(ctx: any): void;
    enterInitialiser(ctx: any): void;
    exitInitialiser(ctx: any): void;
    enterEmptyStatement(ctx: any): void;
    exitEmptyStatement(ctx: any): void;
    enterExpressionStatement(ctx: any): void;
    exitExpressionStatement(ctx: any): void;
    enterIfStatement(ctx: any): void;
    exitIfStatement(ctx: any): void;
    enterDoWhileStatement(ctx: any): void;
    exitDoWhileStatement(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterForStatement(ctx: any): void;
    exitForStatement(ctx: any): void;
    enterForVarStatement(ctx: any): void;
    exitForVarStatement(ctx: any): void;
    enterForInStatement(ctx: any): void;
    exitForInStatement(ctx: any): void;
    enterForVarInStatement(ctx: any): void;
    exitForVarInStatement(ctx: any): void;
    enterContinueStatement(ctx: any): void;
    exitContinueStatement(ctx: any): void;
    enterBreakStatement(ctx: any): void;
    exitBreakStatement(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterWithStatement(ctx: any): void;
    exitWithStatement(ctx: any): void;
    enterSwitchStatement(ctx: any): void;
    exitSwitchStatement(ctx: any): void;
    enterCaseBlock(ctx: any): void;
    exitCaseBlock(ctx: any): void;
    enterCaseClauses(ctx: any): void;
    exitCaseClauses(ctx: any): void;
    enterCaseClause(ctx: any): void;
    exitCaseClause(ctx: any): void;
    enterDefaultClause(ctx: any): void;
    exitDefaultClause(ctx: any): void;
    enterLabelledStatement(ctx: any): void;
    exitLabelledStatement(ctx: any): void;
    enterThrowStatement(ctx: any): void;
    exitThrowStatement(ctx: any): void;
    enterTryStatement(ctx: any): void;
    exitTryStatement(ctx: any): void;
    enterCatchProduction(ctx: any): void;
    exitCatchProduction(ctx: any): void;
    enterFinallyProduction(ctx: any): void;
    exitFinallyProduction(ctx: any): void;
    enterDebuggerStatement(ctx: any): void;
    exitDebuggerStatement(ctx: any): void;
    enterFunctionDeclaration(ctx: any): void;
    exitFunctionDeclaration(ctx: any): void;
    enterFormalParameterList(ctx: any): void;
    exitFormalParameterList(ctx: any): void;
    enterFunctionBody(ctx: any): void;
    exitFunctionBody(ctx: any): void;
    enterArrayLiteral(ctx: any): void;
    exitArrayLiteral(ctx: any): void;
    enterElementList(ctx: any): void;
    exitElementList(ctx: any): void;
    enterElision(ctx: any): void;
    exitElision(ctx: any): void;
    enterObjectLiteral(ctx: any): void;
    exitObjectLiteral(ctx: any): void;
    enterPropertyNameAndValueList(ctx: any): void;
    exitPropertyNameAndValueList(ctx: any): void;
    enterPropertyAssignmentExpression(ctx: any): void;
    exitPropertyAssignmentExpression(ctx: any): void;
    enterPropertyGetter(ctx: any): void;
    exitPropertyGetter(ctx: any): void;
    enterPropertySetter(ctx: any): void;
    exitPropertySetter(ctx: any): void;
    enterPropertyName(ctx: any): void;
    exitPropertyName(ctx: any): void;
    enterPropertySetParameterList(ctx: any): void;
    exitPropertySetParameterList(ctx: any): void;
    enterArguments(ctx: any): void;
    exitArguments(ctx: any): void;
    enterArgumentList(ctx: any): void;
    exitArgumentList(ctx: any): void;
    enterExpressionSequence(ctx: any): void;
    exitExpressionSequence(ctx: any): void;
    enterTernaryExpression(ctx: any): void;
    exitTernaryExpression(ctx: any): void;
    enterLogicalAndExpression(ctx: any): void;
    exitLogicalAndExpression(ctx: any): void;
    enterFuncDefExpression(ctx: any): void;
    exitFuncDefExpression(ctx: any): void;
    enterPreIncrementExpression(ctx: any): void;
    exitPreIncrementExpression(ctx: any): void;
    enterObjectLiteralExpression(ctx: any): void;
    exitObjectLiteralExpression(ctx: any): void;
    enterInExpression(ctx: any): void;
    exitInExpression(ctx: any): void;
    enterLogicalOrExpression(ctx: any): void;
    exitLogicalOrExpression(ctx: any): void;
    enterNotExpression(ctx: any): void;
    exitNotExpression(ctx: any): void;
    enterPreDecreaseExpression(ctx: any): void;
    exitPreDecreaseExpression(ctx: any): void;
    enterThisExpression(ctx: any): void;
    exitThisExpression(ctx: any): void;
    enterUnaryMinusExpression(ctx: any): void;
    exitUnaryMinusExpression(ctx: any): void;
    enterPostDecreaseExpression(ctx: any): void;
    exitPostDecreaseExpression(ctx: any): void;
    enterAssignmentExpression(ctx: any): void;
    exitAssignmentExpression(ctx: any): void;
    enterTypeofExpression(ctx: any): void;
    exitTypeofExpression(ctx: any): void;
    enterInstanceofExpression(ctx: any): void;
    exitInstanceofExpression(ctx: any): void;
    enterUnaryPlusExpression(ctx: any): void;
    exitUnaryPlusExpression(ctx: any): void;
    enterDeleteExpression(ctx: any): void;
    exitDeleteExpression(ctx: any): void;
    enterEqualityExpression(ctx: any): void;
    exitEqualityExpression(ctx: any): void;
    enterBitXOrExpression(ctx: any): void;
    exitBitXOrExpression(ctx: any): void;
    enterMultiplicativeExpression(ctx: any): void;
    exitMultiplicativeExpression(ctx: any): void;
    enterBitShiftExpression(ctx: any): void;
    exitBitShiftExpression(ctx: any): void;
    enterParenthesizedExpression(ctx: any): void;
    exitParenthesizedExpression(ctx: any): void;
    enterGetAttributeExpression(ctx: any): void;
    exitGetAttributeExpression(ctx: any): void;
    enterAdditiveExpression(ctx: any): void;
    exitAdditiveExpression(ctx: any): void;
    enterRelationalExpression(ctx: any): void;
    exitRelationalExpression(ctx: any): void;
    enterPostIncrementExpression(ctx: any): void;
    exitPostIncrementExpression(ctx: any): void;
    enterFuncCallExpression(ctx: any): void;
    exitFuncCallExpression(ctx: any): void;
    enterBitNotExpression(ctx: any): void;
    exitBitNotExpression(ctx: any): void;
    enterNewExpression(ctx: any): void;
    exitNewExpression(ctx: any): void;
    enterLiteralExpression(ctx: any): void;
    exitLiteralExpression(ctx: any): void;
    enterArrayLiteralExpression(ctx: any): void;
    exitArrayLiteralExpression(ctx: any): void;
    enterMemberIndexExpression(ctx: any): void;
    exitMemberIndexExpression(ctx: any): void;
    enterIdentifierExpression(ctx: any): void;
    exitIdentifierExpression(ctx: any): void;
    enterBitAndExpression(ctx: any): void;
    exitBitAndExpression(ctx: any): void;
    enterBitOrExpression(ctx: any): void;
    exitBitOrExpression(ctx: any): void;
    enterAssignmentOperatorExpression(ctx: any): void;
    exitAssignmentOperatorExpression(ctx: any): void;
    enterVoidExpression(ctx: any): void;
    exitVoidExpression(ctx: any): void;
    enterAssignmentOperator(ctx: any): void;
    exitAssignmentOperator(ctx: any): void;
    enterNullLiteral(ctx: any): void;
    exitNullLiteral(ctx: any): void;
    enterUndefinedLiteral(ctx: any): void;
    exitUndefinedLiteral(ctx: any): void;
    enterBooleanLiteral(ctx: any): void;
    exitBooleanLiteral(ctx: any): void;
    enterStringLiteral(ctx: any): void;
    exitStringLiteral(ctx: any): void;
    enterRegularExpressionLiteral(ctx: any): void;
    exitRegularExpressionLiteral(ctx: any): void;
    enterNumericLiteralWrapper(ctx: any): void;
    exitNumericLiteralWrapper(ctx: any): void;
    enterIntegerLiteral(ctx: any): void;
    exitIntegerLiteral(ctx: any): void;
    enterDecimalLiteral(ctx: any): void;
    exitDecimalLiteral(ctx: any): void;
    enterHexIntegerLiteral(ctx: any): void;
    exitHexIntegerLiteral(ctx: any): void;
    enterOctalIntegerLiteral(ctx: any): void;
    exitOctalIntegerLiteral(ctx: any): void;
    enterIdentifierName(ctx: any): void;
    exitIdentifierName(ctx: any): void;
    enterReservedWord(ctx: any): void;
    exitReservedWord(ctx: any): void;
    enterKeyword(ctx: any): void;
    exitKeyword(ctx: any): void;
    enterFutureReservedWord(ctx: any): void;
    exitFutureReservedWord(ctx: any): void;
    enterGetter(ctx: any): void;
    exitGetter(ctx: any): void;
    enterSetter(ctx: any): void;
    exitSetter(ctx: any): void;
    enterEos(ctx: any): void;
    exitEos(ctx: any): void;
    enterEof(ctx: any): void;
    exitEof(ctx: any): void;
}
export {};
