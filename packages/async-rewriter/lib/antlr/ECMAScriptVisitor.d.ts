export var ECMAScriptVisitor: typeof ECMAScriptVisitor;
declare function ECMAScriptVisitor(): any;
declare class ECMAScriptVisitor {
    constructor: typeof ECMAScriptVisitor;
    visitProgram(ctx: any): any;
    visitSourceElements(ctx: any): any;
    visitSourceElement(ctx: any): any;
    visitStatement(ctx: any): any;
    visitStatementOrBlock(ctx: any): any;
    visitBlock(ctx: any): any;
    visitStatementList(ctx: any): any;
    visitVariableStatement(ctx: any): any;
    visitVariableDeclarationList(ctx: any): any;
    visitVariableDeclaration(ctx: any): any;
    visitInitialiser(ctx: any): any;
    visitEmptyStatement(ctx: any): any;
    visitExpressionStatement(ctx: any): any;
    visitIfStatement(ctx: any): any;
    visitDoWhileStatement(ctx: any): any;
    visitWhileStatement(ctx: any): any;
    visitForStatement(ctx: any): any;
    visitForVarStatement(ctx: any): any;
    visitForInStatement(ctx: any): any;
    visitForVarInStatement(ctx: any): any;
    visitContinueStatement(ctx: any): any;
    visitBreakStatement(ctx: any): any;
    visitReturnStatement(ctx: any): any;
    visitWithStatement(ctx: any): any;
    visitSwitchStatement(ctx: any): any;
    visitCaseBlock(ctx: any): any;
    visitCaseClauses(ctx: any): any;
    visitCaseClause(ctx: any): any;
    visitDefaultClause(ctx: any): any;
    visitLabelledStatement(ctx: any): any;
    visitThrowStatement(ctx: any): any;
    visitTryStatement(ctx: any): any;
    visitCatchProduction(ctx: any): any;
    visitFinallyProduction(ctx: any): any;
    visitDebuggerStatement(ctx: any): any;
    visitFunctionDeclaration(ctx: any): any;
    visitFormalParameterList(ctx: any): any;
    visitFunctionBody(ctx: any): any;
    visitArrayLiteral(ctx: any): any;
    visitElementList(ctx: any): any;
    visitElision(ctx: any): any;
    visitObjectLiteral(ctx: any): any;
    visitPropertyNameAndValueList(ctx: any): any;
    visitPropertyAssignmentExpression(ctx: any): any;
    visitPropertyGetter(ctx: any): any;
    visitPropertySetter(ctx: any): any;
    visitPropertyName(ctx: any): any;
    visitPropertySetParameterList(ctx: any): any;
    visitArguments(ctx: any): any;
    visitArgumentList(ctx: any): any;
    visitExpressionSequence(ctx: any): any;
    visitTernaryExpression(ctx: any): any;
    visitLogicalAndExpression(ctx: any): any;
    visitFuncDefExpression(ctx: any): any;
    visitPreIncrementExpression(ctx: any): any;
    visitObjectLiteralExpression(ctx: any): any;
    visitInExpression(ctx: any): any;
    visitLogicalOrExpression(ctx: any): any;
    visitNotExpression(ctx: any): any;
    visitPreDecreaseExpression(ctx: any): any;
    visitThisExpression(ctx: any): any;
    visitUnaryMinusExpression(ctx: any): any;
    visitPostDecreaseExpression(ctx: any): any;
    visitAssignmentExpression(ctx: any): any;
    visitTypeofExpression(ctx: any): any;
    visitInstanceofExpression(ctx: any): any;
    visitUnaryPlusExpression(ctx: any): any;
    visitDeleteExpression(ctx: any): any;
    visitEqualityExpression(ctx: any): any;
    visitBitXOrExpression(ctx: any): any;
    visitMultiplicativeExpression(ctx: any): any;
    visitBitShiftExpression(ctx: any): any;
    visitParenthesizedExpression(ctx: any): any;
    visitGetAttributeExpression(ctx: any): any;
    visitAdditiveExpression(ctx: any): any;
    visitRelationalExpression(ctx: any): any;
    visitPostIncrementExpression(ctx: any): any;
    visitFuncCallExpression(ctx: any): any;
    visitBitNotExpression(ctx: any): any;
    visitNewExpression(ctx: any): any;
    visitLiteralExpression(ctx: any): any;
    visitArrayLiteralExpression(ctx: any): any;
    visitMemberIndexExpression(ctx: any): any;
    visitIdentifierExpression(ctx: any): any;
    visitBitAndExpression(ctx: any): any;
    visitBitOrExpression(ctx: any): any;
    visitAssignmentOperatorExpression(ctx: any): any;
    visitVoidExpression(ctx: any): any;
    visitAssignmentOperator(ctx: any): any;
    visitNullLiteral(ctx: any): any;
    visitUndefinedLiteral(ctx: any): any;
    visitBooleanLiteral(ctx: any): any;
    visitStringLiteral(ctx: any): any;
    visitRegularExpressionLiteral(ctx: any): any;
    visitNumericLiteralWrapper(ctx: any): any;
    visitIntegerLiteral(ctx: any): any;
    visitDecimalLiteral(ctx: any): any;
    visitHexIntegerLiteral(ctx: any): any;
    visitOctalIntegerLiteral(ctx: any): any;
    visitIdentifierName(ctx: any): any;
    visitReservedWord(ctx: any): any;
    visitKeyword(ctx: any): any;
    visitFutureReservedWord(ctx: any): any;
    visitGetter(ctx: any): any;
    visitSetter(ctx: any): any;
    visitEos(ctx: any): any;
    visitEof(ctx: any): any;
}
export {};
