export var ECMAScriptLexer: typeof ECMAScriptLexer;
declare function ECMAScriptLexer(input: any): any;
declare class ECMAScriptLexer {
    constructor(input: any);
    _interp: any;
    constructor: typeof ECMAScriptLexer;
    get atn(): any;
    channelNames: string[];
    modeNames: string[];
    literalNames: string[];
    symbolicNames: string[];
    ruleNames: string[];
    grammarFileName: string;
    strictMode: boolean;
    lastToken: any;
    getStrictMode(): boolean;
    setStrictMode(strictMode: boolean): void;
    nextToken(): any;
    isRegexPossible(): boolean;
    sempred(localctx: any, ruleIndex: any, predIndex: any): boolean;
    RegularExpressionLiteral_sempred(localctx: any, predIndex: any): boolean;
    OctalIntegerLiteral_sempred(localctx: any, predIndex: any): boolean;
    Implements_sempred(localctx: any, predIndex: any): boolean;
    Let_sempred(localctx: any, predIndex: any): boolean;
    Private_sempred(localctx: any, predIndex: any): boolean;
    Public_sempred(localctx: any, predIndex: any): boolean;
    Interface_sempred(localctx: any, predIndex: any): boolean;
    Package_sempred(localctx: any, predIndex: any): boolean;
    Protected_sempred(localctx: any, predIndex: any): boolean;
    Static_sempred(localctx: any, predIndex: any): boolean;
    Yield_sempred(localctx: any, predIndex: any): boolean;
}
declare namespace ECMAScriptLexer {
    export const EOF: any;
    export const RegularExpressionLiteral: number;
    export const LineTerminator: number;
    export const OpenBracket: number;
    export const CloseBracket: number;
    export const OpenParen: number;
    export const CloseParen: number;
    export const OpenBrace: number;
    export const CloseBrace: number;
    export const SemiColon: number;
    export const Comma: number;
    export const Assign: number;
    export const QuestionMark: number;
    export const Colon: number;
    export const Dot: number;
    export const PlusPlus: number;
    export const MinusMinus: number;
    export const Plus: number;
    export const Minus: number;
    export const BitNot: number;
    export const Not: number;
    export const Multiply: number;
    export const Divide: number;
    export const Modulus: number;
    export const RightShiftArithmetic: number;
    export const LeftShiftArithmetic: number;
    export const RightShiftLogical: number;
    export const LessThan: number;
    export const MoreThan: number;
    export const LessThanEquals: number;
    export const GreaterThanEquals: number;
    export const Equals: number;
    export const NotEquals: number;
    export const IdentityEquals: number;
    export const IdentityNotEquals: number;
    export const BitAnd: number;
    export const BitXOr: number;
    export const BitOr: number;
    export const And: number;
    export const Or: number;
    export const MultiplyAssign: number;
    export const DivideAssign: number;
    export const ModulusAssign: number;
    export const PlusAssign: number;
    export const MinusAssign: number;
    export const LeftShiftArithmeticAssign: number;
    export const RightShiftArithmeticAssign: number;
    export const RightShiftLogicalAssign: number;
    export const BitAndAssign: number;
    export const BitXorAssign: number;
    export const BitOrAssign: number;
    export const NullLiteral: number;
    export const UndefinedLiteral: number;
    export const BooleanLiteral: number;
    export const IntegerLiteral: number;
    export const DecimalLiteral: number;
    export const HexIntegerLiteral: number;
    export const OctalIntegerLiteral: number;
    export const Break: number;
    export const Do: number;
    export const Instanceof: number;
    export const Typeof: number;
    export const Case: number;
    export const Else: number;
    export const New: number;
    export const Var: number;
    export const Catch: number;
    export const Finally: number;
    export const Return: number;
    export const Void: number;
    export const Continue: number;
    export const For: number;
    export const Switch: number;
    export const While: number;
    export const Debugger: number;
    export const Function: number;
    export const This: number;
    export const With: number;
    export const Default: number;
    export const If: number;
    export const Throw: number;
    export const Delete: number;
    export const In: number;
    export const Try: number;
    export const Class: number;
    export const Enum: number;
    export const Extends: number;
    export const Super: number;
    export const Const: number;
    export const Export: number;
    export const Import: number;
    export const Implements: number;
    export const Let: number;
    export const Private: number;
    export const Public: number;
    export const Interface: number;
    export const Package: number;
    export const Protected: number;
    export const Static: number;
    export const Yield: number;
    export const Identifier: number;
    export const StringLiteral: number;
    export const WhiteSpaces: number;
    export const MultiLineComment: number;
    export const SingleLineComment: number;
    export const UnexpectedCharacter: number;
}
export {};
