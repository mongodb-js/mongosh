// Generated from antlr/JavaScriptParser.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var JavaScriptParserVisitor = require('./JavaScriptParserVisitor').JavaScriptParserVisitor;

var JavaScriptBaseParser = require('./JavaScriptBaseParser').JavaScriptBaseParser;

var grammarFileName = "JavaScriptParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003}\u03c0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0003\u0002\u0005\u0002\u0096\n\u0002\u0003",
    "\u0002\u0005\u0002\u0099\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00b3\n\u0004\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00b7\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0006\u0006\u00bc\n\u0006\r\u0006\u000e\u0006\u00bd\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\b\u0005\b\u00c4\n\b\u0003\b\u0003",
    "\b\u0005\b\u00c8\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b",
    "\u00cf\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00d5\n\t\f\t\u000e",
    "\t\u00d8\u000b\t\u0003\t\u0003\t\u0005\t\u00dc\n\t\u0005\t\u00de\n\t",
    "\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u00e8\n\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u00f0\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u00f5\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u00fe\n\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u0106\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u010a\n\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u010f\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0118\n\u0012\f\u0012\u000e\u0012\u011b\u000b\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0120\n\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u012f\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0143\n\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u0147\n\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u014b\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0153\n\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u015c\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u0161\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0005\u0017\u0169\n\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0170\n\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0177\n\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u017e\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u0185\n\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u0197\n\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u019b\n\u001f\u0005\u001f\u019d\n\u001f\u0003",
    "\u001f\u0003\u001f\u0003 \u0006 \u01a2\n \r \u000e \u01a3\u0003!\u0003",
    "!\u0003!\u0003!\u0005!\u01aa\n!\u0003\"\u0003\"\u0003\"\u0005\"\u01af",
    "\n\"\u0003#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$",
    "\u0003%\u0003%\u0003%\u0003%\u0005%\u01be\n%\u0003%\u0005%\u01c1\n%",
    "\u0003&\u0003&\u0003&\u0005&\u01c6\n&\u0003&\u0005&\u01c9\n&\u0003&",
    "\u0003&\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0005)\u01d4",
    "\n)\u0003)\u0003)\u0005)\u01d8\n)\u0003)\u0003)\u0003)\u0005)\u01dd",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003",
    "+\u0003+\u0005+\u01ea\n+\u0003+\u0003+\u0007+\u01ee\n+\f+\u000e+\u01f1",
    "\u000b+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0007,\u01f9\n,\f",
    ",\u000e,\u01fc\u000b,\u0003,\u0003,\u0003,\u0005,\u0201\n,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u0207\n,\u0003-\u0005-\u020a\n-\u0003-\u0005",
    "-\u020d\n-\u0003-\u0003-\u0003-\u0005-\u0212\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0005-\u021a\n-\u0003-\u0005-\u021d\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u0227\n-\u0003",
    "-\u0005-\u022a\n-\u0003-\u0003-\u0003-\u0005-\u022f\n-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0005-\u0236\n-\u0003.\u0003.\u0003.\u0007.\u023b",
    "\n.\f.\u000e.\u023e\u000b.\u0003.\u0003.\u0005.\u0242\n.\u0003.\u0005",
    ".\u0245\n.\u0003/\u0003/\u0003/\u0005/\u024a\n/\u00030\u00030\u0003",
    "0\u00031\u00051\u0250\n1\u00032\u00062\u0253\n2\r2\u000e2\u0254\u0003",
    "3\u00033\u00033\u00033\u00034\u00074\u025c\n4\f4\u000e4\u025f\u000b",
    "4\u00034\u00054\u0262\n4\u00034\u00064\u0265\n4\r4\u000e4\u0266\u0003",
    "4\u00074\u026a\n4\f4\u000e4\u026d\u000b4\u00034\u00074\u0270\n4\f4\u000e",
    "4\u0273\u000b4\u00035\u00055\u0276\n5\u00035\u00035\u00036\u00036\u0003",
    "6\u00036\u00076\u027e\n6\f6\u000e6\u0281\u000b6\u00056\u0283\n6\u0003",
    "6\u00056\u0286\n6\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00057\u0295\n7\u00037\u00057\u0298",
    "\n7\u00037\u00037\u00037\u00057\u029d\n7\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u02b4\n7\u0003",
    "7\u00057\u02b7\n7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0005",
    "8\u02c0\n8\u00039\u00039\u00039\u00039\u00079\u02c6\n9\f9\u000e9\u02c9",
    "\u000b9\u00039\u00059\u02cc\n9\u00059\u02ce\n9\u00039\u00039\u0003:",
    "\u0005:\u02d3\n:\u0003:\u0003:\u0005:\u02d7\n:\u0003;\u0003;\u0003;",
    "\u0007;\u02dc\n;\f;\u000e;\u02df\u000b;\u0003<\u0003<\u0003<\u0003<",
    "\u0005<\u02e5\n<\u0003<\u0003<\u0003<\u0003<\u0005<\u02eb\n<\u0003<",
    "\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0314",
    "\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0005<\u0354\n<\u0003<\u0003<\u0005<\u0358\n<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0007<\u0365\n<\f<\u000e<\u0368\u000b<\u0003=\u0003=\u0003=\u0005",
    "=\u036d\n=\u0003>\u0003>\u0005>\u0371\n>\u0003>\u0003>\u0005>\u0375",
    "\n>\u0003>\u0003>\u0005>\u0379\n>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0005>\u0381\n>\u0003>\u0003>\u0003>\u0003>\u0005>\u0387\n",
    ">\u0003?\u0003?\u0003?\u0005?\u038c\n?\u0003?\u0005?\u038f\n?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0005@\u0396\n@\u0003A\u0003A\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u03a1\nB\u0003C\u0003C\u0003",
    "D\u0003D\u0003E\u0003E\u0005E\u03a9\nE\u0003F\u0003F\u0003F\u0005F\u03ae",
    "\nF\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0003J\u0005J\u03be\nJ\u0003J\u0002\u0003vK\u0002",
    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e",
    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0002\f\u0005\u0002OOhhn",
    "n\u0003\u0002\u001a\u001c\u0003\u0002\u0016\u0017\u0003\u0002 \"\u0003",
    "\u0002#&\u0003\u0002\'*\u0003\u00020;\u0003\u0002?C\u0003\u0002DG\u0003",
    "\u0002Hu\u0002\u0435\u0002\u0095\u0003\u0002\u0002\u0002\u0004\u009c",
    "\u0003\u0002\u0002\u0002\u0006\u00b2\u0003\u0002\u0002\u0002\b\u00b4",
    "\u0003\u0002\u0002\u0002\n\u00bb\u0003\u0002\u0002\u0002\f\u00bf\u0003",
    "\u0002\u0002\u0002\u000e\u00ce\u0003\u0002\u0002\u0002\u0010\u00d0\u0003",
    "\u0002\u0002\u0002\u0012\u00e1\u0003\u0002\u0002\u0002\u0014\u00e4\u0003",
    "\u0002\u0002\u0002\u0016\u00e9\u0003\u0002\u0002\u0002\u0018\u00ec\u0003",
    "\u0002\u0002\u0002\u001a\u00fd\u0003\u0002\u0002\u0002\u001c\u0109\u0003",
    "\u0002\u0002\u0002\u001e\u010e\u0003\u0002\u0002\u0002 \u0110\u0003",
    "\u0002\u0002\u0002\"\u0114\u0003\u0002\u0002\u0002$\u011c\u0003\u0002",
    "\u0002\u0002&\u0121\u0003\u0002\u0002\u0002(\u0123\u0003\u0002\u0002",
    "\u0002*\u0127\u0003\u0002\u0002\u0002,\u0168\u0003\u0002\u0002\u0002",
    ".\u016a\u0003\u0002\u0002\u00020\u016c\u0003\u0002\u0002\u00022\u0173",
    "\u0003\u0002\u0002\u00024\u017a\u0003\u0002\u0002\u00026\u0181\u0003",
    "\u0002\u0002\u00028\u0188\u0003\u0002\u0002\u0002:\u018e\u0003\u0002",
    "\u0002\u0002<\u0194\u0003\u0002\u0002\u0002>\u01a1\u0003\u0002\u0002",
    "\u0002@\u01a5\u0003\u0002\u0002\u0002B\u01ab\u0003\u0002\u0002\u0002",
    "D\u01b0\u0003\u0002\u0002\u0002F\u01b4\u0003\u0002\u0002\u0002H\u01b9",
    "\u0003\u0002\u0002\u0002J\u01c2\u0003\u0002\u0002\u0002L\u01cc\u0003",
    "\u0002\u0002\u0002N\u01cf\u0003\u0002\u0002\u0002P\u01d3\u0003\u0002",
    "\u0002\u0002R\u01e3\u0003\u0002\u0002\u0002T\u01e9\u0003\u0002\u0002",
    "\u0002V\u0206\u0003\u0002\u0002\u0002X\u0235\u0003\u0002\u0002\u0002",
    "Z\u0244\u0003\u0002\u0002\u0002\\\u0246\u0003\u0002\u0002\u0002^\u024b",
    "\u0003\u0002\u0002\u0002`\u024f\u0003\u0002\u0002\u0002b\u0252\u0003",
    "\u0002\u0002\u0002d\u0256\u0003\u0002\u0002\u0002f\u025d\u0003\u0002",
    "\u0002\u0002h\u0275\u0003\u0002\u0002\u0002j\u0279\u0003\u0002\u0002",
    "\u0002l\u02b6\u0003\u0002\u0002\u0002n\u02bf\u0003\u0002\u0002\u0002",
    "p\u02c1\u0003\u0002\u0002\u0002r\u02d2\u0003\u0002\u0002\u0002t\u02d8",
    "\u0003\u0002\u0002\u0002v\u0313\u0003\u0002\u0002\u0002x\u036c\u0003",
    "\u0002\u0002\u0002z\u0386\u0003\u0002\u0002\u0002|\u038e\u0003\u0002",
    "\u0002\u0002~\u0395\u0003\u0002\u0002\u0002\u0080\u0397\u0003\u0002",
    "\u0002\u0002\u0082\u03a0\u0003\u0002\u0002\u0002\u0084\u03a2\u0003\u0002",
    "\u0002\u0002\u0086\u03a4\u0003\u0002\u0002\u0002\u0088\u03a8\u0003\u0002",
    "\u0002\u0002\u008a\u03ad\u0003\u0002\u0002\u0002\u008c\u03af\u0003\u0002",
    "\u0002\u0002\u008e\u03b1\u0003\u0002\u0002\u0002\u0090\u03b5\u0003\u0002",
    "\u0002\u0002\u0092\u03bd\u0003\u0002\u0002\u0002\u0094\u0096\u0007\u0003",
    "\u0002\u0002\u0095\u0094\u0003\u0002\u0002\u0002\u0095\u0096\u0003\u0002",
    "\u0002\u0002\u0096\u0098\u0003\u0002\u0002\u0002\u0097\u0099\u0005b",
    "2\u0002\u0098\u0097\u0003\u0002\u0002\u0002\u0098\u0099\u0003\u0002",
    "\u0002\u0002\u0099\u009a\u0003\u0002\u0002\u0002\u009a\u009b\u0007\u0002",
    "\u0002\u0003\u009b\u0003\u0003\u0002\u0002\u0002\u009c\u009d\u0005\u0006",
    "\u0004\u0002\u009d\u0005\u0003\u0002\u0002\u0002\u009e\u00b3\u0005\b",
    "\u0005\u0002\u009f\u00b3\u0005 \u0011\u0002\u00a0\u00b3\u0005\f\u0007",
    "\u0002\u00a1\u00b3\u0005\u001a\u000e\u0002\u00a2\u00b3\u0005&\u0014",
    "\u0002\u00a3\u00b3\u0005R*\u0002\u00a4\u00b3\u0005(\u0015\u0002\u00a5",
    "\u00b3\u0005*\u0016\u0002\u00a6\u00b3\u0005,\u0017\u0002\u00a7\u00b3",
    "\u00050\u0019\u0002\u00a8\u00b3\u00052\u001a\u0002\u00a9\u00b3\u0005",
    "4\u001b\u0002\u00aa\u00b3\u00056\u001c\u0002\u00ab\u00b3\u00058\u001d",
    "\u0002\u00ac\u00b3\u0005D#\u0002\u00ad\u00b3\u0005:\u001e\u0002\u00ae",
    "\u00b3\u0005F$\u0002\u00af\u00b3\u0005H%\u0002\u00b0\u00b3\u0005N(\u0002",
    "\u00b1\u00b3\u0005P)\u0002\u00b2\u009e\u0003\u0002\u0002\u0002\u00b2",
    "\u009f\u0003\u0002\u0002\u0002\u00b2\u00a0\u0003\u0002\u0002\u0002\u00b2",
    "\u00a1\u0003\u0002\u0002\u0002\u00b2\u00a2\u0003\u0002\u0002\u0002\u00b2",
    "\u00a3\u0003\u0002\u0002\u0002\u00b2\u00a4\u0003\u0002\u0002\u0002\u00b2",
    "\u00a5\u0003\u0002\u0002\u0002\u00b2\u00a6\u0003\u0002\u0002\u0002\u00b2",
    "\u00a7\u0003\u0002\u0002\u0002\u00b2\u00a8\u0003\u0002\u0002\u0002\u00b2",
    "\u00a9\u0003\u0002\u0002\u0002\u00b2\u00aa\u0003\u0002\u0002\u0002\u00b2",
    "\u00ab\u0003\u0002\u0002\u0002\u00b2\u00ac\u0003\u0002\u0002\u0002\u00b2",
    "\u00ad\u0003\u0002\u0002\u0002\u00b2\u00ae\u0003\u0002\u0002\u0002\u00b2",
    "\u00af\u0003\u0002\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b2",
    "\u00b1\u0003\u0002\u0002\u0002\u00b3\u0007\u0003\u0002\u0002\u0002\u00b4",
    "\u00b6\u0007\u000b\u0002\u0002\u00b5\u00b7\u0005\n\u0006\u0002\u00b6",
    "\u00b5\u0003\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7",
    "\u00b8\u0003\u0002\u0002\u0002\u00b8\u00b9\u0007\f\u0002\u0002\u00b9",
    "\t\u0003\u0002\u0002\u0002\u00ba\u00bc\u0005\u0006\u0004\u0002\u00bb",
    "\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd",
    "\u00bb\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be",
    "\u000b\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007j\u0002\u0002\u00c0",
    "\u00c1\u0005\u000e\b\u0002\u00c1\r\u0003\u0002\u0002\u0002\u00c2\u00c4",
    "\u0005\u0012\n\u0002\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c3\u00c4",
    "\u0003\u0002\u0002\u0002\u00c4\u00c7\u0003\u0002\u0002\u0002\u00c5\u00c8",
    "\u0005\u0014\u000b\u0002\u00c6\u00c8\u0005\u0010\t\u0002\u00c7\u00c5",
    "\u0003\u0002\u0002\u0002\u00c7\u00c6\u0003\u0002\u0002\u0002\u00c8\u00c9",
    "\u0003\u0002\u0002\u0002\u00c9\u00ca\u0005\u0016\f\u0002\u00ca\u00cb",
    "\u0005\u0092J\u0002\u00cb\u00cf\u0003\u0002\u0002\u0002\u00cc\u00cd",
    "\u0007w\u0002\u0002\u00cd\u00cf\u0005\u0092J\u0002\u00ce\u00c3\u0003",
    "\u0002\u0002\u0002\u00ce\u00cc\u0003\u0002\u0002\u0002\u00cf\u000f\u0003",
    "\u0002\u0002\u0002\u00d0\u00d6\u0007\u000b\u0002\u0002\u00d1\u00d2\u0005",
    "\u0018\r\u0002\u00d2\u00d3\u0007\u000e\u0002\u0002\u00d3\u00d5\u0003",
    "\u0002\u0002\u0002\u00d4\u00d1\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003",
    "\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003",
    "\u0002\u0002\u0002\u00d7\u00dd\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003",
    "\u0002\u0002\u0002\u00d9\u00db\u0005\u0018\r\u0002\u00da\u00dc\u0007",
    "\u000e\u0002\u0002\u00db\u00da\u0003\u0002\u0002\u0002\u00db\u00dc\u0003",
    "\u0002\u0002\u0002\u00dc\u00de\u0003\u0002\u0002\u0002\u00dd\u00d9\u0003",
    "\u0002\u0002\u0002\u00dd\u00de\u0003\u0002\u0002\u0002\u00de\u00df\u0003",
    "\u0002\u0002\u0002\u00df\u00e0\u0007\f\u0002\u0002\u00e0\u0011\u0003",
    "\u0002\u0002\u0002\u00e1\u00e2\u0005\u0018\r\u0002\u00e2\u00e3\u0007",
    "\u000e\u0002\u0002\u00e3\u0013\u0003\u0002\u0002\u0002\u00e4\u00e7\u0007",
    "\u001a\u0002\u0002\u00e5\u00e6\u0007b\u0002\u0002\u00e6\u00e8\u0005",
    "\u0088E\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003",
    "\u0002\u0002\u0002\u00e8\u0015\u0003\u0002\u0002\u0002\u00e9\u00ea\u0007",
    "c\u0002\u0002\u00ea\u00eb\u0007w\u0002\u0002\u00eb\u0017\u0003\u0002",
    "\u0002\u0002\u00ec\u00ef\u0005\u0088E\u0002\u00ed\u00ee\u0007b\u0002",
    "\u0002\u00ee\u00f0\u0005\u0088E\u0002\u00ef\u00ed\u0003\u0002\u0002",
    "\u0002\u00ef\u00f0\u0003\u0002\u0002\u0002\u00f0\u0019\u0003\u0002\u0002",
    "\u0002\u00f1\u00f4\u0007i\u0002\u0002\u00f2\u00f5\u0005\u001c\u000f",
    "\u0002\u00f3\u00f5\u0005\u001e\u0010\u0002\u00f4\u00f2\u0003\u0002\u0002",
    "\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002",
    "\u0002\u00f6\u00f7\u0005\u0092J\u0002\u00f7\u00fe\u0003\u0002\u0002",
    "\u0002\u00f8\u00f9\u0007i\u0002\u0002\u00f9\u00fa\u0007\\\u0002\u0002",
    "\u00fa\u00fb\u0005v<\u0002\u00fb\u00fc\u0005\u0092J\u0002\u00fc\u00fe",
    "\u0003\u0002\u0002\u0002\u00fd\u00f1\u0003\u0002\u0002\u0002\u00fd\u00f8",
    "\u0003\u0002\u0002\u0002\u00fe\u001b\u0003\u0002\u0002\u0002\u00ff\u0100",
    "\u0005\u0014\u000b\u0002\u0100\u0101\u0005\u0016\f\u0002\u0101\u0102",
    "\u0005\u0092J\u0002\u0102\u010a\u0003\u0002\u0002\u0002\u0103\u0105",
    "\u0005\u0010\t\u0002\u0104\u0106\u0005\u0016\f\u0002\u0105\u0104\u0003",
    "\u0002\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0107\u0003",
    "\u0002\u0002\u0002\u0107\u0108\u0005\u0092J\u0002\u0108\u010a\u0003",
    "\u0002\u0002\u0002\u0109\u00ff\u0003\u0002\u0002\u0002\u0109\u0103\u0003",
    "\u0002\u0002\u0002\u010a\u001d\u0003\u0002\u0002\u0002\u010b\u010f\u0005",
    " \u0011\u0002\u010c\u010f\u0005R*\u0002\u010d\u010f\u0005P)\u0002\u010e",
    "\u010b\u0003\u0002\u0002\u0002\u010e\u010c\u0003\u0002\u0002\u0002\u010e",
    "\u010d\u0003\u0002\u0002\u0002\u010f\u001f\u0003\u0002\u0002\u0002\u0110",
    "\u0111\u0005.\u0018\u0002\u0111\u0112\u0005\"\u0012\u0002\u0112\u0113",
    "\u0005\u0092J\u0002\u0113!\u0003\u0002\u0002\u0002\u0114\u0119\u0005",
    "$\u0013\u0002\u0115\u0116\u0007\u000e\u0002\u0002\u0116\u0118\u0005",
    "$\u0013\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0118\u011b\u0003",
    "\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u0119\u011a\u0003",
    "\u0002\u0002\u0002\u011a#\u0003\u0002\u0002\u0002\u011b\u0119\u0003",
    "\u0002\u0002\u0002\u011c\u011f\u0005x=\u0002\u011d\u011e\u0007\u000f",
    "\u0002\u0002\u011e\u0120\u0005v<\u0002\u011f\u011d\u0003\u0002\u0002",
    "\u0002\u011f\u0120\u0003\u0002\u0002\u0002\u0120%\u0003\u0002\u0002",
    "\u0002\u0121\u0122\u0007\r\u0002\u0002\u0122\'\u0003\u0002\u0002\u0002",
    "\u0123\u0124\u0006\u0015\u0002\u0002\u0124\u0125\u0005t;\u0002\u0125",
    "\u0126\u0005\u0092J\u0002\u0126)\u0003\u0002\u0002\u0002\u0127\u0128",
    "\u0007]\u0002\u0002\u0128\u0129\u0007\t\u0002\u0002\u0129\u012a\u0005",
    "t;\u0002\u012a\u012b\u0007\n\u0002\u0002\u012b\u012e\u0005\u0006\u0004",
    "\u0002\u012c\u012d\u0007M\u0002\u0002\u012d\u012f\u0005\u0006\u0004",
    "\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002",
    "\u0002\u012f+\u0003\u0002\u0002\u0002\u0130\u0131\u0007I\u0002\u0002",
    "\u0131\u0132\u0005\u0006\u0004\u0002\u0132\u0133\u0007W\u0002\u0002",
    "\u0133\u0134\u0007\t\u0002\u0002\u0134\u0135\u0005t;\u0002\u0135\u0136",
    "\u0007\n\u0002\u0002\u0136\u0137\u0005\u0092J\u0002\u0137\u0169\u0003",
    "\u0002\u0002\u0002\u0138\u0139\u0007W\u0002\u0002\u0139\u013a\u0007",
    "\t\u0002\u0002\u013a\u013b\u0005t;\u0002\u013b\u013c\u0007\n\u0002\u0002",
    "\u013c\u013d\u0005\u0006\u0004\u0002\u013d\u0169\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0007U\u0002\u0002\u013f\u0142\u0007\t\u0002\u0002\u0140",
    "\u0143\u0005t;\u0002\u0141\u0143\u0005 \u0011\u0002\u0142\u0140\u0003",
    "\u0002\u0002\u0002\u0142\u0141\u0003\u0002\u0002\u0002\u0142\u0143\u0003",
    "\u0002\u0002\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0146\u0007",
    "\r\u0002\u0002\u0145\u0147\u0005t;\u0002\u0146\u0145\u0003\u0002\u0002",
    "\u0002\u0146\u0147\u0003\u0002\u0002\u0002\u0147\u0148\u0003\u0002\u0002",
    "\u0002\u0148\u014a\u0007\r\u0002\u0002\u0149\u014b\u0005t;\u0002\u014a",
    "\u0149\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0003\u0002\u0002\u0002\u014c\u014d\u0007\n\u0002\u0002\u014d",
    "\u0169\u0005\u0006\u0004\u0002\u014e\u014f\u0007U\u0002\u0002\u014f",
    "\u0152\u0007\t\u0002\u0002\u0150\u0153\u0005v<\u0002\u0151\u0153\u0005",
    " \u0011\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0152\u0151\u0003",
    "\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0155\u0007",
    "`\u0002\u0002\u0155\u0156\u0005t;\u0002\u0156\u0157\u0007\n\u0002\u0002",
    "\u0157\u0158\u0005\u0006\u0004\u0002\u0158\u0169\u0003\u0002\u0002\u0002",
    "\u0159\u015b\u0007U\u0002\u0002\u015a\u015c\u0007l\u0002\u0002\u015b",
    "\u015a\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002\u0002\u0002\u015c",
    "\u015d\u0003\u0002\u0002\u0002\u015d\u0160\u0007\t\u0002\u0002\u015e",
    "\u0161\u0005v<\u0002\u015f\u0161\u0005 \u0011\u0002\u0160\u015e\u0003",
    "\u0002\u0002\u0002\u0160\u015f\u0003\u0002\u0002\u0002\u0161\u0162\u0003",
    "\u0002\u0002\u0002\u0162\u0163\u0007v\u0002\u0002\u0163\u0164\u0006",
    "\u0017\u0003\u0002\u0164\u0165\u0005t;\u0002\u0165\u0166\u0007\n\u0002",
    "\u0002\u0166\u0167\u0005\u0006\u0004\u0002\u0167\u0169\u0003\u0002\u0002",
    "\u0002\u0168\u0130\u0003\u0002\u0002\u0002\u0168\u0138\u0003\u0002\u0002",
    "\u0002\u0168\u013e\u0003\u0002\u0002\u0002\u0168\u014e\u0003\u0002\u0002",
    "\u0002\u0168\u0159\u0003\u0002\u0002\u0002\u0169-\u0003\u0002\u0002",
    "\u0002\u016a\u016b\t\u0002\u0002\u0002\u016b/\u0003\u0002\u0002\u0002",
    "\u016c\u016f\u0007T\u0002\u0002\u016d\u016e\u0006\u0019\u0004\u0002",
    "\u016e\u0170\u0007v\u0002\u0002\u016f\u016d\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0172\u0005\u0092J\u0002\u01721\u0003\u0002\u0002\u0002\u0173",
    "\u0176\u0007H\u0002\u0002\u0174\u0175\u0006\u001a\u0005\u0002\u0175",
    "\u0177\u0007v\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002\u0176",
    "\u0177\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178",
    "\u0179\u0005\u0092J\u0002\u01793\u0003\u0002\u0002\u0002\u017a\u017d",
    "\u0007R\u0002\u0002\u017b\u017c\u0006\u001b\u0006\u0002\u017c\u017e",
    "\u0005t;\u0002\u017d\u017b\u0003\u0002\u0002\u0002\u017d\u017e\u0003",
    "\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f\u0180\u0005",
    "\u0092J\u0002\u01805\u0003\u0002\u0002\u0002\u0181\u0184\u0007u\u0002",
    "\u0002\u0182\u0183\u0006\u001c\u0007\u0002\u0183\u0185\u0005t;\u0002",
    "\u0184\u0182\u0003\u0002\u0002\u0002\u0184\u0185\u0003\u0002\u0002\u0002",
    "\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0005\u0092J\u0002",
    "\u01877\u0003\u0002\u0002\u0002\u0188\u0189\u0007[\u0002\u0002\u0189",
    "\u018a\u0007\t\u0002\u0002\u018a\u018b\u0005t;\u0002\u018b\u018c\u0007",
    "\n\u0002\u0002\u018c\u018d\u0005\u0006\u0004\u0002\u018d9\u0003\u0002",
    "\u0002\u0002\u018e\u018f\u0007V\u0002\u0002\u018f\u0190\u0007\t\u0002",
    "\u0002\u0190\u0191\u0005t;\u0002\u0191\u0192\u0007\n\u0002\u0002\u0192",
    "\u0193\u0005<\u001f\u0002\u0193;\u0003\u0002\u0002\u0002\u0194\u0196",
    "\u0007\u000b\u0002\u0002\u0195\u0197\u0005> \u0002\u0196\u0195\u0003",
    "\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u019c\u0003",
    "\u0002\u0002\u0002\u0198\u019a\u0005B\"\u0002\u0199\u019b\u0005> \u0002",
    "\u019a\u0199\u0003\u0002\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002",
    "\u019b\u019d\u0003\u0002\u0002\u0002\u019c\u0198\u0003\u0002\u0002\u0002",
    "\u019c\u019d\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002",
    "\u019e\u019f\u0007\f\u0002\u0002\u019f=\u0003\u0002\u0002\u0002\u01a0",
    "\u01a2\u0005@!\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002\u01a2\u01a3",
    "\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002\u0002\u0002\u01a3\u01a4",
    "\u0003\u0002\u0002\u0002\u01a4?\u0003\u0002\u0002\u0002\u01a5\u01a6",
    "\u0007L\u0002\u0002\u01a6\u01a7\u0005t;\u0002\u01a7\u01a9\u0007\u0011",
    "\u0002\u0002\u01a8\u01aa\u0005\n\u0006\u0002\u01a9\u01a8\u0003\u0002",
    "\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aaA\u0003\u0002",
    "\u0002\u0002\u01ab\u01ac\u0007\\\u0002\u0002\u01ac\u01ae\u0007\u0011",
    "\u0002\u0002\u01ad\u01af\u0005\n\u0006\u0002\u01ae\u01ad\u0003\u0002",
    "\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01afC\u0003\u0002",
    "\u0002\u0002\u01b0\u01b1\u0007v\u0002\u0002\u01b1\u01b2\u0007\u0011",
    "\u0002\u0002\u01b2\u01b3\u0005\u0006\u0004\u0002\u01b3E\u0003\u0002",
    "\u0002\u0002\u01b4\u01b5\u0007^\u0002\u0002\u01b5\u01b6\u0006$\b\u0002",
    "\u01b6\u01b7\u0005t;\u0002\u01b7\u01b8\u0005\u0092J\u0002\u01b8G\u0003",
    "\u0002\u0002\u0002\u01b9\u01ba\u0007a\u0002\u0002\u01ba\u01c0\u0005",
    "\b\u0005\u0002\u01bb\u01bd\u0005J&\u0002\u01bc\u01be\u0005L\'\u0002",
    "\u01bd\u01bc\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002",
    "\u01be\u01c1\u0003\u0002\u0002\u0002\u01bf\u01c1\u0005L\'\u0002\u01c0",
    "\u01bb\u0003\u0002\u0002\u0002\u01c0\u01bf\u0003\u0002\u0002\u0002\u01c1",
    "I\u0003\u0002\u0002\u0002\u01c2\u01c8\u0007P\u0002\u0002\u01c3\u01c5",
    "\u0007\t\u0002\u0002\u01c4\u01c6\u0005x=\u0002\u01c5\u01c4\u0003\u0002",
    "\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002",
    "\u0002\u0002\u01c7\u01c9\u0007\n\u0002\u0002\u01c8\u01c3\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002",
    "\u0002\u0002\u01ca\u01cb\u0005\b\u0005\u0002\u01cbK\u0003\u0002\u0002",
    "\u0002\u01cc\u01cd\u0007Q\u0002\u0002\u01cd\u01ce\u0005\b\u0005\u0002",
    "\u01ceM\u0003\u0002\u0002\u0002\u01cf\u01d0\u0007X\u0002\u0002\u01d0",
    "\u01d1\u0005\u0092J\u0002\u01d1O\u0003\u0002\u0002\u0002\u01d2\u01d4",
    "\u0007k\u0002\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7",
    "\u0007Y\u0002\u0002\u01d6\u01d8\u0007\u001a\u0002\u0002\u01d7\u01d6",
    "\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01d9",
    "\u0003\u0002\u0002\u0002\u01d9\u01da\u0007v\u0002\u0002\u01da\u01dc",
    "\u0007\t\u0002\u0002\u01db\u01dd\u0005Z.\u0002\u01dc\u01db\u0003\u0002",
    "\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002",
    "\u0002\u0002\u01de\u01df\u0007\n\u0002\u0002\u01df\u01e0\u0007\u000b",
    "\u0002\u0002\u01e0\u01e1\u0005`1\u0002\u01e1\u01e2\u0007\f\u0002\u0002",
    "\u01e2Q\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007d\u0002\u0002\u01e4",
    "\u01e5\u0007v\u0002\u0002\u01e5\u01e6\u0005T+\u0002\u01e6S\u0003\u0002",
    "\u0002\u0002\u01e7\u01e8\u0007f\u0002\u0002\u01e8\u01ea\u0005v<\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002",
    "\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ef\u0007\u000b\u0002\u0002",
    "\u01ec\u01ee\u0005V,\u0002\u01ed\u01ec\u0003\u0002\u0002\u0002\u01ee",
    "\u01f1\u0003\u0002\u0002\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002\u01ef",
    "\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f2\u0003\u0002\u0002\u0002\u01f1",
    "\u01ef\u0003\u0002\u0002\u0002\u01f2\u01f3\u0007\f\u0002\u0002\u01f3",
    "U\u0003\u0002\u0002\u0002\u01f4\u01f9\u0007t\u0002\u0002\u01f5\u01f6",
    "\u0006,\t\u0002\u01f6\u01f9\u0007v\u0002\u0002\u01f7\u01f9\u0007k\u0002",
    "\u0002\u01f8\u01f4\u0003\u0002\u0002\u0002\u01f8\u01f5\u0003\u0002\u0002",
    "\u0002\u01f8\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fc\u0003\u0002\u0002",
    "\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002",
    "\u0002\u01fb\u01fd\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002",
    "\u0002\u01fd\u0207\u0005X-\u0002\u01fe\u0207\u0005&\u0014\u0002\u01ff",
    "\u0201\u0007\u001f\u0002\u0002\u0200\u01ff\u0003\u0002\u0002\u0002\u0200",
    "\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202",
    "\u0203\u0005n8\u0002\u0203\u0204\u0007\u000f\u0002\u0002\u0204\u0205",
    "\u0005v<\u0002\u0205\u0207\u0003\u0002\u0002\u0002\u0206\u01fa\u0003",
    "\u0002\u0002\u0002\u0206\u01fe\u0003\u0002\u0002\u0002\u0206\u0200\u0003",
    "\u0002\u0002\u0002\u0207W\u0003\u0002\u0002\u0002\u0208\u020a\u0007",
    "\u001a\u0002\u0002\u0209\u0208\u0003\u0002\u0002\u0002\u0209\u020a\u0003",
    "\u0002\u0002\u0002\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u020d\u0007",
    "\u001f\u0002\u0002\u020c\u020b\u0003\u0002\u0002\u0002\u020c\u020d\u0003",
    "\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0005",
    "n8\u0002\u020f\u0211\u0007\t\u0002\u0002\u0210\u0212\u0005Z.\u0002\u0211",
    "\u0210\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212",
    "\u0213\u0003\u0002\u0002\u0002\u0213\u0214\u0007\n\u0002\u0002\u0214",
    "\u0215\u0007\u000b\u0002\u0002\u0215\u0216\u0005`1\u0002\u0216\u0217",
    "\u0007\f\u0002\u0002\u0217\u0236\u0003\u0002\u0002\u0002\u0218\u021a",
    "\u0007\u001a\u0002\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u0219\u021a",
    "\u0003\u0002\u0002\u0002\u021a\u021c\u0003\u0002\u0002\u0002\u021b\u021d",
    "\u0007\u001f\u0002\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021c\u021d",
    "\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u021f",
    "\u0005\u008eH\u0002\u021f\u0220\u0007\t\u0002\u0002\u0220\u0221\u0007",
    "\n\u0002\u0002\u0221\u0222\u0007\u000b\u0002\u0002\u0222\u0223\u0005",
    "`1\u0002\u0223\u0224\u0007\f\u0002\u0002\u0224\u0236\u0003\u0002\u0002",
    "\u0002\u0225\u0227\u0007\u001a\u0002\u0002\u0226\u0225\u0003\u0002\u0002",
    "\u0002\u0226\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002",
    "\u0002\u0228\u022a\u0007\u001f\u0002\u0002\u0229\u0228\u0003\u0002\u0002",
    "\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002",
    "\u0002\u022b\u022c\u0005\u0090I\u0002\u022c\u022e\u0007\t\u0002\u0002",
    "\u022d\u022f\u0005Z.\u0002\u022e\u022d\u0003\u0002\u0002\u0002\u022e",
    "\u022f\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230",
    "\u0231\u0007\n\u0002\u0002\u0231\u0232\u0007\u000b\u0002\u0002\u0232",
    "\u0233\u0005`1\u0002\u0233\u0234\u0007\f\u0002\u0002\u0234\u0236\u0003",
    "\u0002\u0002\u0002\u0235\u0209\u0003\u0002\u0002\u0002\u0235\u0219\u0003",
    "\u0002\u0002\u0002\u0235\u0226\u0003\u0002\u0002\u0002\u0236Y\u0003",
    "\u0002\u0002\u0002\u0237\u023c\u0005\\/\u0002\u0238\u0239\u0007\u000e",
    "\u0002\u0002\u0239\u023b\u0005\\/\u0002\u023a\u0238\u0003\u0002\u0002",
    "\u0002\u023b\u023e\u0003\u0002\u0002\u0002\u023c\u023a\u0003\u0002\u0002",
    "\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u0241\u0003\u0002\u0002",
    "\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023f\u0240\u0007\u000e\u0002",
    "\u0002\u0240\u0242\u0005^0\u0002\u0241\u023f\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0245\u0003\u0002\u0002\u0002",
    "\u0243\u0245\u0005^0\u0002\u0244\u0237\u0003\u0002\u0002\u0002\u0244",
    "\u0243\u0003\u0002\u0002\u0002\u0245[\u0003\u0002\u0002\u0002\u0246",
    "\u0249\u0005x=\u0002\u0247\u0248\u0007\u000f\u0002\u0002\u0248\u024a",
    "\u0005v<\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249\u024a\u0003",
    "\u0002\u0002\u0002\u024a]\u0003\u0002\u0002\u0002\u024b\u024c\u0007",
    "\u0012\u0002\u0002\u024c\u024d\u0005v<\u0002\u024d_\u0003\u0002\u0002",
    "\u0002\u024e\u0250\u0005b2\u0002\u024f\u024e\u0003\u0002\u0002\u0002",
    "\u024f\u0250\u0003\u0002\u0002\u0002\u0250a\u0003\u0002\u0002\u0002",
    "\u0251\u0253\u0005\u0004\u0003\u0002\u0252\u0251\u0003\u0002\u0002\u0002",
    "\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0003\u0002\u0002\u0002\u0255c\u0003\u0002\u0002\u0002",
    "\u0256\u0257\u0007\u0007\u0002\u0002\u0257\u0258\u0005f4\u0002\u0258",
    "\u0259\u0007\b\u0002\u0002\u0259e\u0003\u0002\u0002\u0002\u025a\u025c",
    "\u0007\u000e\u0002\u0002\u025b\u025a\u0003\u0002\u0002\u0002\u025c\u025f",
    "\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025d\u025e",
    "\u0003\u0002\u0002\u0002\u025e\u0261\u0003\u0002\u0002\u0002\u025f\u025d",
    "\u0003\u0002\u0002\u0002\u0260\u0262\u0005h5\u0002\u0261\u0260\u0003",
    "\u0002\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u026b\u0003",
    "\u0002\u0002\u0002\u0263\u0265\u0007\u000e\u0002\u0002\u0264\u0263\u0003",
    "\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0264\u0003",
    "\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267\u0268\u0003",
    "\u0002\u0002\u0002\u0268\u026a\u0005h5\u0002\u0269\u0264\u0003\u0002",
    "\u0002\u0002\u026a\u026d\u0003\u0002\u0002\u0002\u026b\u0269\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u0271\u0003\u0002",
    "\u0002\u0002\u026d\u026b\u0003\u0002\u0002\u0002\u026e\u0270\u0007\u000e",
    "\u0002\u0002\u026f\u026e\u0003\u0002\u0002\u0002\u0270\u0273\u0003\u0002",
    "\u0002\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002",
    "\u0002\u0002\u0272g\u0003\u0002\u0002\u0002\u0273\u0271\u0003\u0002",
    "\u0002\u0002\u0274\u0276\u0007\u0012\u0002\u0002\u0275\u0274\u0003\u0002",
    "\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002",
    "\u0002\u0002\u0277\u0278\u0005v<\u0002\u0278i\u0003\u0002\u0002\u0002",
    "\u0279\u0282\u0007\u000b\u0002\u0002\u027a\u027f\u0005l7\u0002\u027b",
    "\u027c\u0007\u000e\u0002\u0002\u027c\u027e\u0005l7\u0002\u027d\u027b",
    "\u0003\u0002\u0002\u0002\u027e\u0281\u0003\u0002\u0002\u0002\u027f\u027d",
    "\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0283",
    "\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282\u027a",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0285",
    "\u0003\u0002\u0002\u0002\u0284\u0286\u0007\u000e\u0002\u0002\u0285\u0284",
    "\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u0287",
    "\u0003\u0002\u0002\u0002\u0287\u0288\u0007\f\u0002\u0002\u0288k\u0003",
    "\u0002\u0002\u0002\u0289\u028a\u0005n8\u0002\u028a\u028b\u0007\u0011",
    "\u0002\u0002\u028b\u028c\u0005v<\u0002\u028c\u02b7\u0003\u0002\u0002",
    "\u0002\u028d\u028e\u0007\u0007\u0002\u0002\u028e\u028f\u0005v<\u0002",
    "\u028f\u0290\u0007\b\u0002\u0002\u0290\u0291\u0007\u0011\u0002\u0002",
    "\u0291\u0292\u0005v<\u0002\u0292\u02b7\u0003\u0002\u0002\u0002\u0293",
    "\u0295\u0007k\u0002\u0002\u0294\u0293\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0003\u0002\u0002\u0002\u0295\u0297\u0003\u0002\u0002\u0002\u0296",
    "\u0298\u0007\u001a\u0002\u0002\u0297\u0296\u0003\u0002\u0002\u0002\u0297",
    "\u0298\u0003\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299",
    "\u029a\u0005n8\u0002\u029a\u029c\u0007\t\u0002\u0002\u029b\u029d\u0005",
    "Z.\u0002\u029c\u029b\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002",
    "\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002\u029e\u029f\u0007\n",
    "\u0002\u0002\u029f\u02a0\u0007\u000b\u0002\u0002\u02a0\u02a1\u0005`",
    "1\u0002\u02a1\u02a2\u0007\f\u0002\u0002\u02a2\u02b7\u0003\u0002\u0002",
    "\u0002\u02a3\u02a4\u0005\u008eH\u0002\u02a4\u02a5\u0007\t\u0002\u0002",
    "\u02a5\u02a6\u0007\n\u0002\u0002\u02a6\u02a7\u0007\u000b\u0002\u0002",
    "\u02a7\u02a8\u0005`1\u0002\u02a8\u02a9\u0007\f\u0002\u0002\u02a9\u02b7",
    "\u0003\u0002\u0002\u0002\u02aa\u02ab\u0005\u0090I\u0002\u02ab\u02ac",
    "\u0007\t\u0002\u0002\u02ac\u02ad\u0005\\/\u0002\u02ad\u02ae\u0007\n",
    "\u0002\u0002\u02ae\u02af\u0007\u000b\u0002\u0002\u02af\u02b0\u0005`",
    "1\u0002\u02b0\u02b1\u0007\f\u0002\u0002\u02b1\u02b7\u0003\u0002\u0002",
    "\u0002\u02b2\u02b4\u0007\u0012\u0002\u0002\u02b3\u02b2\u0003\u0002\u0002",
    "\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002",
    "\u0002\u02b5\u02b7\u0005v<\u0002\u02b6\u0289\u0003\u0002\u0002\u0002",
    "\u02b6\u028d\u0003\u0002\u0002\u0002\u02b6\u0294\u0003\u0002\u0002\u0002",
    "\u02b6\u02a3\u0003\u0002\u0002\u0002\u02b6\u02aa\u0003\u0002\u0002\u0002",
    "\u02b6\u02b3\u0003\u0002\u0002\u0002\u02b7m\u0003\u0002\u0002\u0002",
    "\u02b8\u02c0\u0005\u0088E\u0002\u02b9\u02c0\u0007w\u0002\u0002\u02ba",
    "\u02c0\u0005\u0084C\u0002\u02bb\u02bc\u0007\u0007\u0002\u0002\u02bc",
    "\u02bd\u0005v<\u0002\u02bd\u02be\u0007\b\u0002\u0002\u02be\u02c0\u0003",
    "\u0002\u0002\u0002\u02bf\u02b8\u0003\u0002\u0002\u0002\u02bf\u02b9\u0003",
    "\u0002\u0002\u0002\u02bf\u02ba\u0003\u0002\u0002\u0002\u02bf\u02bb\u0003",
    "\u0002\u0002\u0002\u02c0o\u0003\u0002\u0002\u0002\u02c1\u02cd\u0007",
    "\t\u0002\u0002\u02c2\u02c7\u0005r:\u0002\u02c3\u02c4\u0007\u000e\u0002",
    "\u0002\u02c4\u02c6\u0005r:\u0002\u02c5\u02c3\u0003\u0002\u0002\u0002",
    "\u02c6\u02c9\u0003\u0002\u0002\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002",
    "\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02cb\u0003\u0002\u0002\u0002",
    "\u02c9\u02c7\u0003\u0002\u0002\u0002\u02ca\u02cc\u0007\u000e\u0002\u0002",
    "\u02cb\u02ca\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003\u0002\u0002\u0002",
    "\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd\u02c2\u0003\u0002\u0002\u0002",
    "\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002",
    "\u02cf\u02d0\u0007\n\u0002\u0002\u02d0q\u0003\u0002\u0002\u0002\u02d1",
    "\u02d3\u0007\u0012\u0002\u0002\u02d2\u02d1\u0003\u0002\u0002\u0002\u02d2",
    "\u02d3\u0003\u0002\u0002\u0002\u02d3\u02d6\u0003\u0002\u0002\u0002\u02d4",
    "\u02d7\u0005v<\u0002\u02d5\u02d7\u0007v\u0002\u0002\u02d6\u02d4\u0003",
    "\u0002\u0002\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002\u02d7s\u0003",
    "\u0002\u0002\u0002\u02d8\u02dd\u0005v<\u0002\u02d9\u02da\u0007\u000e",
    "\u0002\u0002\u02da\u02dc\u0005v<\u0002\u02db\u02d9\u0003\u0002\u0002",
    "\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02db\u0003\u0002\u0002",
    "\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02deu\u0003\u0002\u0002",
    "\u0002\u02df\u02dd\u0003\u0002\u0002\u0002\u02e0\u02e1\b<\u0001\u0002",
    "\u02e1\u0314\u0005z>\u0002\u02e2\u02e4\u0007d\u0002\u0002\u02e3\u02e5",
    "\u0007v\u0002\u0002\u02e4\u02e3\u0003\u0002\u0002\u0002\u02e4\u02e5",
    "\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u0314",
    "\u0005T+\u0002\u02e7\u02e8\u0007N\u0002\u0002\u02e8\u02ea\u0005v<\u0002",
    "\u02e9\u02eb\u0005p9\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02ea",
    "\u02eb\u0003\u0002\u0002\u0002\u02eb\u0314\u0003\u0002\u0002\u0002\u02ec",
    "\u02ed\u0007N\u0002\u0002\u02ed\u02ee\u0007\u0013\u0002\u0002\u02ee",
    "\u0314\u0007v\u0002\u0002\u02ef\u02f0\u0007_\u0002\u0002\u02f0\u0314",
    "\u0005v<\'\u02f1\u02f2\u0007S\u0002\u0002\u02f2\u0314\u0005v<&\u02f3",
    "\u02f4\u0007K\u0002\u0002\u02f4\u0314\u0005v<%\u02f5\u02f6\u0007\u0014",
    "\u0002\u0002\u02f6\u0314\u0005v<$\u02f7\u02f8\u0007\u0015\u0002\u0002",
    "\u02f8\u0314\u0005v<#\u02f9\u02fa\u0007\u0016\u0002\u0002\u02fa\u0314",
    "\u0005v<\"\u02fb\u02fc\u0007\u0017\u0002\u0002\u02fc\u0314\u0005v<!",
    "\u02fd\u02fe\u0007\u0018\u0002\u0002\u02fe\u0314\u0005v< \u02ff\u0300",
    "\u0007\u0019\u0002\u0002\u0300\u0314\u0005v<\u001f\u0301\u0302\u0007",
    "l\u0002\u0002\u0302\u0314\u0005v<\u001e\u0303\u0304\u0007j\u0002\u0002",
    "\u0304\u0305\u0007\t\u0002\u0002\u0305\u0306\u0005v<\u0002\u0306\u0307",
    "\u0007\n\u0002\u0002\u0307\u0314\u0003\u0002\u0002\u0002\u0308\u0314",
    "\u00056\u001c\u0002\u0309\u0314\u0007Z\u0002\u0002\u030a\u0314\u0007",
    "v\u0002\u0002\u030b\u0314\u0007g\u0002\u0002\u030c\u0314\u0005\u0082",
    "B\u0002\u030d\u0314\u0005d3\u0002\u030e\u0314\u0005j6\u0002\u030f\u0310",
    "\u0007\t\u0002\u0002\u0310\u0311\u0005t;\u0002\u0311\u0312\u0007\n\u0002",
    "\u0002\u0312\u0314\u0003\u0002\u0002\u0002\u0313\u02e0\u0003\u0002\u0002",
    "\u0002\u0313\u02e2\u0003\u0002\u0002\u0002\u0313\u02e7\u0003\u0002\u0002",
    "\u0002\u0313\u02ec\u0003\u0002\u0002\u0002\u0313\u02ef\u0003\u0002\u0002",
    "\u0002\u0313\u02f1\u0003\u0002\u0002\u0002\u0313\u02f3\u0003\u0002\u0002",
    "\u0002\u0313\u02f5\u0003\u0002\u0002\u0002\u0313\u02f7\u0003\u0002\u0002",
    "\u0002\u0313\u02f9\u0003\u0002\u0002\u0002\u0313\u02fb\u0003\u0002\u0002",
    "\u0002\u0313\u02fd\u0003\u0002\u0002\u0002\u0313\u02ff\u0003\u0002\u0002",
    "\u0002\u0313\u0301\u0003\u0002\u0002\u0002\u0313\u0303\u0003\u0002\u0002",
    "\u0002\u0313\u0308\u0003\u0002\u0002\u0002\u0313\u0309\u0003\u0002\u0002",
    "\u0002\u0313\u030a\u0003\u0002\u0002\u0002\u0313\u030b\u0003\u0002\u0002",
    "\u0002\u0313\u030c\u0003\u0002\u0002\u0002\u0313\u030d\u0003\u0002\u0002",
    "\u0002\u0313\u030e\u0003\u0002\u0002\u0002\u0313\u030f\u0003\u0002\u0002",
    "\u0002\u0314\u0366\u0003\u0002\u0002\u0002\u0315\u0316\f\u001d\u0002",
    "\u0002\u0316\u0317\u0007\u001d\u0002\u0002\u0317\u0365\u0005v<\u001d",
    "\u0318\u0319\f\u001c\u0002\u0002\u0319\u031a\t\u0003\u0002\u0002\u031a",
    "\u0365\u0005v<\u001d\u031b\u031c\f\u001b\u0002\u0002\u031c\u031d\t\u0004",
    "\u0002\u0002\u031d\u0365\u0005v<\u001c\u031e\u031f\f\u001a\u0002\u0002",
    "\u031f\u0320\u0007\u001e\u0002\u0002\u0320\u0365\u0005v<\u001b\u0321",
    "\u0322\f\u0019\u0002\u0002\u0322\u0323\t\u0005\u0002\u0002\u0323\u0365",
    "\u0005v<\u001a\u0324\u0325\f\u0018\u0002\u0002\u0325\u0326\t\u0006\u0002",
    "\u0002\u0326\u0365\u0005v<\u0019\u0327\u0328\f\u0017\u0002\u0002\u0328",
    "\u0329\u0007J\u0002\u0002\u0329\u0365\u0005v<\u0018\u032a\u032b\f\u0016",
    "\u0002\u0002\u032b\u032c\u0007`\u0002\u0002\u032c\u0365\u0005v<\u0017",
    "\u032d\u032e\f\u0015\u0002\u0002\u032e\u032f\t\u0007\u0002\u0002\u032f",
    "\u0365\u0005v<\u0016\u0330\u0331\f\u0014\u0002\u0002\u0331\u0332\u0007",
    "+\u0002\u0002\u0332\u0365\u0005v<\u0015\u0333\u0334\f\u0013\u0002\u0002",
    "\u0334\u0335\u0007,\u0002\u0002\u0335\u0365\u0005v<\u0014\u0336\u0337",
    "\f\u0012\u0002\u0002\u0337\u0338\u0007-\u0002\u0002\u0338\u0365\u0005",
    "v<\u0013\u0339\u033a\f\u0011\u0002\u0002\u033a\u033b\u0007.\u0002\u0002",
    "\u033b\u0365\u0005v<\u0012\u033c\u033d\f\u0010\u0002\u0002\u033d\u033e",
    "\u0007/\u0002\u0002\u033e\u0365\u0005v<\u0011\u033f\u0340\f\u000f\u0002",
    "\u0002\u0340\u0341\u0007\u0010\u0002\u0002\u0341\u0342\u0005v<\u0002",
    "\u0342\u0343\u0007\u0011\u0002\u0002\u0343\u0344\u0005v<\u0010\u0344",
    "\u0365\u0003\u0002\u0002\u0002\u0345\u0346\f\u000e\u0002\u0002\u0346",
    "\u0347\u0007\u000f\u0002\u0002\u0347\u0365\u0005v<\u000e\u0348\u0349",
    "\f\r\u0002\u0002\u0349\u034a\u0005\u0080A\u0002\u034a\u034b\u0005v<",
    "\r\u034b\u0365\u0003\u0002\u0002\u0002\u034c\u034d\f.\u0002\u0002\u034d",
    "\u034e\u0007\u0007\u0002\u0002\u034e\u034f\u0005t;\u0002\u034f\u0350",
    "\u0007\b\u0002\u0002\u0350\u0365\u0003\u0002\u0002\u0002\u0351\u0353",
    "\f-\u0002\u0002\u0352\u0354\u0007\u0010\u0002\u0002\u0353\u0352\u0003",
    "\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354\u0355\u0003",
    "\u0002\u0002\u0002\u0355\u0357\u0007\u0013\u0002\u0002\u0356\u0358\u0007",
    "\u001f\u0002\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0357\u0358\u0003",
    "\u0002\u0002\u0002\u0358\u0359\u0003\u0002\u0002\u0002\u0359\u0365\u0005",
    "\u0088E\u0002\u035a\u035b\f,\u0002\u0002\u035b\u0365\u0005p9\u0002\u035c",
    "\u035d\f)\u0002\u0002\u035d\u035e\u0006<\u001f\u0002\u035e\u0365\u0007",
    "\u0014\u0002\u0002\u035f\u0360\f(\u0002\u0002\u0360\u0361\u0006<!\u0002",
    "\u0361\u0365\u0007\u0015\u0002\u0002\u0362\u0363\f\u000b\u0002\u0002",
    "\u0363\u0365\u0007x\u0002\u0002\u0364\u0315\u0003\u0002\u0002\u0002",
    "\u0364\u0318\u0003\u0002\u0002\u0002\u0364\u031b\u0003\u0002\u0002\u0002",
    "\u0364\u031e\u0003\u0002\u0002\u0002\u0364\u0321\u0003\u0002\u0002\u0002",
    "\u0364\u0324\u0003\u0002\u0002\u0002\u0364\u0327\u0003\u0002\u0002\u0002",
    "\u0364\u032a\u0003\u0002\u0002\u0002\u0364\u032d\u0003\u0002\u0002\u0002",
    "\u0364\u0330\u0003\u0002\u0002\u0002\u0364\u0333\u0003\u0002\u0002\u0002",
    "\u0364\u0336\u0003\u0002\u0002\u0002\u0364\u0339\u0003\u0002\u0002\u0002",
    "\u0364\u033c\u0003\u0002\u0002\u0002\u0364\u033f\u0003\u0002\u0002\u0002",
    "\u0364\u0345\u0003\u0002\u0002\u0002\u0364\u0348\u0003\u0002\u0002\u0002",
    "\u0364\u034c\u0003\u0002\u0002\u0002\u0364\u0351\u0003\u0002\u0002\u0002",
    "\u0364\u035a\u0003\u0002\u0002\u0002\u0364\u035c\u0003\u0002\u0002\u0002",
    "\u0364\u035f\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002",
    "\u0365\u0368\u0003\u0002\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002",
    "\u0366\u0367\u0003\u0002\u0002\u0002\u0367w\u0003\u0002\u0002\u0002",
    "\u0368\u0366\u0003\u0002\u0002\u0002\u0369\u036d\u0007v\u0002\u0002",
    "\u036a\u036d\u0005d3\u0002\u036b\u036d\u0005j6\u0002\u036c\u0369\u0003",
    "\u0002\u0002\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036c\u036b\u0003",
    "\u0002\u0002\u0002\u036dy\u0003\u0002\u0002\u0002\u036e\u0387\u0005",
    "P)\u0002\u036f\u0371\u0007k\u0002\u0002\u0370\u036f\u0003\u0002\u0002",
    "\u0002\u0370\u0371\u0003\u0002\u0002\u0002\u0371\u0372\u0003\u0002\u0002",
    "\u0002\u0372\u0374\u0007Y\u0002\u0002\u0373\u0375\u0007\u001a\u0002",
    "\u0002\u0374\u0373\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002",
    "\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0378\u0007\t\u0002",
    "\u0002\u0377\u0379\u0005Z.\u0002\u0378\u0377\u0003\u0002\u0002\u0002",
    "\u0378\u0379\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002",
    "\u037a\u037b\u0007\n\u0002\u0002\u037b\u037c\u0007\u000b\u0002\u0002",
    "\u037c\u037d\u0005`1\u0002\u037d\u037e\u0007\f\u0002\u0002\u037e\u0387",
    "\u0003\u0002\u0002\u0002\u037f\u0381\u0007k\u0002\u0002\u0380\u037f",
    "\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381\u0382",
    "\u0003\u0002\u0002\u0002\u0382\u0383\u0005|?\u0002\u0383\u0384\u0007",
    "<\u0002\u0002\u0384\u0385\u0005~@\u0002\u0385\u0387\u0003\u0002\u0002",
    "\u0002\u0386\u036e\u0003\u0002\u0002\u0002\u0386\u0370\u0003\u0002\u0002",
    "\u0002\u0386\u0380\u0003\u0002\u0002\u0002\u0387{\u0003\u0002\u0002",
    "\u0002\u0388\u038f\u0007v\u0002\u0002\u0389\u038b\u0007\t\u0002\u0002",
    "\u038a\u038c\u0005Z.\u0002\u038b\u038a\u0003\u0002\u0002\u0002\u038b",
    "\u038c\u0003\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d",
    "\u038f\u0007\n\u0002\u0002\u038e\u0388\u0003\u0002\u0002\u0002\u038e",
    "\u0389\u0003\u0002\u0002\u0002\u038f}\u0003\u0002\u0002\u0002\u0390",
    "\u0396\u0005v<\u0002\u0391\u0392\u0007\u000b\u0002\u0002\u0392\u0393",
    "\u0005`1\u0002\u0393\u0394\u0007\f\u0002\u0002\u0394\u0396\u0003\u0002",
    "\u0002\u0002\u0395\u0390\u0003\u0002\u0002\u0002\u0395\u0391\u0003\u0002",
    "\u0002\u0002\u0396\u007f\u0003\u0002\u0002\u0002\u0397\u0398\t\b\u0002",
    "\u0002\u0398\u0081\u0003\u0002\u0002\u0002\u0399\u03a1\u0007=\u0002",
    "\u0002\u039a\u03a1\u0007>\u0002\u0002\u039b\u03a1\u0007w\u0002\u0002",
    "\u039c\u03a1\u0007x\u0002\u0002\u039d\u03a1\u0007\u0006\u0002\u0002",
    "\u039e\u03a1\u0005\u0084C\u0002\u039f\u03a1\u0005\u0086D\u0002\u03a0",
    "\u0399\u0003\u0002\u0002\u0002\u03a0\u039a\u0003\u0002\u0002\u0002\u03a0",
    "\u039b\u0003\u0002\u0002\u0002\u03a0\u039c\u0003\u0002\u0002\u0002\u03a0",
    "\u039d\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a0",
    "\u039f\u0003\u0002\u0002\u0002\u03a1\u0083\u0003\u0002\u0002\u0002\u03a2",
    "\u03a3\t\t\u0002\u0002\u03a3\u0085\u0003\u0002\u0002\u0002\u03a4\u03a5",
    "\t\n\u0002\u0002\u03a5\u0087\u0003\u0002\u0002\u0002\u03a6\u03a9\u0007",
    "v\u0002\u0002\u03a7\u03a9\u0005\u008aF\u0002\u03a8\u03a6\u0003\u0002",
    "\u0002\u0002\u03a8\u03a7\u0003\u0002\u0002\u0002\u03a9\u0089\u0003\u0002",
    "\u0002\u0002\u03aa\u03ae\u0005\u008cG\u0002\u03ab\u03ae\u0007=\u0002",
    "\u0002\u03ac\u03ae\u0007>\u0002\u0002\u03ad\u03aa\u0003\u0002\u0002",
    "\u0002\u03ad\u03ab\u0003\u0002\u0002\u0002\u03ad\u03ac\u0003\u0002\u0002",
    "\u0002\u03ae\u008b\u0003\u0002\u0002\u0002\u03af\u03b0\t\u000b\u0002",
    "\u0002\u03b0\u008d\u0003\u0002\u0002\u0002\u03b1\u03b2\u0007v\u0002",
    "\u0002\u03b2\u03b3\u0006H#\u0002\u03b3\u03b4\u0005n8\u0002\u03b4\u008f",
    "\u0003\u0002\u0002\u0002\u03b5\u03b6\u0007v\u0002\u0002\u03b6\u03b7",
    "\u0006I$\u0002\u03b7\u03b8\u0005n8\u0002\u03b8\u0091\u0003\u0002\u0002",
    "\u0002\u03b9\u03be\u0007\r\u0002\u0002\u03ba\u03be\u0007\u0002\u0002",
    "\u0003\u03bb\u03be\u0006J%\u0002\u03bc\u03be\u0006J&\u0002\u03bd\u03b9",
    "\u0003\u0002\u0002\u0002\u03bd\u03ba\u0003\u0002\u0002\u0002\u03bd\u03bb",
    "\u0003\u0002\u0002\u0002\u03bd\u03bc\u0003\u0002\u0002\u0002\u03be\u0093",
    "\u0003\u0002\u0002\u0002m\u0095\u0098\u00b2\u00b6\u00bd\u00c3\u00c7",
    "\u00ce\u00d6\u00db\u00dd\u00e7\u00ef\u00f4\u00fd\u0105\u0109\u010e\u0119",
    "\u011f\u012e\u0142\u0146\u014a\u0152\u015b\u0160\u0168\u016f\u0176\u017d",
    "\u0184\u0196\u019a\u019c\u01a3\u01a9\u01ae\u01bd\u01c0\u01c5\u01c8\u01d3",
    "\u01d7\u01dc\u01e9\u01ef\u01f8\u01fa\u0200\u0206\u0209\u020c\u0211\u0219",
    "\u021c\u0226\u0229\u022e\u0235\u023c\u0241\u0244\u0249\u024f\u0254\u025d",
    "\u0261\u0266\u026b\u0271\u0275\u027f\u0282\u0285\u0294\u0297\u029c\u02b3",
    "\u02b6\u02bf\u02c7\u02cb\u02cd\u02d2\u02d6\u02dd\u02e4\u02ea\u0313\u0353",
    "\u0357\u0364\u0366\u036c\u0370\u0374\u0378\u0380\u0386\u038b\u038e\u0395",
    "\u03a0\u03a8\u03ad\u03bd"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, "'['", "']'", "'('", 
                     "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", 
                     "'...'", "'.'", "'++'", "'--'", "'+'", "'-'", "'~'", 
                     "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", 
                     "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", 
                     "'=='", "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", 
                     "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
                     "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", 
                     "'**='", "'=>'", "'null'", null, null, null, null, 
                     null, null, null, null, null, null, "'break'", "'do'", 
                     "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", 
                     "'var'", "'catch'", "'finally'", "'return'", "'void'", 
                     "'continue'", "'for'", "'switch'", "'while'", "'debugger'", 
                     "'function'", "'this'", "'with'", "'default'", "'if'", 
                     "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", 
                     "'class'", "'enum'", "'extends'", "'super'", "'const'", 
                     "'export'", "'import'", "'async'", "'await'", "'implements'", 
                     "'let'", "'private'", "'public'", "'interface'", "'package'", 
                     "'protected'", "'static'", "'yield'" ];

var symbolicNames = [ null, "HashBangLine", "MultiLineComment", "SingleLineComment", 
                      "RegularExpressionLiteral", "OpenBracket", "CloseBracket", 
                      "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
                      "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
                      "Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", 
                      "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", 
                      "Power", "NullCoalesce", "Hashtag", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "PowerAssign", "ARROW", "NullLiteral", 
                      "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                      "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                      "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Catch", "Finally", "Return", "Void", 
                      "Continue", "For", "Switch", "While", "Debugger", 
                      "Function", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "As", "From", "Class", "Enum", 
                      "Extends", "Super", "Const", "Export", "Import", "Async", 
                      "Await", "Implements", "Let", "Private", "Public", 
                      "Interface", "Package", "Protected", "Static", "Yield", 
                      "Identifier", "StringLiteral", "TemplateStringLiteral", 
                      "WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", 
                      "UnexpectedCharacter" ];

var ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "importStatement", "importFromBlock", "moduleItems", 
                   "importDefault", "importNamespace", "importFrom", "aliasName", 
                   "exportStatement", "exportFromBlock", "declaration", 
                   "variableStatement", "variableDeclarationList", "variableDeclaration", 
                   "emptyStatement", "expressionStatement", "ifStatement", 
                   "iterationStatement", "varModifier", "continueStatement", 
                   "breakStatement", "returnStatement", "yieldStatement", 
                   "withStatement", "switchStatement", "caseBlock", "caseClauses", 
                   "caseClause", "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classElement", "methodDefinition", "formalParameterList", 
                   "formalParameterArg", "lastFormalParameterArg", "functionBody", 
                   "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
                   "objectLiteral", "propertyAssignment", "propertyName", 
                   "arguments", "argument", "expressionSequence", "singleExpression", 
                   "assignable", "anoymousFunction", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "numericLiteral", "bigintLiteral", "identifierName", 
                   "reservedWord", "keyword", "getter", "setter", "eos" ];

function JavaScriptParser (input) {
	JavaScriptBaseParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

JavaScriptParser.prototype = Object.create(JavaScriptBaseParser.prototype);
JavaScriptParser.prototype.constructor = JavaScriptParser;

Object.defineProperty(JavaScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

JavaScriptParser.EOF = antlr4.Token.EOF;
JavaScriptParser.HashBangLine = 1;
JavaScriptParser.MultiLineComment = 2;
JavaScriptParser.SingleLineComment = 3;
JavaScriptParser.RegularExpressionLiteral = 4;
JavaScriptParser.OpenBracket = 5;
JavaScriptParser.CloseBracket = 6;
JavaScriptParser.OpenParen = 7;
JavaScriptParser.CloseParen = 8;
JavaScriptParser.OpenBrace = 9;
JavaScriptParser.CloseBrace = 10;
JavaScriptParser.SemiColon = 11;
JavaScriptParser.Comma = 12;
JavaScriptParser.Assign = 13;
JavaScriptParser.QuestionMark = 14;
JavaScriptParser.Colon = 15;
JavaScriptParser.Ellipsis = 16;
JavaScriptParser.Dot = 17;
JavaScriptParser.PlusPlus = 18;
JavaScriptParser.MinusMinus = 19;
JavaScriptParser.Plus = 20;
JavaScriptParser.Minus = 21;
JavaScriptParser.BitNot = 22;
JavaScriptParser.Not = 23;
JavaScriptParser.Multiply = 24;
JavaScriptParser.Divide = 25;
JavaScriptParser.Modulus = 26;
JavaScriptParser.Power = 27;
JavaScriptParser.NullCoalesce = 28;
JavaScriptParser.Hashtag = 29;
JavaScriptParser.RightShiftArithmetic = 30;
JavaScriptParser.LeftShiftArithmetic = 31;
JavaScriptParser.RightShiftLogical = 32;
JavaScriptParser.LessThan = 33;
JavaScriptParser.MoreThan = 34;
JavaScriptParser.LessThanEquals = 35;
JavaScriptParser.GreaterThanEquals = 36;
JavaScriptParser.Equals_ = 37;
JavaScriptParser.NotEquals = 38;
JavaScriptParser.IdentityEquals = 39;
JavaScriptParser.IdentityNotEquals = 40;
JavaScriptParser.BitAnd = 41;
JavaScriptParser.BitXOr = 42;
JavaScriptParser.BitOr = 43;
JavaScriptParser.And = 44;
JavaScriptParser.Or = 45;
JavaScriptParser.MultiplyAssign = 46;
JavaScriptParser.DivideAssign = 47;
JavaScriptParser.ModulusAssign = 48;
JavaScriptParser.PlusAssign = 49;
JavaScriptParser.MinusAssign = 50;
JavaScriptParser.LeftShiftArithmeticAssign = 51;
JavaScriptParser.RightShiftArithmeticAssign = 52;
JavaScriptParser.RightShiftLogicalAssign = 53;
JavaScriptParser.BitAndAssign = 54;
JavaScriptParser.BitXorAssign = 55;
JavaScriptParser.BitOrAssign = 56;
JavaScriptParser.PowerAssign = 57;
JavaScriptParser.ARROW = 58;
JavaScriptParser.NullLiteral = 59;
JavaScriptParser.BooleanLiteral = 60;
JavaScriptParser.DecimalLiteral = 61;
JavaScriptParser.HexIntegerLiteral = 62;
JavaScriptParser.OctalIntegerLiteral = 63;
JavaScriptParser.OctalIntegerLiteral2 = 64;
JavaScriptParser.BinaryIntegerLiteral = 65;
JavaScriptParser.BigHexIntegerLiteral = 66;
JavaScriptParser.BigOctalIntegerLiteral = 67;
JavaScriptParser.BigBinaryIntegerLiteral = 68;
JavaScriptParser.BigDecimalIntegerLiteral = 69;
JavaScriptParser.Break = 70;
JavaScriptParser.Do = 71;
JavaScriptParser.Instanceof = 72;
JavaScriptParser.Typeof = 73;
JavaScriptParser.Case = 74;
JavaScriptParser.Else = 75;
JavaScriptParser.New = 76;
JavaScriptParser.Var = 77;
JavaScriptParser.Catch = 78;
JavaScriptParser.Finally = 79;
JavaScriptParser.Return = 80;
JavaScriptParser.Void = 81;
JavaScriptParser.Continue = 82;
JavaScriptParser.For = 83;
JavaScriptParser.Switch = 84;
JavaScriptParser.While = 85;
JavaScriptParser.Debugger = 86;
JavaScriptParser.Function = 87;
JavaScriptParser.This = 88;
JavaScriptParser.With = 89;
JavaScriptParser.Default = 90;
JavaScriptParser.If = 91;
JavaScriptParser.Throw = 92;
JavaScriptParser.Delete = 93;
JavaScriptParser.In = 94;
JavaScriptParser.Try = 95;
JavaScriptParser.As = 96;
JavaScriptParser.From = 97;
JavaScriptParser.Class = 98;
JavaScriptParser.Enum = 99;
JavaScriptParser.Extends = 100;
JavaScriptParser.Super = 101;
JavaScriptParser.Const = 102;
JavaScriptParser.Export = 103;
JavaScriptParser.Import = 104;
JavaScriptParser.Async = 105;
JavaScriptParser.Await = 106;
JavaScriptParser.Implements = 107;
JavaScriptParser.Let = 108;
JavaScriptParser.Private = 109;
JavaScriptParser.Public = 110;
JavaScriptParser.Interface = 111;
JavaScriptParser.Package = 112;
JavaScriptParser.Protected = 113;
JavaScriptParser.Static = 114;
JavaScriptParser.Yield = 115;
JavaScriptParser.Identifier = 116;
JavaScriptParser.StringLiteral = 117;
JavaScriptParser.TemplateStringLiteral = 118;
JavaScriptParser.WhiteSpaces = 119;
JavaScriptParser.LineTerminator = 120;
JavaScriptParser.HtmlComment = 121;
JavaScriptParser.CDataComment = 122;
JavaScriptParser.UnexpectedCharacter = 123;

JavaScriptParser.RULE_program = 0;
JavaScriptParser.RULE_sourceElement = 1;
JavaScriptParser.RULE_statement = 2;
JavaScriptParser.RULE_block = 3;
JavaScriptParser.RULE_statementList = 4;
JavaScriptParser.RULE_importStatement = 5;
JavaScriptParser.RULE_importFromBlock = 6;
JavaScriptParser.RULE_moduleItems = 7;
JavaScriptParser.RULE_importDefault = 8;
JavaScriptParser.RULE_importNamespace = 9;
JavaScriptParser.RULE_importFrom = 10;
JavaScriptParser.RULE_aliasName = 11;
JavaScriptParser.RULE_exportStatement = 12;
JavaScriptParser.RULE_exportFromBlock = 13;
JavaScriptParser.RULE_declaration = 14;
JavaScriptParser.RULE_variableStatement = 15;
JavaScriptParser.RULE_variableDeclarationList = 16;
JavaScriptParser.RULE_variableDeclaration = 17;
JavaScriptParser.RULE_emptyStatement = 18;
JavaScriptParser.RULE_expressionStatement = 19;
JavaScriptParser.RULE_ifStatement = 20;
JavaScriptParser.RULE_iterationStatement = 21;
JavaScriptParser.RULE_varModifier = 22;
JavaScriptParser.RULE_continueStatement = 23;
JavaScriptParser.RULE_breakStatement = 24;
JavaScriptParser.RULE_returnStatement = 25;
JavaScriptParser.RULE_yieldStatement = 26;
JavaScriptParser.RULE_withStatement = 27;
JavaScriptParser.RULE_switchStatement = 28;
JavaScriptParser.RULE_caseBlock = 29;
JavaScriptParser.RULE_caseClauses = 30;
JavaScriptParser.RULE_caseClause = 31;
JavaScriptParser.RULE_defaultClause = 32;
JavaScriptParser.RULE_labelledStatement = 33;
JavaScriptParser.RULE_throwStatement = 34;
JavaScriptParser.RULE_tryStatement = 35;
JavaScriptParser.RULE_catchProduction = 36;
JavaScriptParser.RULE_finallyProduction = 37;
JavaScriptParser.RULE_debuggerStatement = 38;
JavaScriptParser.RULE_functionDeclaration = 39;
JavaScriptParser.RULE_classDeclaration = 40;
JavaScriptParser.RULE_classTail = 41;
JavaScriptParser.RULE_classElement = 42;
JavaScriptParser.RULE_methodDefinition = 43;
JavaScriptParser.RULE_formalParameterList = 44;
JavaScriptParser.RULE_formalParameterArg = 45;
JavaScriptParser.RULE_lastFormalParameterArg = 46;
JavaScriptParser.RULE_functionBody = 47;
JavaScriptParser.RULE_sourceElements = 48;
JavaScriptParser.RULE_arrayLiteral = 49;
JavaScriptParser.RULE_elementList = 50;
JavaScriptParser.RULE_arrayElement = 51;
JavaScriptParser.RULE_objectLiteral = 52;
JavaScriptParser.RULE_propertyAssignment = 53;
JavaScriptParser.RULE_propertyName = 54;
JavaScriptParser.RULE_arguments = 55;
JavaScriptParser.RULE_argument = 56;
JavaScriptParser.RULE_expressionSequence = 57;
JavaScriptParser.RULE_singleExpression = 58;
JavaScriptParser.RULE_assignable = 59;
JavaScriptParser.RULE_anoymousFunction = 60;
JavaScriptParser.RULE_arrowFunctionParameters = 61;
JavaScriptParser.RULE_arrowFunctionBody = 62;
JavaScriptParser.RULE_assignmentOperator = 63;
JavaScriptParser.RULE_literal = 64;
JavaScriptParser.RULE_numericLiteral = 65;
JavaScriptParser.RULE_bigintLiteral = 66;
JavaScriptParser.RULE_identifierName = 67;
JavaScriptParser.RULE_reservedWord = 68;
JavaScriptParser.RULE_keyword = 69;
JavaScriptParser.RULE_getter = 70;
JavaScriptParser.RULE_setter = 71;
JavaScriptParser.RULE_eos = 72;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(JavaScriptParser.EOF, 0);
};

ProgramContext.prototype.HashBangLine = function() {
    return this.getToken(JavaScriptParser.HashBangLine, 0);
};

ProgramContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ProgramContext = ProgramContext;

JavaScriptParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JavaScriptParser.RULE_program);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 147;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 146;
            this.match(JavaScriptParser.HashBangLine);

        }
        this.state = 150;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        if(la_===1) {
            this.state = 149;
            this.sourceElements();

        }
        this.state = 152;
        this.match(JavaScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElement;
    return this;
}

SourceElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementContext.prototype.constructor = SourceElementContext;

SourceElementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

SourceElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSourceElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SourceElementContext = SourceElementContext;

JavaScriptParser.prototype.sourceElement = function() {

    var localctx = new SourceElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, JavaScriptParser.RULE_sourceElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 154;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

StatementContext.prototype.importStatement = function() {
    return this.getTypedRuleContext(ImportStatementContext,0);
};

StatementContext.prototype.exportStatement = function() {
    return this.getTypedRuleContext(ExportStatementContext,0);
};

StatementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

StatementContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.yieldStatement = function() {
    return this.getTypedRuleContext(YieldStatementContext,0);
};

StatementContext.prototype.withStatement = function() {
    return this.getTypedRuleContext(WithStatementContext,0);
};

StatementContext.prototype.labelledStatement = function() {
    return this.getTypedRuleContext(LabelledStatementContext,0);
};

StatementContext.prototype.switchStatement = function() {
    return this.getTypedRuleContext(SwitchStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

StatementContext.prototype.debuggerStatement = function() {
    return this.getTypedRuleContext(DebuggerStatementContext,0);
};

StatementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.StatementContext = StatementContext;

JavaScriptParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, JavaScriptParser.RULE_statement);
    try {
        this.state = 176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 156;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 157;
            this.variableStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 158;
            this.importStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 159;
            this.exportStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 160;
            this.emptyStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 161;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 162;
            this.expressionStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 163;
            this.ifStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 164;
            this.iterationStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 165;
            this.continueStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 166;
            this.breakStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 167;
            this.returnStatement();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 168;
            this.yieldStatement();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 169;
            this.withStatement();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 170;
            this.labelledStatement();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 171;
            this.switchStatement();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 172;
            this.throwStatement();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 173;
            this.tryStatement();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 174;
            this.debuggerStatement();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 175;
            this.functionDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

BlockContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

BlockContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.BlockContext = BlockContext;

JavaScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, JavaScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 180;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        if(la_===1) {
            this.state = 179;
            this.statementList();

        }
        this.state = 182;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitStatementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.StatementListContext = StatementListContext;

JavaScriptParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, JavaScriptParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 184;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 187; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importStatement;
    return this;
}

ImportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportStatementContext.prototype.constructor = ImportStatementContext;

ImportStatementContext.prototype.Import = function() {
    return this.getToken(JavaScriptParser.Import, 0);
};

ImportStatementContext.prototype.importFromBlock = function() {
    return this.getTypedRuleContext(ImportFromBlockContext,0);
};

ImportStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ImportStatementContext = ImportStatementContext;

JavaScriptParser.prototype.importStatement = function() {

    var localctx = new ImportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, JavaScriptParser.RULE_importStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 189;
        this.match(JavaScriptParser.Import);
        this.state = 190;
        this.importFromBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportFromBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFromBlock;
    return this;
}

ImportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromBlockContext.prototype.constructor = ImportFromBlockContext;

ImportFromBlockContext.prototype.importFrom = function() {
    return this.getTypedRuleContext(ImportFromContext,0);
};

ImportFromBlockContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ImportFromBlockContext.prototype.importNamespace = function() {
    return this.getTypedRuleContext(ImportNamespaceContext,0);
};

ImportFromBlockContext.prototype.moduleItems = function() {
    return this.getTypedRuleContext(ModuleItemsContext,0);
};

ImportFromBlockContext.prototype.importDefault = function() {
    return this.getTypedRuleContext(ImportDefaultContext,0);
};

ImportFromBlockContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

ImportFromBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportFromBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ImportFromBlockContext = ImportFromBlockContext;

JavaScriptParser.prototype.importFromBlock = function() {

    var localctx = new ImportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, JavaScriptParser.RULE_importFromBlock);
    var _la = 0; // Token type
    try {
        this.state = 204;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.Multiply:
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.Break - 59)) | (1 << (JavaScriptParser.Do - 59)) | (1 << (JavaScriptParser.Instanceof - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.Case - 59)) | (1 << (JavaScriptParser.Else - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Var - 59)) | (1 << (JavaScriptParser.Catch - 59)) | (1 << (JavaScriptParser.Finally - 59)) | (1 << (JavaScriptParser.Return - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Continue - 59)) | (1 << (JavaScriptParser.For - 59)) | (1 << (JavaScriptParser.Switch - 59)) | (1 << (JavaScriptParser.While - 59)) | (1 << (JavaScriptParser.Debugger - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)) | (1 << (JavaScriptParser.With - 59)) | (1 << (JavaScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (JavaScriptParser.If - 91)) | (1 << (JavaScriptParser.Throw - 91)) | (1 << (JavaScriptParser.Delete - 91)) | (1 << (JavaScriptParser.In - 91)) | (1 << (JavaScriptParser.Try - 91)) | (1 << (JavaScriptParser.As - 91)) | (1 << (JavaScriptParser.From - 91)) | (1 << (JavaScriptParser.Class - 91)) | (1 << (JavaScriptParser.Enum - 91)) | (1 << (JavaScriptParser.Extends - 91)) | (1 << (JavaScriptParser.Super - 91)) | (1 << (JavaScriptParser.Const - 91)) | (1 << (JavaScriptParser.Export - 91)) | (1 << (JavaScriptParser.Import - 91)) | (1 << (JavaScriptParser.Async - 91)) | (1 << (JavaScriptParser.Await - 91)) | (1 << (JavaScriptParser.Implements - 91)) | (1 << (JavaScriptParser.Let - 91)) | (1 << (JavaScriptParser.Private - 91)) | (1 << (JavaScriptParser.Public - 91)) | (1 << (JavaScriptParser.Interface - 91)) | (1 << (JavaScriptParser.Package - 91)) | (1 << (JavaScriptParser.Protected - 91)) | (1 << (JavaScriptParser.Static - 91)) | (1 << (JavaScriptParser.Yield - 91)) | (1 << (JavaScriptParser.Identifier - 91)))) !== 0)) {
                this.state = 192;
                this.importDefault();
            }

            this.state = 197;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case JavaScriptParser.Multiply:
                this.state = 195;
                this.importNamespace();
                break;
            case JavaScriptParser.OpenBrace:
                this.state = 196;
                this.moduleItems();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 199;
            this.importFrom();
            this.state = 200;
            this.eos();
            break;
        case JavaScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 202;
            this.match(JavaScriptParser.StringLiteral);
            this.state = 203;
            this.eos();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ModuleItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_moduleItems;
    return this;
}

ModuleItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModuleItemsContext.prototype.constructor = ModuleItemsContext;

ModuleItemsContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

ModuleItemsContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

ModuleItemsContext.prototype.aliasName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AliasNameContext);
    } else {
        return this.getTypedRuleContext(AliasNameContext,i);
    }
};

ModuleItemsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


ModuleItemsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitModuleItems(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ModuleItemsContext = ModuleItemsContext;

JavaScriptParser.prototype.moduleItems = function() {

    var localctx = new ModuleItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, JavaScriptParser.RULE_moduleItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 206;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 212;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 207;
                this.aliasName();
                this.state = 208;
                this.match(JavaScriptParser.Comma); 
            }
            this.state = 214;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
        }

        this.state = 219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.Break - 59)) | (1 << (JavaScriptParser.Do - 59)) | (1 << (JavaScriptParser.Instanceof - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.Case - 59)) | (1 << (JavaScriptParser.Else - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Var - 59)) | (1 << (JavaScriptParser.Catch - 59)) | (1 << (JavaScriptParser.Finally - 59)) | (1 << (JavaScriptParser.Return - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Continue - 59)) | (1 << (JavaScriptParser.For - 59)) | (1 << (JavaScriptParser.Switch - 59)) | (1 << (JavaScriptParser.While - 59)) | (1 << (JavaScriptParser.Debugger - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)) | (1 << (JavaScriptParser.With - 59)) | (1 << (JavaScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (JavaScriptParser.If - 91)) | (1 << (JavaScriptParser.Throw - 91)) | (1 << (JavaScriptParser.Delete - 91)) | (1 << (JavaScriptParser.In - 91)) | (1 << (JavaScriptParser.Try - 91)) | (1 << (JavaScriptParser.As - 91)) | (1 << (JavaScriptParser.From - 91)) | (1 << (JavaScriptParser.Class - 91)) | (1 << (JavaScriptParser.Enum - 91)) | (1 << (JavaScriptParser.Extends - 91)) | (1 << (JavaScriptParser.Super - 91)) | (1 << (JavaScriptParser.Const - 91)) | (1 << (JavaScriptParser.Export - 91)) | (1 << (JavaScriptParser.Import - 91)) | (1 << (JavaScriptParser.Async - 91)) | (1 << (JavaScriptParser.Await - 91)) | (1 << (JavaScriptParser.Implements - 91)) | (1 << (JavaScriptParser.Let - 91)) | (1 << (JavaScriptParser.Private - 91)) | (1 << (JavaScriptParser.Public - 91)) | (1 << (JavaScriptParser.Interface - 91)) | (1 << (JavaScriptParser.Package - 91)) | (1 << (JavaScriptParser.Protected - 91)) | (1 << (JavaScriptParser.Static - 91)) | (1 << (JavaScriptParser.Yield - 91)) | (1 << (JavaScriptParser.Identifier - 91)))) !== 0)) {
            this.state = 215;
            this.aliasName();
            this.state = 217;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Comma) {
                this.state = 216;
                this.match(JavaScriptParser.Comma);
            }

        }

        this.state = 221;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importDefault;
    return this;
}

ImportDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDefaultContext.prototype.constructor = ImportDefaultContext;

ImportDefaultContext.prototype.aliasName = function() {
    return this.getTypedRuleContext(AliasNameContext,0);
};

ImportDefaultContext.prototype.Comma = function() {
    return this.getToken(JavaScriptParser.Comma, 0);
};

ImportDefaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportDefault(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ImportDefaultContext = ImportDefaultContext;

JavaScriptParser.prototype.importDefault = function() {

    var localctx = new ImportDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, JavaScriptParser.RULE_importDefault);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        this.aliasName();
        this.state = 224;
        this.match(JavaScriptParser.Comma);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportNamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importNamespace;
    return this;
}

ImportNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportNamespaceContext.prototype.constructor = ImportNamespaceContext;

ImportNamespaceContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

ImportNamespaceContext.prototype.As = function() {
    return this.getToken(JavaScriptParser.As, 0);
};

ImportNamespaceContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

ImportNamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportNamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ImportNamespaceContext = ImportNamespaceContext;

JavaScriptParser.prototype.importNamespace = function() {

    var localctx = new ImportNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, JavaScriptParser.RULE_importNamespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        this.match(JavaScriptParser.Multiply);
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.As) {
            this.state = 227;
            this.match(JavaScriptParser.As);
            this.state = 228;
            this.identifierName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportFromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_importFrom;
    return this;
}

ImportFromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportFromContext.prototype.constructor = ImportFromContext;

ImportFromContext.prototype.From = function() {
    return this.getToken(JavaScriptParser.From, 0);
};

ImportFromContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

ImportFromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportFrom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ImportFromContext = ImportFromContext;

JavaScriptParser.prototype.importFrom = function() {

    var localctx = new ImportFromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, JavaScriptParser.RULE_importFrom);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this.match(JavaScriptParser.From);
        this.state = 232;
        this.match(JavaScriptParser.StringLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_aliasName;
    return this;
}

AliasNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasNameContext.prototype.constructor = AliasNameContext;

AliasNameContext.prototype.identifierName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierNameContext);
    } else {
        return this.getTypedRuleContext(IdentifierNameContext,i);
    }
};

AliasNameContext.prototype.As = function() {
    return this.getToken(JavaScriptParser.As, 0);
};

AliasNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAliasName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.AliasNameContext = AliasNameContext;

JavaScriptParser.prototype.aliasName = function() {

    var localctx = new AliasNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, JavaScriptParser.RULE_aliasName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this.identifierName();
        this.state = 237;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.As) {
            this.state = 235;
            this.match(JavaScriptParser.As);
            this.state = 236;
            this.identifierName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportStatement;
    return this;
}

ExportStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportStatementContext.prototype.constructor = ExportStatementContext;


 
ExportStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExportDefaultDeclarationContext(parser, ctx) {
	ExportStatementContext.call(this, parser);
    ExportStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportDefaultDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDefaultDeclarationContext.prototype.constructor = ExportDefaultDeclarationContext;

JavaScriptParser.ExportDefaultDeclarationContext = ExportDefaultDeclarationContext;

ExportDefaultDeclarationContext.prototype.Export = function() {
    return this.getToken(JavaScriptParser.Export, 0);
};

ExportDefaultDeclarationContext.prototype.Default = function() {
    return this.getToken(JavaScriptParser.Default, 0);
};

ExportDefaultDeclarationContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ExportDefaultDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};
ExportDefaultDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExportDefaultDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExportDeclarationContext(parser, ctx) {
	ExportStatementContext.call(this, parser);
    ExportStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportDeclarationContext.prototype = Object.create(ExportStatementContext.prototype);
ExportDeclarationContext.prototype.constructor = ExportDeclarationContext;

JavaScriptParser.ExportDeclarationContext = ExportDeclarationContext;

ExportDeclarationContext.prototype.Export = function() {
    return this.getToken(JavaScriptParser.Export, 0);
};

ExportDeclarationContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportDeclarationContext.prototype.exportFromBlock = function() {
    return this.getTypedRuleContext(ExportFromBlockContext,0);
};

ExportDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};
ExportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.ExportStatementContext = ExportStatementContext;

JavaScriptParser.prototype.exportStatement = function() {

    var localctx = new ExportStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, JavaScriptParser.RULE_exportStatement);
    try {
        this.state = 251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExportDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 239;
            this.match(JavaScriptParser.Export);
            this.state = 242;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case JavaScriptParser.OpenBrace:
            case JavaScriptParser.Multiply:
                this.state = 240;
                this.exportFromBlock();
                break;
            case JavaScriptParser.Var:
            case JavaScriptParser.Function:
            case JavaScriptParser.Class:
            case JavaScriptParser.Const:
            case JavaScriptParser.Async:
            case JavaScriptParser.Let:
                this.state = 241;
                this.declaration();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 244;
            this.eos();
            break;

        case 2:
            localctx = new ExportDefaultDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 246;
            this.match(JavaScriptParser.Export);
            this.state = 247;
            this.match(JavaScriptParser.Default);
            this.state = 248;
            this.singleExpression(0);
            this.state = 249;
            this.eos();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExportFromBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_exportFromBlock;
    return this;
}

ExportFromBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExportFromBlockContext.prototype.constructor = ExportFromBlockContext;

ExportFromBlockContext.prototype.importNamespace = function() {
    return this.getTypedRuleContext(ImportNamespaceContext,0);
};

ExportFromBlockContext.prototype.importFrom = function() {
    return this.getTypedRuleContext(ImportFromContext,0);
};

ExportFromBlockContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExportFromBlockContext.prototype.moduleItems = function() {
    return this.getTypedRuleContext(ModuleItemsContext,0);
};

ExportFromBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExportFromBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ExportFromBlockContext = ExportFromBlockContext;

JavaScriptParser.prototype.exportFromBlock = function() {

    var localctx = new ExportFromBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, JavaScriptParser.RULE_exportFromBlock);
    try {
        this.state = 263;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Multiply:
            this.enterOuterAlt(localctx, 1);
            this.state = 253;
            this.importNamespace();
            this.state = 254;
            this.importFrom();
            this.state = 255;
            this.eos();
            break;
        case JavaScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 2);
            this.state = 257;
            this.moduleItems();
            this.state = 259;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 258;
                this.importFrom();

            }
            this.state = 261;
            this.eos();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

DeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

DeclarationContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

DeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.DeclarationContext = DeclarationContext;

JavaScriptParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, JavaScriptParser.RULE_declaration);
    try {
        this.state = 268;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Var:
        case JavaScriptParser.Const:
        case JavaScriptParser.Let:
            this.enterOuterAlt(localctx, 1);
            this.state = 265;
            this.variableStatement();
            break;
        case JavaScriptParser.Class:
            this.enterOuterAlt(localctx, 2);
            this.state = 266;
            this.classDeclaration();
            break;
        case JavaScriptParser.Function:
        case JavaScriptParser.Async:
            this.enterOuterAlt(localctx, 3);
            this.state = 267;
            this.functionDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableStatement;
    return this;
}

VariableStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableStatementContext.prototype.constructor = VariableStatementContext;

VariableStatementContext.prototype.varModifier = function() {
    return this.getTypedRuleContext(VarModifierContext,0);
};

VariableStatementContext.prototype.variableDeclarationList = function() {
    return this.getTypedRuleContext(VariableDeclarationListContext,0);
};

VariableStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

VariableStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableStatementContext = VariableStatementContext;

JavaScriptParser.prototype.variableStatement = function() {

    var localctx = new VariableStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, JavaScriptParser.RULE_variableStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 270;
        this.varModifier();
        this.state = 271;
        this.variableDeclarationList();
        this.state = 272;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclarationList;
    return this;
}

VariableDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationListContext.prototype.constructor = VariableDeclarationListContext;

VariableDeclarationListContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

VariableDeclarationListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


VariableDeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;

JavaScriptParser.prototype.variableDeclarationList = function() {

    var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, JavaScriptParser.RULE_variableDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.variableDeclaration();
        this.state = 279;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 275;
                this.match(JavaScriptParser.Comma);
                this.state = 276;
                this.variableDeclaration(); 
            }
            this.state = 281;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

VariableDeclarationContext.prototype.Assign = function() {
    return this.getToken(JavaScriptParser.Assign, 0);
};

VariableDeclarationContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

VariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VariableDeclarationContext = VariableDeclarationContext;

JavaScriptParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, JavaScriptParser.RULE_variableDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.assignable();
        this.state = 285;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 283;
            this.match(JavaScriptParser.Assign);
            this.state = 284;
            this.singleExpression(0);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EmptyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_emptyStatement;
    return this;
}

EmptyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EmptyStatementContext.prototype.constructor = EmptyStatementContext;

EmptyStatementContext.prototype.SemiColon = function() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
};

EmptyStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEmptyStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.EmptyStatementContext = EmptyStatementContext;

JavaScriptParser.prototype.emptyStatement = function() {

    var localctx = new EmptyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, JavaScriptParser.RULE_emptyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 287;
        this.match(JavaScriptParser.SemiColon);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ExpressionStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ExpressionStatementContext = ExpressionStatementContext;

JavaScriptParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, JavaScriptParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        if (!( this.notOpenBraceAndNotFunction())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
        }
        this.state = 290;
        this.expressionSequence();
        this.state = 291;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.If = function() {
    return this.getToken(JavaScriptParser.If, 0);
};

IfStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

IfStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

IfStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.Else = function() {
    return this.getToken(JavaScriptParser.Else, 0);
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.IfStatementContext = IfStatementContext;

JavaScriptParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, JavaScriptParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        this.match(JavaScriptParser.If);
        this.state = 294;
        this.match(JavaScriptParser.OpenParen);
        this.state = 295;
        this.expressionSequence();
        this.state = 296;
        this.match(JavaScriptParser.CloseParen);
        this.state = 297;
        this.statement();
        this.state = 300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 298;
            this.match(JavaScriptParser.Else);
            this.state = 299;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;


 
IterationStatementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DoStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DoStatementContext.prototype = Object.create(IterationStatementContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

JavaScriptParser.DoStatementContext = DoStatementContext;

DoStatementContext.prototype.Do = function() {
    return this.getToken(JavaScriptParser.Do, 0);
};

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

DoStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

DoStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

DoStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

DoStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};
DoStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDoStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function WhileStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhileStatementContext.prototype = Object.create(IterationStatementContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

JavaScriptParser.WhileStatementContext = WhileStatementContext;

WhileStatementContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

WhileStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

WhileStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WhileStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};
WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

JavaScriptParser.ForStatementContext = ForStatementContext;

ForStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ForStatementContext.prototype.SemiColon = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.SemiColon);
    } else {
        return this.getToken(JavaScriptParser.SemiColon, i);
    }
};


ForStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.expressionSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSequenceContext);
    } else {
        return this.getTypedRuleContext(ExpressionSequenceContext,i);
    }
};

ForStatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};
ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForInStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForInStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

JavaScriptParser.ForInStatementContext = ForInStatementContext;

ForInStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForInStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ForInStatementContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};

ForInStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForInStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

ForInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForInStatementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ForInStatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};
ForInStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForInStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ForOfStatementContext(parser, ctx) {
	IterationStatementContext.call(this, parser);
    IterationStatementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForOfStatementContext.prototype = Object.create(IterationStatementContext.prototype);
ForOfStatementContext.prototype.constructor = ForOfStatementContext;

JavaScriptParser.ForOfStatementContext = ForOfStatementContext;

ForOfStatementContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

ForOfStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ForOfStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ForOfStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ForOfStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

ForOfStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForOfStatementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ForOfStatementContext.prototype.variableStatement = function() {
    return this.getTypedRuleContext(VariableStatementContext,0);
};

ForOfStatementContext.prototype.Await = function() {
    return this.getToken(JavaScriptParser.Await, 0);
};
ForOfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitForOfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.IterationStatementContext = IterationStatementContext;

JavaScriptParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, JavaScriptParser.RULE_iterationStatement);
    var _la = 0; // Token type
    try {
        this.state = 358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DoStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 302;
            this.match(JavaScriptParser.Do);
            this.state = 303;
            this.statement();
            this.state = 304;
            this.match(JavaScriptParser.While);
            this.state = 305;
            this.match(JavaScriptParser.OpenParen);
            this.state = 306;
            this.expressionSequence();
            this.state = 307;
            this.match(JavaScriptParser.CloseParen);
            this.state = 308;
            this.eos();
            break;

        case 2:
            localctx = new WhileStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.match(JavaScriptParser.While);
            this.state = 311;
            this.match(JavaScriptParser.OpenParen);
            this.state = 312;
            this.expressionSequence();
            this.state = 313;
            this.match(JavaScriptParser.CloseParen);
            this.state = 314;
            this.statement();
            break;

        case 3:
            localctx = new ForStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 316;
            this.match(JavaScriptParser.For);
            this.state = 317;
            this.match(JavaScriptParser.OpenParen);
            this.state = 320;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case JavaScriptParser.RegularExpressionLiteral:
            case JavaScriptParser.OpenBracket:
            case JavaScriptParser.OpenParen:
            case JavaScriptParser.OpenBrace:
            case JavaScriptParser.PlusPlus:
            case JavaScriptParser.MinusMinus:
            case JavaScriptParser.Plus:
            case JavaScriptParser.Minus:
            case JavaScriptParser.BitNot:
            case JavaScriptParser.Not:
            case JavaScriptParser.NullLiteral:
            case JavaScriptParser.BooleanLiteral:
            case JavaScriptParser.DecimalLiteral:
            case JavaScriptParser.HexIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral2:
            case JavaScriptParser.BinaryIntegerLiteral:
            case JavaScriptParser.BigHexIntegerLiteral:
            case JavaScriptParser.BigOctalIntegerLiteral:
            case JavaScriptParser.BigBinaryIntegerLiteral:
            case JavaScriptParser.BigDecimalIntegerLiteral:
            case JavaScriptParser.Typeof:
            case JavaScriptParser.New:
            case JavaScriptParser.Void:
            case JavaScriptParser.Function:
            case JavaScriptParser.This:
            case JavaScriptParser.Delete:
            case JavaScriptParser.Class:
            case JavaScriptParser.Super:
            case JavaScriptParser.Import:
            case JavaScriptParser.Async:
            case JavaScriptParser.Await:
            case JavaScriptParser.Yield:
            case JavaScriptParser.Identifier:
            case JavaScriptParser.StringLiteral:
            case JavaScriptParser.TemplateStringLiteral:
            	this.state = 318;
            	this.expressionSequence();
            	break;
            case JavaScriptParser.Var:
            case JavaScriptParser.Const:
            case JavaScriptParser.Let:
            	this.state = 319;
            	this.variableStatement();
            	break;
            case JavaScriptParser.SemiColon:
            	break;
            default:
            	break;
            }
            this.state = 322;
            this.match(JavaScriptParser.SemiColon);
            this.state = 324;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
                this.state = 323;
                this.expressionSequence();
            }

            this.state = 326;
            this.match(JavaScriptParser.SemiColon);
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
                this.state = 327;
                this.expressionSequence();
            }

            this.state = 330;
            this.match(JavaScriptParser.CloseParen);
            this.state = 331;
            this.statement();
            break;

        case 4:
            localctx = new ForInStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 332;
            this.match(JavaScriptParser.For);
            this.state = 333;
            this.match(JavaScriptParser.OpenParen);
            this.state = 336;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case JavaScriptParser.RegularExpressionLiteral:
            case JavaScriptParser.OpenBracket:
            case JavaScriptParser.OpenParen:
            case JavaScriptParser.OpenBrace:
            case JavaScriptParser.PlusPlus:
            case JavaScriptParser.MinusMinus:
            case JavaScriptParser.Plus:
            case JavaScriptParser.Minus:
            case JavaScriptParser.BitNot:
            case JavaScriptParser.Not:
            case JavaScriptParser.NullLiteral:
            case JavaScriptParser.BooleanLiteral:
            case JavaScriptParser.DecimalLiteral:
            case JavaScriptParser.HexIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral2:
            case JavaScriptParser.BinaryIntegerLiteral:
            case JavaScriptParser.BigHexIntegerLiteral:
            case JavaScriptParser.BigOctalIntegerLiteral:
            case JavaScriptParser.BigBinaryIntegerLiteral:
            case JavaScriptParser.BigDecimalIntegerLiteral:
            case JavaScriptParser.Typeof:
            case JavaScriptParser.New:
            case JavaScriptParser.Void:
            case JavaScriptParser.Function:
            case JavaScriptParser.This:
            case JavaScriptParser.Delete:
            case JavaScriptParser.Class:
            case JavaScriptParser.Super:
            case JavaScriptParser.Import:
            case JavaScriptParser.Async:
            case JavaScriptParser.Await:
            case JavaScriptParser.Yield:
            case JavaScriptParser.Identifier:
            case JavaScriptParser.StringLiteral:
            case JavaScriptParser.TemplateStringLiteral:
                this.state = 334;
                this.singleExpression(0);
                break;
            case JavaScriptParser.Var:
            case JavaScriptParser.Const:
            case JavaScriptParser.Let:
                this.state = 335;
                this.variableStatement();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 338;
            this.match(JavaScriptParser.In);
            this.state = 339;
            this.expressionSequence();
            this.state = 340;
            this.match(JavaScriptParser.CloseParen);
            this.state = 341;
            this.statement();
            break;

        case 5:
            localctx = new ForOfStatementContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 343;
            this.match(JavaScriptParser.For);
            this.state = 345;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Await) {
                this.state = 344;
                this.match(JavaScriptParser.Await);
            }

            this.state = 347;
            this.match(JavaScriptParser.OpenParen);
            this.state = 350;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case JavaScriptParser.RegularExpressionLiteral:
            case JavaScriptParser.OpenBracket:
            case JavaScriptParser.OpenParen:
            case JavaScriptParser.OpenBrace:
            case JavaScriptParser.PlusPlus:
            case JavaScriptParser.MinusMinus:
            case JavaScriptParser.Plus:
            case JavaScriptParser.Minus:
            case JavaScriptParser.BitNot:
            case JavaScriptParser.Not:
            case JavaScriptParser.NullLiteral:
            case JavaScriptParser.BooleanLiteral:
            case JavaScriptParser.DecimalLiteral:
            case JavaScriptParser.HexIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral:
            case JavaScriptParser.OctalIntegerLiteral2:
            case JavaScriptParser.BinaryIntegerLiteral:
            case JavaScriptParser.BigHexIntegerLiteral:
            case JavaScriptParser.BigOctalIntegerLiteral:
            case JavaScriptParser.BigBinaryIntegerLiteral:
            case JavaScriptParser.BigDecimalIntegerLiteral:
            case JavaScriptParser.Typeof:
            case JavaScriptParser.New:
            case JavaScriptParser.Void:
            case JavaScriptParser.Function:
            case JavaScriptParser.This:
            case JavaScriptParser.Delete:
            case JavaScriptParser.Class:
            case JavaScriptParser.Super:
            case JavaScriptParser.Import:
            case JavaScriptParser.Async:
            case JavaScriptParser.Await:
            case JavaScriptParser.Yield:
            case JavaScriptParser.Identifier:
            case JavaScriptParser.StringLiteral:
            case JavaScriptParser.TemplateStringLiteral:
                this.state = 348;
                this.singleExpression(0);
                break;
            case JavaScriptParser.Var:
            case JavaScriptParser.Const:
            case JavaScriptParser.Let:
                this.state = 349;
                this.variableStatement();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 352;
            this.match(JavaScriptParser.Identifier);
            this.state = 353;
            if (!( this.p("of"))) {
                throw new antlr4.error.FailedPredicateException(this, "this.p(\"of\")");
            }
            this.state = 354;
            this.expressionSequence();
            this.state = 355;
            this.match(JavaScriptParser.CloseParen);
            this.state = 356;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_varModifier;
    return this;
}

VarModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarModifierContext.prototype.constructor = VarModifierContext;

VarModifierContext.prototype.Var = function() {
    return this.getToken(JavaScriptParser.Var, 0);
};

VarModifierContext.prototype.Let = function() {
    return this.getToken(JavaScriptParser.Let, 0);
};

VarModifierContext.prototype.Const = function() {
    return this.getToken(JavaScriptParser.Const, 0);
};

VarModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVarModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.VarModifierContext = VarModifierContext;

JavaScriptParser.prototype.varModifier = function() {

    var localctx = new VarModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, JavaScriptParser.RULE_varModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        _la = this._input.LA(1);
        if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (JavaScriptParser.Var - 77)) | (1 << (JavaScriptParser.Const - 77)) | (1 << (JavaScriptParser.Let - 77)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.Continue = function() {
    return this.getToken(JavaScriptParser.Continue, 0);
};

ContinueStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ContinueStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ContinueStatementContext = ContinueStatementContext;

JavaScriptParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, JavaScriptParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        this.match(JavaScriptParser.Continue);
        this.state = 365;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 363;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 364;
            this.match(JavaScriptParser.Identifier);

        }
        this.state = 367;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.Break = function() {
    return this.getToken(JavaScriptParser.Break, 0);
};

BreakStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

BreakStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.BreakStatementContext = BreakStatementContext;

JavaScriptParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, JavaScriptParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 369;
        this.match(JavaScriptParser.Break);
        this.state = 372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 370;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 371;
            this.match(JavaScriptParser.Identifier);

        }
        this.state = 374;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.Return = function() {
    return this.getToken(JavaScriptParser.Return, 0);
};

ReturnStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ReturnStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ReturnStatementContext = ReturnStatementContext;

JavaScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, JavaScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.match(JavaScriptParser.Return);
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 377;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 378;
            this.expressionSequence();

        }
        this.state = 381;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function YieldStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_yieldStatement;
    return this;
}

YieldStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YieldStatementContext.prototype.constructor = YieldStatementContext;

YieldStatementContext.prototype.Yield = function() {
    return this.getToken(JavaScriptParser.Yield, 0);
};

YieldStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

YieldStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

YieldStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitYieldStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.YieldStatementContext = YieldStatementContext;

JavaScriptParser.prototype.yieldStatement = function() {

    var localctx = new YieldStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, JavaScriptParser.RULE_yieldStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 383;
        this.match(JavaScriptParser.Yield);
        this.state = 386;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 384;
            if (!( this.notLineTerminator())) {
                throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
            }
            this.state = 385;
            this.expressionSequence();

        }
        this.state = 388;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_withStatement;
    return this;
}

WithStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithStatementContext.prototype.constructor = WithStatementContext;

WithStatementContext.prototype.With = function() {
    return this.getToken(JavaScriptParser.With, 0);
};

WithStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

WithStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

WithStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

WithStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WithStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitWithStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.WithStatementContext = WithStatementContext;

JavaScriptParser.prototype.withStatement = function() {

    var localctx = new WithStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, JavaScriptParser.RULE_withStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.match(JavaScriptParser.With);
        this.state = 391;
        this.match(JavaScriptParser.OpenParen);
        this.state = 392;
        this.expressionSequence();
        this.state = 393;
        this.match(JavaScriptParser.CloseParen);
        this.state = 394;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SwitchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_switchStatement;
    return this;
}

SwitchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SwitchStatementContext.prototype.constructor = SwitchStatementContext;

SwitchStatementContext.prototype.Switch = function() {
    return this.getToken(JavaScriptParser.Switch, 0);
};

SwitchStatementContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

SwitchStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

SwitchStatementContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

SwitchStatementContext.prototype.caseBlock = function() {
    return this.getTypedRuleContext(CaseBlockContext,0);
};

SwitchStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSwitchStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SwitchStatementContext = SwitchStatementContext;

JavaScriptParser.prototype.switchStatement = function() {

    var localctx = new SwitchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, JavaScriptParser.RULE_switchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 396;
        this.match(JavaScriptParser.Switch);
        this.state = 397;
        this.match(JavaScriptParser.OpenParen);
        this.state = 398;
        this.expressionSequence();
        this.state = 399;
        this.match(JavaScriptParser.CloseParen);
        this.state = 400;
        this.caseBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseBlock;
    return this;
}

CaseBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseBlockContext.prototype.constructor = CaseBlockContext;

CaseBlockContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

CaseBlockContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

CaseBlockContext.prototype.caseClauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClausesContext);
    } else {
        return this.getTypedRuleContext(CaseClausesContext,i);
    }
};

CaseBlockContext.prototype.defaultClause = function() {
    return this.getTypedRuleContext(DefaultClauseContext,0);
};

CaseBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseBlockContext = CaseBlockContext;

JavaScriptParser.prototype.caseBlock = function() {

    var localctx = new CaseBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, JavaScriptParser.RULE_caseBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 402;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 404;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Case) {
            this.state = 403;
            this.caseClauses();
        }

        this.state = 410;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Default) {
            this.state = 406;
            this.defaultClause();
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Case) {
                this.state = 407;
                this.caseClauses();
            }

        }

        this.state = 412;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClauses;
    return this;
}

CaseClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClausesContext.prototype.constructor = CaseClausesContext;

CaseClausesContext.prototype.caseClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CaseClauseContext);
    } else {
        return this.getTypedRuleContext(CaseClauseContext,i);
    }
};

CaseClausesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseClauses(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseClausesContext = CaseClausesContext;

JavaScriptParser.prototype.caseClauses = function() {

    var localctx = new CaseClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, JavaScriptParser.RULE_caseClauses);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 414;
            this.caseClause();
            this.state = 417; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===JavaScriptParser.Case);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CaseClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_caseClause;
    return this;
}

CaseClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaseClauseContext.prototype.constructor = CaseClauseContext;

CaseClauseContext.prototype.Case = function() {
    return this.getToken(JavaScriptParser.Case, 0);
};

CaseClauseContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

CaseClauseContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};

CaseClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

CaseClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCaseClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CaseClauseContext = CaseClauseContext;

JavaScriptParser.prototype.caseClause = function() {

    var localctx = new CaseClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, JavaScriptParser.RULE_caseClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 419;
        this.match(JavaScriptParser.Case);
        this.state = 420;
        this.expressionSequence();
        this.state = 421;
        this.match(JavaScriptParser.Colon);
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 422;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefaultClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_defaultClause;
    return this;
}

DefaultClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultClauseContext.prototype.constructor = DefaultClauseContext;

DefaultClauseContext.prototype.Default = function() {
    return this.getToken(JavaScriptParser.Default, 0);
};

DefaultClauseContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};

DefaultClauseContext.prototype.statementList = function() {
    return this.getTypedRuleContext(StatementListContext,0);
};

DefaultClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDefaultClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.DefaultClauseContext = DefaultClauseContext;

JavaScriptParser.prototype.defaultClause = function() {

    var localctx = new DefaultClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, JavaScriptParser.RULE_defaultClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this.match(JavaScriptParser.Default);
        this.state = 426;
        this.match(JavaScriptParser.Colon);
        this.state = 428;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 427;
            this.statementList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LabelledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_labelledStatement;
    return this;
}

LabelledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelledStatementContext.prototype.constructor = LabelledStatementContext;

LabelledStatementContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

LabelledStatementContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};

LabelledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabelledStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLabelledStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LabelledStatementContext = LabelledStatementContext;

JavaScriptParser.prototype.labelledStatement = function() {

    var localctx = new LabelledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, JavaScriptParser.RULE_labelledStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.match(JavaScriptParser.Identifier);
        this.state = 431;
        this.match(JavaScriptParser.Colon);
        this.state = 432;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.Throw = function() {
    return this.getToken(JavaScriptParser.Throw, 0);
};

ThrowStatementContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ThrowStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

ThrowStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitThrowStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ThrowStatementContext = ThrowStatementContext;

JavaScriptParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, JavaScriptParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.match(JavaScriptParser.Throw);
        this.state = 435;
        if (!( this.notLineTerminator())) {
            throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
        }
        this.state = 436;
        this.expressionSequence();
        this.state = 437;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.Try = function() {
    return this.getToken(JavaScriptParser.Try, 0);
};

TryStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

TryStatementContext.prototype.catchProduction = function() {
    return this.getTypedRuleContext(CatchProductionContext,0);
};

TryStatementContext.prototype.finallyProduction = function() {
    return this.getTypedRuleContext(FinallyProductionContext,0);
};

TryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.TryStatementContext = TryStatementContext;

JavaScriptParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, JavaScriptParser.RULE_tryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.match(JavaScriptParser.Try);
        this.state = 440;
        this.block();
        this.state = 446;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Catch:
            this.state = 441;
            this.catchProduction();
            this.state = 443;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 442;
                this.finallyProduction();

            }
            break;
        case JavaScriptParser.Finally:
            this.state = 445;
            this.finallyProduction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CatchProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_catchProduction;
    return this;
}

CatchProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchProductionContext.prototype.constructor = CatchProductionContext;

CatchProductionContext.prototype.Catch = function() {
    return this.getToken(JavaScriptParser.Catch, 0);
};

CatchProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchProductionContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

CatchProductionContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

CatchProductionContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

CatchProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCatchProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.CatchProductionContext = CatchProductionContext;

JavaScriptParser.prototype.catchProduction = function() {

    var localctx = new CatchProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, JavaScriptParser.RULE_catchProduction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 448;
        this.match(JavaScriptParser.Catch);
        this.state = 454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.OpenParen) {
            this.state = 449;
            this.match(JavaScriptParser.OpenParen);
            this.state = 451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.OpenBracket || _la===JavaScriptParser.OpenBrace || _la===JavaScriptParser.Identifier) {
                this.state = 450;
                this.assignable();
            }

            this.state = 453;
            this.match(JavaScriptParser.CloseParen);
        }

        this.state = 456;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FinallyProductionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_finallyProduction;
    return this;
}

FinallyProductionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyProductionContext.prototype.constructor = FinallyProductionContext;

FinallyProductionContext.prototype.Finally = function() {
    return this.getToken(JavaScriptParser.Finally, 0);
};

FinallyProductionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyProductionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFinallyProduction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FinallyProductionContext = FinallyProductionContext;

JavaScriptParser.prototype.finallyProduction = function() {

    var localctx = new FinallyProductionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, JavaScriptParser.RULE_finallyProduction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this.match(JavaScriptParser.Finally);
        this.state = 459;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DebuggerStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_debuggerStatement;
    return this;
}

DebuggerStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DebuggerStatementContext.prototype.constructor = DebuggerStatementContext;

DebuggerStatementContext.prototype.Debugger = function() {
    return this.getToken(JavaScriptParser.Debugger, 0);
};

DebuggerStatementContext.prototype.eos = function() {
    return this.getTypedRuleContext(EosContext,0);
};

DebuggerStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDebuggerStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.DebuggerStatementContext = DebuggerStatementContext;

JavaScriptParser.prototype.debuggerStatement = function() {

    var localctx = new DebuggerStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, JavaScriptParser.RULE_debuggerStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 461;
        this.match(JavaScriptParser.Debugger);
        this.state = 462;
        this.eos();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

FunctionDeclarationContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

FunctionDeclarationContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

FunctionDeclarationContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

FunctionDeclarationContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

FunctionDeclarationContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionDeclarationContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

FunctionDeclarationContext.prototype.Async = function() {
    return this.getToken(JavaScriptParser.Async, 0);
};

FunctionDeclarationContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

FunctionDeclarationContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

JavaScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, JavaScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Async) {
            this.state = 464;
            this.match(JavaScriptParser.Async);
        }

        this.state = 467;
        this.match(JavaScriptParser.Function);
        this.state = 469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Multiply) {
            this.state = 468;
            this.match(JavaScriptParser.Multiply);
        }

        this.state = 471;
        this.match(JavaScriptParser.Identifier);
        this.state = 472;
        this.match(JavaScriptParser.OpenParen);
        this.state = 474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
            this.state = 473;
            this.formalParameterList();
        }

        this.state = 476;
        this.match(JavaScriptParser.CloseParen);
        this.state = 477;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 478;
        this.functionBody();
        this.state = 479;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassDeclarationContext = ClassDeclarationContext;

JavaScriptParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, JavaScriptParser.RULE_classDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481;
        this.match(JavaScriptParser.Class);
        this.state = 482;
        this.match(JavaScriptParser.Identifier);
        this.state = 483;
        this.classTail();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassTailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classTail;
    return this;
}

ClassTailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTailContext.prototype.constructor = ClassTailContext;

ClassTailContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

ClassTailContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

ClassTailContext.prototype.Extends = function() {
    return this.getToken(JavaScriptParser.Extends, 0);
};

ClassTailContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ClassTailContext.prototype.classElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassElementContext);
    } else {
        return this.getTypedRuleContext(ClassElementContext,i);
    }
};

ClassTailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassTail(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassTailContext = ClassTailContext;

JavaScriptParser.prototype.classTail = function() {

    var localctx = new ClassTailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, JavaScriptParser.RULE_classTail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Extends) {
            this.state = 485;
            this.match(JavaScriptParser.Extends);
            this.state = 486;
            this.singleExpression(0);
        }

        this.state = 489;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 493;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 490;
                this.classElement(); 
            }
            this.state = 495;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

        this.state = 496;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_classElement;
    return this;
}

ClassElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassElementContext.prototype.constructor = ClassElementContext;

ClassElementContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassElementContext.prototype.Static = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Static);
    } else {
        return this.getToken(JavaScriptParser.Static, i);
    }
};


ClassElementContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Identifier);
    } else {
        return this.getToken(JavaScriptParser.Identifier, i);
    }
};


ClassElementContext.prototype.Async = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Async);
    } else {
        return this.getToken(JavaScriptParser.Async, i);
    }
};


ClassElementContext.prototype.emptyStatement = function() {
    return this.getTypedRuleContext(EmptyStatementContext,0);
};

ClassElementContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

ClassElementContext.prototype.Assign = function() {
    return this.getToken(JavaScriptParser.Assign, 0);
};

ClassElementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ClassElementContext.prototype.Hashtag = function() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
};

ClassElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ClassElementContext = ClassElementContext;

JavaScriptParser.prototype.classElement = function() {

    var localctx = new ClassElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, JavaScriptParser.RULE_classElement);
    var _la = 0; // Token type
    try {
        this.state = 516;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 504;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 502;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 498;
                        this.match(JavaScriptParser.Static);
                        break;

                    case 2:
                        this.state = 499;
                        if (!( this.n("static"))) {
                            throw new antlr4.error.FailedPredicateException(this, "this.n(\"static\")");
                        }
                        this.state = 500;
                        this.match(JavaScriptParser.Identifier);
                        break;

                    case 3:
                        this.state = 501;
                        this.match(JavaScriptParser.Async);
                        break;

                    } 
                }
                this.state = 506;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
            }

            this.state = 507;
            this.methodDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 508;
            this.emptyStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 510;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Hashtag) {
                this.state = 509;
                this.match(JavaScriptParser.Hashtag);
            }

            this.state = 512;
            this.propertyName();
            this.state = 513;
            this.match(JavaScriptParser.Assign);
            this.state = 514;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

MethodDefinitionContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

MethodDefinitionContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

MethodDefinitionContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

MethodDefinitionContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

MethodDefinitionContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

MethodDefinitionContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

MethodDefinitionContext.prototype.Hashtag = function() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
};

MethodDefinitionContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

MethodDefinitionContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

MethodDefinitionContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

MethodDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMethodDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.MethodDefinitionContext = MethodDefinitionContext;

JavaScriptParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, JavaScriptParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.state = 563;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Multiply) {
                this.state = 518;
                this.match(JavaScriptParser.Multiply);
            }

            this.state = 522;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Hashtag) {
                this.state = 521;
                this.match(JavaScriptParser.Hashtag);
            }

            this.state = 524;
            this.propertyName();
            this.state = 525;
            this.match(JavaScriptParser.OpenParen);
            this.state = 527;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 526;
                this.formalParameterList();
            }

            this.state = 529;
            this.match(JavaScriptParser.CloseParen);
            this.state = 530;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 531;
            this.functionBody();
            this.state = 532;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 535;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Multiply) {
                this.state = 534;
                this.match(JavaScriptParser.Multiply);
            }

            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Hashtag) {
                this.state = 537;
                this.match(JavaScriptParser.Hashtag);
            }

            this.state = 540;
            this.getter();
            this.state = 541;
            this.match(JavaScriptParser.OpenParen);
            this.state = 542;
            this.match(JavaScriptParser.CloseParen);
            this.state = 543;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 544;
            this.functionBody();
            this.state = 545;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Multiply) {
                this.state = 547;
                this.match(JavaScriptParser.Multiply);
            }

            this.state = 551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Hashtag) {
                this.state = 550;
                this.match(JavaScriptParser.Hashtag);
            }

            this.state = 553;
            this.setter();
            this.state = 554;
            this.match(JavaScriptParser.OpenParen);
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 555;
                this.formalParameterList();
            }

            this.state = 558;
            this.match(JavaScriptParser.CloseParen);
            this.state = 559;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 560;
            this.functionBody();
            this.state = 561;
            this.match(JavaScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameterArg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterArgContext);
    } else {
        return this.getTypedRuleContext(FormalParameterArgContext,i);
    }
};

FormalParameterListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


FormalParameterListContext.prototype.lastFormalParameterArg = function() {
    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FormalParameterListContext = FormalParameterListContext;

JavaScriptParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, JavaScriptParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 578;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.OpenBracket:
        case JavaScriptParser.OpenBrace:
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 565;
            this.formalParameterArg();
            this.state = 570;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 566;
                    this.match(JavaScriptParser.Comma);
                    this.state = 567;
                    this.formalParameterArg(); 
                }
                this.state = 572;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            this.state = 575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Comma) {
                this.state = 573;
                this.match(JavaScriptParser.Comma);
                this.state = 574;
                this.lastFormalParameterArg();
            }

            break;
        case JavaScriptParser.Ellipsis:
            this.enterOuterAlt(localctx, 2);
            this.state = 577;
            this.lastFormalParameterArg();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_formalParameterArg;
    return this;
}

FormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterArgContext.prototype.constructor = FormalParameterArgContext;

FormalParameterArgContext.prototype.assignable = function() {
    return this.getTypedRuleContext(AssignableContext,0);
};

FormalParameterArgContext.prototype.Assign = function() {
    return this.getToken(JavaScriptParser.Assign, 0);
};

FormalParameterArgContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

FormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FormalParameterArgContext = FormalParameterArgContext;

JavaScriptParser.prototype.formalParameterArg = function() {

    var localctx = new FormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, JavaScriptParser.RULE_formalParameterArg);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.assignable();
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Assign) {
            this.state = 581;
            this.match(JavaScriptParser.Assign);
            this.state = 582;
            this.singleExpression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LastFormalParameterArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_lastFormalParameterArg;
    return this;
}

LastFormalParameterArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterArgContext.prototype.constructor = LastFormalParameterArgContext;

LastFormalParameterArgContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

LastFormalParameterArgContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

LastFormalParameterArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLastFormalParameterArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LastFormalParameterArgContext = LastFormalParameterArgContext;

JavaScriptParser.prototype.lastFormalParameterArg = function() {

    var localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, JavaScriptParser.RULE_lastFormalParameterArg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 585;
        this.match(JavaScriptParser.Ellipsis);
        this.state = 586;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_functionBody;
    return this;
}

FunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionBodyContext.prototype.constructor = FunctionBodyContext;

FunctionBodyContext.prototype.sourceElements = function() {
    return this.getTypedRuleContext(SourceElementsContext,0);
};

FunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.FunctionBodyContext = FunctionBodyContext;

JavaScriptParser.prototype.functionBody = function() {

    var localctx = new FunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, JavaScriptParser.RULE_functionBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        if(la_===1) {
            this.state = 588;
            this.sourceElements();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceElementsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_sourceElements;
    return this;
}

SourceElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceElementsContext.prototype.constructor = SourceElementsContext;

SourceElementsContext.prototype.sourceElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SourceElementContext);
    } else {
        return this.getTypedRuleContext(SourceElementContext,i);
    }
};

SourceElementsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSourceElements(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SourceElementsContext = SourceElementsContext;

JavaScriptParser.prototype.sourceElements = function() {

    var localctx = new SourceElementsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, JavaScriptParser.RULE_sourceElements);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 591;
        		this.sourceElement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 594; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,65, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayLiteral;
    return this;
}

ArrayLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayLiteralContext.prototype.constructor = ArrayLiteralContext;

ArrayLiteralContext.prototype.OpenBracket = function() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
};

ArrayLiteralContext.prototype.elementList = function() {
    return this.getTypedRuleContext(ElementListContext,0);
};

ArrayLiteralContext.prototype.CloseBracket = function() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
};

ArrayLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrayLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrayLiteralContext = ArrayLiteralContext;

JavaScriptParser.prototype.arrayLiteral = function() {

    var localctx = new ArrayLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, JavaScriptParser.RULE_arrayLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.match(JavaScriptParser.OpenBracket);
        this.state = 597;
        this.elementList();
        this.state = 598;
        this.match(JavaScriptParser.CloseBracket);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ElementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_elementList;
    return this;
}

ElementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementListContext.prototype.constructor = ElementListContext;

ElementListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


ElementListContext.prototype.arrayElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayElementContext);
    } else {
        return this.getTypedRuleContext(ArrayElementContext,i);
    }
};

ElementListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitElementList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ElementListContext = ElementListContext;

JavaScriptParser.prototype.elementList = function() {

    var localctx = new ElementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, JavaScriptParser.RULE_elementList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 600;
                this.match(JavaScriptParser.Comma); 
            }
            this.state = 605;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
        }

        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
            this.state = 606;
            this.arrayElement();
        }

        this.state = 617;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 610; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 609;
                    this.match(JavaScriptParser.Comma);
                    this.state = 612; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===JavaScriptParser.Comma);
                this.state = 614;
                this.arrayElement(); 
            }
            this.state = 619;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

        this.state = 623;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===JavaScriptParser.Comma) {
            this.state = 620;
            this.match(JavaScriptParser.Comma);
            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrayElement;
    return this;
}

ArrayElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayElementContext.prototype.constructor = ArrayElementContext;

ArrayElementContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArrayElementContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

ArrayElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrayElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrayElementContext = ArrayElementContext;

JavaScriptParser.prototype.arrayElement = function() {

    var localctx = new ArrayElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, JavaScriptParser.RULE_arrayElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Ellipsis) {
            this.state = 626;
            this.match(JavaScriptParser.Ellipsis);
        }

        this.state = 629;
        this.singleExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ObjectLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_objectLiteral;
    return this;
}

ObjectLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectLiteralContext.prototype.constructor = ObjectLiteralContext;

ObjectLiteralContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

ObjectLiteralContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

ObjectLiteralContext.prototype.propertyAssignment = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyAssignmentContext);
    } else {
        return this.getTypedRuleContext(PropertyAssignmentContext,i);
    }
};

ObjectLiteralContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


ObjectLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitObjectLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ObjectLiteralContext = ObjectLiteralContext;

JavaScriptParser.prototype.objectLiteral = function() {

    var localctx = new ObjectLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, JavaScriptParser.RULE_objectLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(JavaScriptParser.OpenBrace);
        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not) | (1 << JavaScriptParser.Multiply))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Break - 59)) | (1 << (JavaScriptParser.Do - 59)) | (1 << (JavaScriptParser.Instanceof - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.Case - 59)) | (1 << (JavaScriptParser.Else - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Var - 59)) | (1 << (JavaScriptParser.Catch - 59)) | (1 << (JavaScriptParser.Finally - 59)) | (1 << (JavaScriptParser.Return - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Continue - 59)) | (1 << (JavaScriptParser.For - 59)) | (1 << (JavaScriptParser.Switch - 59)) | (1 << (JavaScriptParser.While - 59)) | (1 << (JavaScriptParser.Debugger - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)) | (1 << (JavaScriptParser.With - 59)) | (1 << (JavaScriptParser.Default - 59)))) !== 0) || ((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & ((1 << (JavaScriptParser.If - 91)) | (1 << (JavaScriptParser.Throw - 91)) | (1 << (JavaScriptParser.Delete - 91)) | (1 << (JavaScriptParser.In - 91)) | (1 << (JavaScriptParser.Try - 91)) | (1 << (JavaScriptParser.As - 91)) | (1 << (JavaScriptParser.From - 91)) | (1 << (JavaScriptParser.Class - 91)) | (1 << (JavaScriptParser.Enum - 91)) | (1 << (JavaScriptParser.Extends - 91)) | (1 << (JavaScriptParser.Super - 91)) | (1 << (JavaScriptParser.Const - 91)) | (1 << (JavaScriptParser.Export - 91)) | (1 << (JavaScriptParser.Import - 91)) | (1 << (JavaScriptParser.Async - 91)) | (1 << (JavaScriptParser.Await - 91)) | (1 << (JavaScriptParser.Implements - 91)) | (1 << (JavaScriptParser.Let - 91)) | (1 << (JavaScriptParser.Private - 91)) | (1 << (JavaScriptParser.Public - 91)) | (1 << (JavaScriptParser.Interface - 91)) | (1 << (JavaScriptParser.Package - 91)) | (1 << (JavaScriptParser.Protected - 91)) | (1 << (JavaScriptParser.Static - 91)) | (1 << (JavaScriptParser.Yield - 91)) | (1 << (JavaScriptParser.Identifier - 91)) | (1 << (JavaScriptParser.StringLiteral - 91)) | (1 << (JavaScriptParser.TemplateStringLiteral - 91)))) !== 0)) {
            this.state = 632;
            this.propertyAssignment();
            this.state = 637;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 633;
                    this.match(JavaScriptParser.Comma);
                    this.state = 634;
                    this.propertyAssignment(); 
                }
                this.state = 639;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
            }

        }

        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Comma) {
            this.state = 642;
            this.match(JavaScriptParser.Comma);
        }

        this.state = 645;
        this.match(JavaScriptParser.CloseBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyAssignment;
    return this;
}

PropertyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAssignmentContext.prototype.constructor = PropertyAssignmentContext;


 
PropertyAssignmentContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function PropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyExpressionAssignmentContext.prototype.constructor = PropertyExpressionAssignmentContext;

JavaScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

PropertyExpressionAssignmentContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

PropertyExpressionAssignmentContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};

PropertyExpressionAssignmentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ComputedPropertyExpressionAssignmentContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComputedPropertyExpressionAssignmentContext.prototype = Object.create(PropertyAssignmentContext.prototype);
ComputedPropertyExpressionAssignmentContext.prototype.constructor = ComputedPropertyExpressionAssignmentContext;

JavaScriptParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

ComputedPropertyExpressionAssignmentContext.prototype.OpenBracket = function() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ComputedPropertyExpressionAssignmentContext.prototype.CloseBracket = function() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
};

ComputedPropertyExpressionAssignmentContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};
ComputedPropertyExpressionAssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitComputedPropertyExpressionAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyShorthandContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyShorthandContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyShorthandContext.prototype.constructor = PropertyShorthandContext;

JavaScriptParser.PropertyShorthandContext = PropertyShorthandContext;

PropertyShorthandContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PropertyShorthandContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};
PropertyShorthandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyShorthand(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertySetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertySetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertySetterContext.prototype.constructor = PropertySetterContext;

JavaScriptParser.PropertySetterContext = PropertySetterContext;

PropertySetterContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertySetterContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

PropertySetterContext.prototype.formalParameterArg = function() {
    return this.getTypedRuleContext(FormalParameterArgContext,0);
};

PropertySetterContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

PropertySetterContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

PropertySetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

PropertySetterContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};
PropertySetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertySetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PropertyGetterContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PropertyGetterContext.prototype = Object.create(PropertyAssignmentContext.prototype);
PropertyGetterContext.prototype.constructor = PropertyGetterContext;

JavaScriptParser.PropertyGetterContext = PropertyGetterContext;

PropertyGetterContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyGetterContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

PropertyGetterContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

PropertyGetterContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

PropertyGetterContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

PropertyGetterContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};
PropertyGetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionPropertyContext(parser, ctx) {
	PropertyAssignmentContext.call(this, parser);
    PropertyAssignmentContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionPropertyContext.prototype = Object.create(PropertyAssignmentContext.prototype);
FunctionPropertyContext.prototype.constructor = FunctionPropertyContext;

JavaScriptParser.FunctionPropertyContext = FunctionPropertyContext;

FunctionPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

FunctionPropertyContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

FunctionPropertyContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

FunctionPropertyContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

FunctionPropertyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

FunctionPropertyContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

FunctionPropertyContext.prototype.Async = function() {
    return this.getToken(JavaScriptParser.Async, 0);
};

FunctionPropertyContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

FunctionPropertyContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};
FunctionPropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;

JavaScriptParser.prototype.propertyAssignment = function() {

    var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, JavaScriptParser.RULE_propertyAssignment);
    var _la = 0; // Token type
    try {
        this.state = 692;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            localctx = new PropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 647;
            this.propertyName();
            this.state = 648;
            this.match(JavaScriptParser.Colon);
            this.state = 649;
            this.singleExpression(0);
            break;

        case 2:
            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 651;
            this.match(JavaScriptParser.OpenBracket);
            this.state = 652;
            this.singleExpression(0);
            this.state = 653;
            this.match(JavaScriptParser.CloseBracket);
            this.state = 654;
            this.match(JavaScriptParser.Colon);
            this.state = 655;
            this.singleExpression(0);
            break;

        case 3:
            localctx = new FunctionPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 658;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
            if(la_===1) {
                this.state = 657;
                this.match(JavaScriptParser.Async);

            }
            this.state = 661;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Multiply) {
                this.state = 660;
                this.match(JavaScriptParser.Multiply);
            }

            this.state = 663;
            this.propertyName();
            this.state = 664;
            this.match(JavaScriptParser.OpenParen);
            this.state = 666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 665;
                this.formalParameterList();
            }

            this.state = 668;
            this.match(JavaScriptParser.CloseParen);
            this.state = 669;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 670;
            this.functionBody();
            this.state = 671;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 4:
            localctx = new PropertyGetterContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 673;
            this.getter();
            this.state = 674;
            this.match(JavaScriptParser.OpenParen);
            this.state = 675;
            this.match(JavaScriptParser.CloseParen);
            this.state = 676;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 677;
            this.functionBody();
            this.state = 678;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 5:
            localctx = new PropertySetterContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 680;
            this.setter();
            this.state = 681;
            this.match(JavaScriptParser.OpenParen);
            this.state = 682;
            this.formalParameterArg();
            this.state = 683;
            this.match(JavaScriptParser.CloseParen);
            this.state = 684;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 685;
            this.functionBody();
            this.state = 686;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 6:
            localctx = new PropertyShorthandContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 689;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Ellipsis) {
                this.state = 688;
                this.match(JavaScriptParser.Ellipsis);
            }

            this.state = 691;
            this.singleExpression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

PropertyNameContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

PropertyNameContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

PropertyNameContext.prototype.OpenBracket = function() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
};

PropertyNameContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PropertyNameContext.prototype.CloseBracket = function() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
};

PropertyNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPropertyName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.PropertyNameContext = PropertyNameContext;

JavaScriptParser.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, JavaScriptParser.RULE_propertyName);
    try {
        this.state = 701;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 694;
            this.identifierName();
            break;
        case JavaScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 695;
            this.match(JavaScriptParser.StringLiteral);
            break;
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 696;
            this.numericLiteral();
            break;
        case JavaScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 4);
            this.state = 697;
            this.match(JavaScriptParser.OpenBracket);
            this.state = 698;
            this.singleExpression(0);
            this.state = 699;
            this.match(JavaScriptParser.CloseBracket);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ArgumentsContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

ArgumentsContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArgumentsContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


ArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArgumentsContext = ArgumentsContext;

JavaScriptParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, JavaScriptParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(JavaScriptParser.OpenParen);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.RegularExpressionLiteral) | (1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenParen) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis) | (1 << JavaScriptParser.PlusPlus) | (1 << JavaScriptParser.MinusMinus) | (1 << JavaScriptParser.Plus) | (1 << JavaScriptParser.Minus) | (1 << JavaScriptParser.BitNot) | (1 << JavaScriptParser.Not))) !== 0) || ((((_la - 59)) & ~0x1f) == 0 && ((1 << (_la - 59)) & ((1 << (JavaScriptParser.NullLiteral - 59)) | (1 << (JavaScriptParser.BooleanLiteral - 59)) | (1 << (JavaScriptParser.DecimalLiteral - 59)) | (1 << (JavaScriptParser.HexIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 59)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigHexIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 59)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 59)) | (1 << (JavaScriptParser.Typeof - 59)) | (1 << (JavaScriptParser.New - 59)) | (1 << (JavaScriptParser.Void - 59)) | (1 << (JavaScriptParser.Function - 59)) | (1 << (JavaScriptParser.This - 59)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (JavaScriptParser.Delete - 93)) | (1 << (JavaScriptParser.Class - 93)) | (1 << (JavaScriptParser.Super - 93)) | (1 << (JavaScriptParser.Import - 93)) | (1 << (JavaScriptParser.Async - 93)) | (1 << (JavaScriptParser.Await - 93)) | (1 << (JavaScriptParser.Yield - 93)) | (1 << (JavaScriptParser.Identifier - 93)) | (1 << (JavaScriptParser.StringLiteral - 93)) | (1 << (JavaScriptParser.TemplateStringLiteral - 93)))) !== 0)) {
            this.state = 704;
            this.argument();
            this.state = 709;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 705;
                    this.match(JavaScriptParser.Comma);
                    this.state = 706;
                    this.argument(); 
                }
                this.state = 711;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            this.state = 713;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Comma) {
                this.state = 712;
                this.match(JavaScriptParser.Comma);
            }

        }

        this.state = 717;
        this.match(JavaScriptParser.CloseParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArgumentContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ArgumentContext.prototype.Ellipsis = function() {
    return this.getToken(JavaScriptParser.Ellipsis, 0);
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArgumentContext = ArgumentContext;

JavaScriptParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, JavaScriptParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===JavaScriptParser.Ellipsis) {
            this.state = 719;
            this.match(JavaScriptParser.Ellipsis);
        }

        this.state = 724;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.state = 722;
            this.singleExpression(0);
            break;

        case 2:
            this.state = 723;
            this.match(JavaScriptParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_expressionSequence;
    return this;
}

ExpressionSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSequenceContext.prototype.constructor = ExpressionSequenceContext;

ExpressionSequenceContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

ExpressionSequenceContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(JavaScriptParser.Comma);
    } else {
        return this.getToken(JavaScriptParser.Comma, i);
    }
};


ExpressionSequenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitExpressionSequence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;

JavaScriptParser.prototype.expressionSequence = function() {

    var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, JavaScriptParser.RULE_expressionSequence);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this.singleExpression(0);
        this.state = 731;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 727;
                this.match(JavaScriptParser.Comma);
                this.state = 728;
                this.singleExpression(0); 
            }
            this.state = 733;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SingleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_singleExpression;
    return this;
}

SingleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleExpressionContext.prototype.constructor = SingleExpressionContext;


 
SingleExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TemplateStringExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TemplateStringExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TemplateStringExpressionContext.prototype.constructor = TemplateStringExpressionContext;

JavaScriptParser.TemplateStringExpressionContext = TemplateStringExpressionContext;

TemplateStringExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

TemplateStringExpressionContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
};
TemplateStringExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTemplateStringExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TernaryExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TernaryExpressionContext.prototype.constructor = TernaryExpressionContext;

JavaScriptParser.TernaryExpressionContext = TernaryExpressionContext;

TernaryExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

TernaryExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
};

TernaryExpressionContext.prototype.Colon = function() {
    return this.getToken(JavaScriptParser.Colon, 0);
};
TernaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTernaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

JavaScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

LogicalAndExpressionContext.prototype.And = function() {
    return this.getToken(JavaScriptParser.And, 0);
};
LogicalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLogicalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PowerExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PowerExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PowerExpressionContext.prototype.constructor = PowerExpressionContext;

JavaScriptParser.PowerExpressionContext = PowerExpressionContext;

PowerExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

PowerExpressionContext.prototype.Power = function() {
    return this.getToken(JavaScriptParser.Power, 0);
};
PowerExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPowerExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreIncrementExpressionContext.prototype.constructor = PreIncrementExpressionContext;

JavaScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;

PreIncrementExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
};

PreIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPreIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ObjectLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ObjectLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ObjectLiteralExpressionContext.prototype.constructor = ObjectLiteralExpressionContext;

JavaScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;

ObjectLiteralExpressionContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};
ObjectLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitObjectLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MetaExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MetaExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MetaExpressionContext.prototype.constructor = MetaExpressionContext;

JavaScriptParser.MetaExpressionContext = MetaExpressionContext;

MetaExpressionContext.prototype.New = function() {
    return this.getToken(JavaScriptParser.New, 0);
};

MetaExpressionContext.prototype.Dot = function() {
    return this.getToken(JavaScriptParser.Dot, 0);
};

MetaExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
MetaExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMetaExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InExpressionContext.prototype.constructor = InExpressionContext;

JavaScriptParser.InExpressionContext = InExpressionContext;

InExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InExpressionContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};
InExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitInExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LogicalOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LogicalOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

JavaScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

LogicalOrExpressionContext.prototype.Or = function() {
    return this.getToken(JavaScriptParser.Or, 0);
};
LogicalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLogicalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NotExpressionContext.prototype.constructor = NotExpressionContext;

JavaScriptParser.NotExpressionContext = NotExpressionContext;

NotExpressionContext.prototype.Not = function() {
    return this.getToken(JavaScriptParser.Not, 0);
};

NotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
NotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PreDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PreDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PreDecreaseExpressionContext.prototype.constructor = PreDecreaseExpressionContext;

JavaScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;

PreDecreaseExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
};

PreDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
PreDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPreDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArgumentsExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArgumentsExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArgumentsExpressionContext.prototype.constructor = ArgumentsExpressionContext;

JavaScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;

ArgumentsExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArgumentsExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
ArgumentsExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArgumentsExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AwaitExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AwaitExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AwaitExpressionContext.prototype.constructor = AwaitExpressionContext;

JavaScriptParser.AwaitExpressionContext = AwaitExpressionContext;

AwaitExpressionContext.prototype.Await = function() {
    return this.getToken(JavaScriptParser.Await, 0);
};

AwaitExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
AwaitExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAwaitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ThisExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ThisExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ThisExpressionContext.prototype.constructor = ThisExpressionContext;

JavaScriptParser.ThisExpressionContext = ThisExpressionContext;

ThisExpressionContext.prototype.This = function() {
    return this.getToken(JavaScriptParser.This, 0);
};
ThisExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitThisExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

JavaScriptParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.anoymousFunction = function() {
    return this.getTypedRuleContext(AnoymousFunctionContext,0);
};
FunctionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryMinusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryMinusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryMinusExpressionContext.prototype.constructor = UnaryMinusExpressionContext;

JavaScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;

UnaryMinusExpressionContext.prototype.Minus = function() {
    return this.getToken(JavaScriptParser.Minus, 0);
};

UnaryMinusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryMinusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitUnaryMinusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

JavaScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AssignmentExpressionContext.prototype.Assign = function() {
    return this.getToken(JavaScriptParser.Assign, 0);
};
AssignmentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostDecreaseExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostDecreaseExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostDecreaseExpressionContext.prototype.constructor = PostDecreaseExpressionContext;

JavaScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;

PostDecreaseExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PostDecreaseExpressionContext.prototype.MinusMinus = function() {
    return this.getToken(JavaScriptParser.MinusMinus, 0);
};
PostDecreaseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPostDecreaseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TypeofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
TypeofExpressionContext.prototype.constructor = TypeofExpressionContext;

JavaScriptParser.TypeofExpressionContext = TypeofExpressionContext;

TypeofExpressionContext.prototype.Typeof = function() {
    return this.getToken(JavaScriptParser.Typeof, 0);
};

TypeofExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
TypeofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitTypeofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function InstanceofExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InstanceofExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
InstanceofExpressionContext.prototype.constructor = InstanceofExpressionContext;

JavaScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;

InstanceofExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

InstanceofExpressionContext.prototype.Instanceof = function() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
};
InstanceofExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitInstanceofExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryPlusExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryPlusExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
UnaryPlusExpressionContext.prototype.constructor = UnaryPlusExpressionContext;

JavaScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;

UnaryPlusExpressionContext.prototype.Plus = function() {
    return this.getToken(JavaScriptParser.Plus, 0);
};

UnaryPlusExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
UnaryPlusExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitUnaryPlusExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DeleteExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DeleteExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
DeleteExpressionContext.prototype.constructor = DeleteExpressionContext;

JavaScriptParser.DeleteExpressionContext = DeleteExpressionContext;

DeleteExpressionContext.prototype.Delete = function() {
    return this.getToken(JavaScriptParser.Delete, 0);
};

DeleteExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
DeleteExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitDeleteExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ImportExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ImportExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ImportExpressionContext.prototype.constructor = ImportExpressionContext;

JavaScriptParser.ImportExpressionContext = ImportExpressionContext;

ImportExpressionContext.prototype.Import = function() {
    return this.getToken(JavaScriptParser.Import, 0);
};

ImportExpressionContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ImportExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ImportExpressionContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};
ImportExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitImportExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EqualityExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualityExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

JavaScriptParser.EqualityExpressionContext = EqualityExpressionContext;

EqualityExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.Equals_ = function() {
    return this.getToken(JavaScriptParser.Equals_, 0);
};

EqualityExpressionContext.prototype.NotEquals = function() {
    return this.getToken(JavaScriptParser.NotEquals, 0);
};

EqualityExpressionContext.prototype.IdentityEquals = function() {
    return this.getToken(JavaScriptParser.IdentityEquals, 0);
};

EqualityExpressionContext.prototype.IdentityNotEquals = function() {
    return this.getToken(JavaScriptParser.IdentityNotEquals, 0);
};
EqualityExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEqualityExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitXOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitXOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitXOrExpressionContext.prototype.constructor = BitXOrExpressionContext;

JavaScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;

BitXOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitXOrExpressionContext.prototype.BitXOr = function() {
    return this.getToken(JavaScriptParser.BitXOr, 0);
};
BitXOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitXOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SuperExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SuperExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
SuperExpressionContext.prototype.constructor = SuperExpressionContext;

JavaScriptParser.SuperExpressionContext = SuperExpressionContext;

SuperExpressionContext.prototype.Super = function() {
    return this.getToken(JavaScriptParser.Super, 0);
};
SuperExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSuperExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiplicativeExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

JavaScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

MultiplicativeExpressionContext.prototype.Divide = function() {
    return this.getToken(JavaScriptParser.Divide, 0);
};

MultiplicativeExpressionContext.prototype.Modulus = function() {
    return this.getToken(JavaScriptParser.Modulus, 0);
};
MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitShiftExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitShiftExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitShiftExpressionContext.prototype.constructor = BitShiftExpressionContext;

JavaScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;

BitShiftExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitShiftExpressionContext.prototype.LeftShiftArithmetic = function() {
    return this.getToken(JavaScriptParser.LeftShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftArithmetic = function() {
    return this.getToken(JavaScriptParser.RightShiftArithmetic, 0);
};

BitShiftExpressionContext.prototype.RightShiftLogical = function() {
    return this.getToken(JavaScriptParser.RightShiftLogical, 0);
};
BitShiftExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitShiftExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ParenthesizedExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ParenthesizedExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ParenthesizedExpressionContext.prototype.constructor = ParenthesizedExpressionContext;

JavaScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

ParenthesizedExpressionContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ParenthesizedExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

ParenthesizedExpressionContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};
ParenthesizedExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitParenthesizedExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AdditiveExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

JavaScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.Plus = function() {
    return this.getToken(JavaScriptParser.Plus, 0);
};

AdditiveExpressionContext.prototype.Minus = function() {
    return this.getToken(JavaScriptParser.Minus, 0);
};
AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationalExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

JavaScriptParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.LessThan = function() {
    return this.getToken(JavaScriptParser.LessThan, 0);
};

RelationalExpressionContext.prototype.MoreThan = function() {
    return this.getToken(JavaScriptParser.MoreThan, 0);
};

RelationalExpressionContext.prototype.LessThanEquals = function() {
    return this.getToken(JavaScriptParser.LessThanEquals, 0);
};

RelationalExpressionContext.prototype.GreaterThanEquals = function() {
    return this.getToken(JavaScriptParser.GreaterThanEquals, 0);
};
RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function PostIncrementExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PostIncrementExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
PostIncrementExpressionContext.prototype.constructor = PostIncrementExpressionContext;

JavaScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;

PostIncrementExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

PostIncrementExpressionContext.prototype.PlusPlus = function() {
    return this.getToken(JavaScriptParser.PlusPlus, 0);
};
PostIncrementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitPostIncrementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function YieldExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

YieldExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
YieldExpressionContext.prototype.constructor = YieldExpressionContext;

JavaScriptParser.YieldExpressionContext = YieldExpressionContext;

YieldExpressionContext.prototype.yieldStatement = function() {
    return this.getTypedRuleContext(YieldStatementContext,0);
};
YieldExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitYieldExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitNotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitNotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitNotExpressionContext.prototype.constructor = BitNotExpressionContext;

JavaScriptParser.BitNotExpressionContext = BitNotExpressionContext;

BitNotExpressionContext.prototype.BitNot = function() {
    return this.getToken(JavaScriptParser.BitNot, 0);
};

BitNotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
BitNotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitNotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NewExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NewExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
NewExpressionContext.prototype.constructor = NewExpressionContext;

JavaScriptParser.NewExpressionContext = NewExpressionContext;

NewExpressionContext.prototype.New = function() {
    return this.getToken(JavaScriptParser.New, 0);
};

NewExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

NewExpressionContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};
NewExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNewExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
LiteralExpressionContext.prototype.constructor = LiteralExpressionContext;

JavaScriptParser.LiteralExpressionContext = LiteralExpressionContext;

LiteralExpressionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
LiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrayLiteralExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrayLiteralExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ArrayLiteralExpressionContext.prototype.constructor = ArrayLiteralExpressionContext;

JavaScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

ArrayLiteralExpressionContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};
ArrayLiteralExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrayLiteralExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberDotExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberDotExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberDotExpressionContext.prototype.constructor = MemberDotExpressionContext;

JavaScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;

MemberDotExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberDotExpressionContext.prototype.Dot = function() {
    return this.getToken(JavaScriptParser.Dot, 0);
};

MemberDotExpressionContext.prototype.identifierName = function() {
    return this.getTypedRuleContext(IdentifierNameContext,0);
};

MemberDotExpressionContext.prototype.QuestionMark = function() {
    return this.getToken(JavaScriptParser.QuestionMark, 0);
};

MemberDotExpressionContext.prototype.Hashtag = function() {
    return this.getToken(JavaScriptParser.Hashtag, 0);
};
MemberDotExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMemberDotExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ClassExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ClassExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
ClassExpressionContext.prototype.constructor = ClassExpressionContext;

JavaScriptParser.ClassExpressionContext = ClassExpressionContext;

ClassExpressionContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

ClassExpressionContext.prototype.classTail = function() {
    return this.getTypedRuleContext(ClassTailContext,0);
};

ClassExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
ClassExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitClassExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MemberIndexExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MemberIndexExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
MemberIndexExpressionContext.prototype.constructor = MemberIndexExpressionContext;

JavaScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;

MemberIndexExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

MemberIndexExpressionContext.prototype.OpenBracket = function() {
    return this.getToken(JavaScriptParser.OpenBracket, 0);
};

MemberIndexExpressionContext.prototype.expressionSequence = function() {
    return this.getTypedRuleContext(ExpressionSequenceContext,0);
};

MemberIndexExpressionContext.prototype.CloseBracket = function() {
    return this.getToken(JavaScriptParser.CloseBracket, 0);
};
MemberIndexExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitMemberIndexExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IdentifierExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IdentifierExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
IdentifierExpressionContext.prototype.constructor = IdentifierExpressionContext;

JavaScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;

IdentifierExpressionContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};
IdentifierExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIdentifierExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitAndExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitAndExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitAndExpressionContext.prototype.constructor = BitAndExpressionContext;

JavaScriptParser.BitAndExpressionContext = BitAndExpressionContext;

BitAndExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitAndExpressionContext.prototype.BitAnd = function() {
    return this.getToken(JavaScriptParser.BitAnd, 0);
};
BitAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitOrExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitOrExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
BitOrExpressionContext.prototype.constructor = BitOrExpressionContext;

JavaScriptParser.BitOrExpressionContext = BitOrExpressionContext;

BitOrExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

BitOrExpressionContext.prototype.BitOr = function() {
    return this.getToken(JavaScriptParser.BitOr, 0);
};
BitOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBitOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AssignmentOperatorExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AssignmentOperatorExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
AssignmentOperatorExpressionContext.prototype.constructor = AssignmentOperatorExpressionContext;

JavaScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;

AssignmentOperatorExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

AssignmentOperatorExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};
AssignmentOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VoidExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VoidExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
VoidExpressionContext.prototype.constructor = VoidExpressionContext;

JavaScriptParser.VoidExpressionContext = VoidExpressionContext;

VoidExpressionContext.prototype.Void = function() {
    return this.getToken(JavaScriptParser.Void, 0);
};

VoidExpressionContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};
VoidExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitVoidExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoalesceExpressionContext(parser, ctx) {
	SingleExpressionContext.call(this, parser);
    SingleExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoalesceExpressionContext.prototype = Object.create(SingleExpressionContext.prototype);
CoalesceExpressionContext.prototype.constructor = CoalesceExpressionContext;

JavaScriptParser.CoalesceExpressionContext = CoalesceExpressionContext;

CoalesceExpressionContext.prototype.singleExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SingleExpressionContext);
    } else {
        return this.getTypedRuleContext(SingleExpressionContext,i);
    }
};

CoalesceExpressionContext.prototype.NullCoalesce = function() {
    return this.getToken(JavaScriptParser.NullCoalesce, 0);
};
CoalesceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitCoalesceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.prototype.singleExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new SingleExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 116;
    this.enterRecursionRule(localctx, 116, JavaScriptParser.RULE_singleExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 735;
            this.anoymousFunction();
            break;

        case 2:
            localctx = new ClassExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 736;
            this.match(JavaScriptParser.Class);
            this.state = 738;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Identifier) {
                this.state = 737;
                this.match(JavaScriptParser.Identifier);
            }

            this.state = 740;
            this.classTail();
            break;

        case 3:
            localctx = new NewExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 741;
            this.match(JavaScriptParser.New);
            this.state = 742;
            this.singleExpression(0);
            this.state = 744;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 743;
                this.arguments();

            }
            break;

        case 4:
            localctx = new MetaExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 746;
            this.match(JavaScriptParser.New);
            this.state = 747;
            this.match(JavaScriptParser.Dot);
            this.state = 748;
            this.match(JavaScriptParser.Identifier);
            break;

        case 5:
            localctx = new DeleteExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 749;
            this.match(JavaScriptParser.Delete);
            this.state = 750;
            this.singleExpression(37);
            break;

        case 6:
            localctx = new VoidExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 751;
            this.match(JavaScriptParser.Void);
            this.state = 752;
            this.singleExpression(36);
            break;

        case 7:
            localctx = new TypeofExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 753;
            this.match(JavaScriptParser.Typeof);
            this.state = 754;
            this.singleExpression(35);
            break;

        case 8:
            localctx = new PreIncrementExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 755;
            this.match(JavaScriptParser.PlusPlus);
            this.state = 756;
            this.singleExpression(34);
            break;

        case 9:
            localctx = new PreDecreaseExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 757;
            this.match(JavaScriptParser.MinusMinus);
            this.state = 758;
            this.singleExpression(33);
            break;

        case 10:
            localctx = new UnaryPlusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 759;
            this.match(JavaScriptParser.Plus);
            this.state = 760;
            this.singleExpression(32);
            break;

        case 11:
            localctx = new UnaryMinusExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 761;
            this.match(JavaScriptParser.Minus);
            this.state = 762;
            this.singleExpression(31);
            break;

        case 12:
            localctx = new BitNotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 763;
            this.match(JavaScriptParser.BitNot);
            this.state = 764;
            this.singleExpression(30);
            break;

        case 13:
            localctx = new NotExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 765;
            this.match(JavaScriptParser.Not);
            this.state = 766;
            this.singleExpression(29);
            break;

        case 14:
            localctx = new AwaitExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 767;
            this.match(JavaScriptParser.Await);
            this.state = 768;
            this.singleExpression(28);
            break;

        case 15:
            localctx = new ImportExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 769;
            this.match(JavaScriptParser.Import);
            this.state = 770;
            this.match(JavaScriptParser.OpenParen);
            this.state = 771;
            this.singleExpression(0);
            this.state = 772;
            this.match(JavaScriptParser.CloseParen);
            break;

        case 16:
            localctx = new YieldExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 774;
            this.yieldStatement();
            break;

        case 17:
            localctx = new ThisExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 775;
            this.match(JavaScriptParser.This);
            break;

        case 18:
            localctx = new IdentifierExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 776;
            this.match(JavaScriptParser.Identifier);
            break;

        case 19:
            localctx = new SuperExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 777;
            this.match(JavaScriptParser.Super);
            break;

        case 20:
            localctx = new LiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 778;
            this.literal();
            break;

        case 21:
            localctx = new ArrayLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 779;
            this.arrayLiteral();
            break;

        case 22:
            localctx = new ObjectLiteralExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 780;
            this.objectLiteral();
            break;

        case 23:
            localctx = new ParenthesizedExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 781;
            this.match(JavaScriptParser.OpenParen);
            this.state = 782;
            this.expressionSequence();
            this.state = 783;
            this.match(JavaScriptParser.CloseParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 868;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 866;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PowerExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 787;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 788;
                    this.match(JavaScriptParser.Power);
                    this.state = 789;
                    this.singleExpression(27);
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 790;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 791;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.Multiply) | (1 << JavaScriptParser.Divide) | (1 << JavaScriptParser.Modulus))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 792;
                    this.singleExpression(27);
                    break;

                case 3:
                    localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 793;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 794;
                    _la = this._input.LA(1);
                    if(!(_la===JavaScriptParser.Plus || _la===JavaScriptParser.Minus)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 795;
                    this.singleExpression(26);
                    break;

                case 4:
                    localctx = new CoalesceExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 796;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 797;
                    this.match(JavaScriptParser.NullCoalesce);
                    this.state = 798;
                    this.singleExpression(25);
                    break;

                case 5:
                    localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 799;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 800;
                    _la = this._input.LA(1);
                    if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (JavaScriptParser.RightShiftArithmetic - 30)) | (1 << (JavaScriptParser.LeftShiftArithmetic - 30)) | (1 << (JavaScriptParser.RightShiftLogical - 30)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 801;
                    this.singleExpression(24);
                    break;

                case 6:
                    localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 802;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 803;
                    _la = this._input.LA(1);
                    if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (JavaScriptParser.LessThan - 33)) | (1 << (JavaScriptParser.MoreThan - 33)) | (1 << (JavaScriptParser.LessThanEquals - 33)) | (1 << (JavaScriptParser.GreaterThanEquals - 33)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 804;
                    this.singleExpression(23);
                    break;

                case 7:
                    localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 805;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 806;
                    this.match(JavaScriptParser.Instanceof);
                    this.state = 807;
                    this.singleExpression(22);
                    break;

                case 8:
                    localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 808;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 809;
                    this.match(JavaScriptParser.In);
                    this.state = 810;
                    this.singleExpression(21);
                    break;

                case 9:
                    localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 811;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 812;
                    _la = this._input.LA(1);
                    if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (JavaScriptParser.Equals_ - 37)) | (1 << (JavaScriptParser.NotEquals - 37)) | (1 << (JavaScriptParser.IdentityEquals - 37)) | (1 << (JavaScriptParser.IdentityNotEquals - 37)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 813;
                    this.singleExpression(20);
                    break;

                case 10:
                    localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 814;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 815;
                    this.match(JavaScriptParser.BitAnd);
                    this.state = 816;
                    this.singleExpression(19);
                    break;

                case 11:
                    localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 817;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 818;
                    this.match(JavaScriptParser.BitXOr);
                    this.state = 819;
                    this.singleExpression(18);
                    break;

                case 12:
                    localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 820;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 821;
                    this.match(JavaScriptParser.BitOr);
                    this.state = 822;
                    this.singleExpression(17);
                    break;

                case 13:
                    localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 823;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 824;
                    this.match(JavaScriptParser.And);
                    this.state = 825;
                    this.singleExpression(16);
                    break;

                case 14:
                    localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 826;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 827;
                    this.match(JavaScriptParser.Or);
                    this.state = 828;
                    this.singleExpression(15);
                    break;

                case 15:
                    localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 829;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 830;
                    this.match(JavaScriptParser.QuestionMark);
                    this.state = 831;
                    this.singleExpression(0);
                    this.state = 832;
                    this.match(JavaScriptParser.Colon);
                    this.state = 833;
                    this.singleExpression(14);
                    break;

                case 16:
                    localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 835;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 836;
                    this.match(JavaScriptParser.Assign);
                    this.state = 837;
                    this.singleExpression(12);
                    break;

                case 17:
                    localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 838;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 839;
                    this.assignmentOperator();
                    this.state = 840;
                    this.singleExpression(11);
                    break;

                case 18:
                    localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 842;
                    if (!( this.precpred(this._ctx, 44))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
                    }
                    this.state = 843;
                    this.match(JavaScriptParser.OpenBracket);
                    this.state = 844;
                    this.expressionSequence();
                    this.state = 845;
                    this.match(JavaScriptParser.CloseBracket);
                    break;

                case 19:
                    localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 847;
                    if (!( this.precpred(this._ctx, 43))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 43)");
                    }
                    this.state = 849;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===JavaScriptParser.QuestionMark) {
                        this.state = 848;
                        this.match(JavaScriptParser.QuestionMark);
                    }

                    this.state = 851;
                    this.match(JavaScriptParser.Dot);
                    this.state = 853;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===JavaScriptParser.Hashtag) {
                        this.state = 852;
                        this.match(JavaScriptParser.Hashtag);
                    }

                    this.state = 855;
                    this.identifierName();
                    break;

                case 20:
                    localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 856;
                    if (!( this.precpred(this._ctx, 42))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 42)");
                    }
                    this.state = 857;
                    this.arguments();
                    break;

                case 21:
                    localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 858;
                    if (!( this.precpred(this._ctx, 39))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 39)");
                    }
                    this.state = 859;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 860;
                    this.match(JavaScriptParser.PlusPlus);
                    break;

                case 22:
                    localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 861;
                    if (!( this.precpred(this._ctx, 38))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 38)");
                    }
                    this.state = 862;
                    if (!( this.notLineTerminator())) {
                        throw new antlr4.error.FailedPredicateException(this, "this.notLineTerminator()");
                    }
                    this.state = 863;
                    this.match(JavaScriptParser.MinusMinus);
                    break;

                case 23:
                    localctx = new TemplateStringExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, JavaScriptParser.RULE_singleExpression);
                    this.state = 864;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 865;
                    this.match(JavaScriptParser.TemplateStringLiteral);
                    break;

                } 
            }
            this.state = 870;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AssignableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignable;
    return this;
}

AssignableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableContext.prototype.constructor = AssignableContext;

AssignableContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

AssignableContext.prototype.arrayLiteral = function() {
    return this.getTypedRuleContext(ArrayLiteralContext,0);
};

AssignableContext.prototype.objectLiteral = function() {
    return this.getTypedRuleContext(ObjectLiteralContext,0);
};

AssignableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignable(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.AssignableContext = AssignableContext;

JavaScriptParser.prototype.assignable = function() {

    var localctx = new AssignableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, JavaScriptParser.RULE_assignable);
    try {
        this.state = 874;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 871;
            this.match(JavaScriptParser.Identifier);
            break;
        case JavaScriptParser.OpenBracket:
            this.enterOuterAlt(localctx, 2);
            this.state = 872;
            this.arrayLiteral();
            break;
        case JavaScriptParser.OpenBrace:
            this.enterOuterAlt(localctx, 3);
            this.state = 873;
            this.objectLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AnoymousFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_anoymousFunction;
    return this;
}

AnoymousFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnoymousFunctionContext.prototype.constructor = AnoymousFunctionContext;


 
AnoymousFunctionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AnoymousFunctionDeclContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AnoymousFunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
AnoymousFunctionDeclContext.prototype.constructor = AnoymousFunctionDeclContext;

JavaScriptParser.AnoymousFunctionDeclContext = AnoymousFunctionDeclContext;

AnoymousFunctionDeclContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

AnoymousFunctionDeclContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

AnoymousFunctionDeclContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

AnoymousFunctionDeclContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

AnoymousFunctionDeclContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

AnoymousFunctionDeclContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

AnoymousFunctionDeclContext.prototype.Async = function() {
    return this.getToken(JavaScriptParser.Async, 0);
};

AnoymousFunctionDeclContext.prototype.Multiply = function() {
    return this.getToken(JavaScriptParser.Multiply, 0);
};

AnoymousFunctionDeclContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};
AnoymousFunctionDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAnoymousFunctionDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ArrowFunctionContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ArrowFunctionContext.prototype = Object.create(AnoymousFunctionContext.prototype);
ArrowFunctionContext.prototype.constructor = ArrowFunctionContext;

JavaScriptParser.ArrowFunctionContext = ArrowFunctionContext;

ArrowFunctionContext.prototype.arrowFunctionParameters = function() {
    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
};

ArrowFunctionContext.prototype.ARROW = function() {
    return this.getToken(JavaScriptParser.ARROW, 0);
};

ArrowFunctionContext.prototype.arrowFunctionBody = function() {
    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
};

ArrowFunctionContext.prototype.Async = function() {
    return this.getToken(JavaScriptParser.Async, 0);
};
ArrowFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionDeclContext(parser, ctx) {
	AnoymousFunctionContext.call(this, parser);
    AnoymousFunctionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionDeclContext.prototype = Object.create(AnoymousFunctionContext.prototype);
FunctionDeclContext.prototype.constructor = FunctionDeclContext;

JavaScriptParser.FunctionDeclContext = FunctionDeclContext;

FunctionDeclContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};
FunctionDeclContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitFunctionDecl(this);
    } else {
        return visitor.visitChildren(this);
    }
};



JavaScriptParser.AnoymousFunctionContext = AnoymousFunctionContext;

JavaScriptParser.prototype.anoymousFunction = function() {

    var localctx = new AnoymousFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, JavaScriptParser.RULE_anoymousFunction);
    var _la = 0; // Token type
    try {
        this.state = 900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            localctx = new FunctionDeclContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 876;
            this.functionDeclaration();
            break;

        case 2:
            localctx = new AnoymousFunctionDeclContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 878;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Async) {
                this.state = 877;
                this.match(JavaScriptParser.Async);
            }

            this.state = 880;
            this.match(JavaScriptParser.Function);
            this.state = 882;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Multiply) {
                this.state = 881;
                this.match(JavaScriptParser.Multiply);
            }

            this.state = 884;
            this.match(JavaScriptParser.OpenParen);
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 885;
                this.formalParameterList();
            }

            this.state = 888;
            this.match(JavaScriptParser.CloseParen);
            this.state = 889;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 890;
            this.functionBody();
            this.state = 891;
            this.match(JavaScriptParser.CloseBrace);
            break;

        case 3:
            localctx = new ArrowFunctionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 894;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JavaScriptParser.Async) {
                this.state = 893;
                this.match(JavaScriptParser.Async);
            }

            this.state = 896;
            this.arrowFunctionParameters();
            this.state = 897;
            this.match(JavaScriptParser.ARROW);
            this.state = 898;
            this.arrowFunctionBody();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowFunctionParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionParameters;
    return this;
}

ArrowFunctionParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionParametersContext.prototype.constructor = ArrowFunctionParametersContext;

ArrowFunctionParametersContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

ArrowFunctionParametersContext.prototype.OpenParen = function() {
    return this.getToken(JavaScriptParser.OpenParen, 0);
};

ArrowFunctionParametersContext.prototype.CloseParen = function() {
    return this.getToken(JavaScriptParser.CloseParen, 0);
};

ArrowFunctionParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ArrowFunctionParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunctionParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext;

JavaScriptParser.prototype.arrowFunctionParameters = function() {

    var localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, JavaScriptParser.RULE_arrowFunctionParameters);
    var _la = 0; // Token type
    try {
        this.state = 908;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 902;
            this.match(JavaScriptParser.Identifier);
            break;
        case JavaScriptParser.OpenParen:
            this.enterOuterAlt(localctx, 2);
            this.state = 903;
            this.match(JavaScriptParser.OpenParen);
            this.state = 905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << JavaScriptParser.OpenBracket) | (1 << JavaScriptParser.OpenBrace) | (1 << JavaScriptParser.Ellipsis))) !== 0) || _la===JavaScriptParser.Identifier) {
                this.state = 904;
                this.formalParameterList();
            }

            this.state = 907;
            this.match(JavaScriptParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrowFunctionBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_arrowFunctionBody;
    return this;
}

ArrowFunctionBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowFunctionBodyContext.prototype.constructor = ArrowFunctionBodyContext;

ArrowFunctionBodyContext.prototype.singleExpression = function() {
    return this.getTypedRuleContext(SingleExpressionContext,0);
};

ArrowFunctionBodyContext.prototype.OpenBrace = function() {
    return this.getToken(JavaScriptParser.OpenBrace, 0);
};

ArrowFunctionBodyContext.prototype.functionBody = function() {
    return this.getTypedRuleContext(FunctionBodyContext,0);
};

ArrowFunctionBodyContext.prototype.CloseBrace = function() {
    return this.getToken(JavaScriptParser.CloseBrace, 0);
};

ArrowFunctionBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitArrowFunctionBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext;

JavaScriptParser.prototype.arrowFunctionBody = function() {

    var localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, JavaScriptParser.RULE_arrowFunctionBody);
    try {
        this.state = 915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 910;
            this.singleExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 911;
            this.match(JavaScriptParser.OpenBrace);
            this.state = 912;
            this.functionBody();
            this.state = 913;
            this.match(JavaScriptParser.CloseBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.MultiplyAssign = function() {
    return this.getToken(JavaScriptParser.MultiplyAssign, 0);
};

AssignmentOperatorContext.prototype.DivideAssign = function() {
    return this.getToken(JavaScriptParser.DivideAssign, 0);
};

AssignmentOperatorContext.prototype.ModulusAssign = function() {
    return this.getToken(JavaScriptParser.ModulusAssign, 0);
};

AssignmentOperatorContext.prototype.PlusAssign = function() {
    return this.getToken(JavaScriptParser.PlusAssign, 0);
};

AssignmentOperatorContext.prototype.MinusAssign = function() {
    return this.getToken(JavaScriptParser.MinusAssign, 0);
};

AssignmentOperatorContext.prototype.LeftShiftArithmeticAssign = function() {
    return this.getToken(JavaScriptParser.LeftShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftArithmeticAssign = function() {
    return this.getToken(JavaScriptParser.RightShiftArithmeticAssign, 0);
};

AssignmentOperatorContext.prototype.RightShiftLogicalAssign = function() {
    return this.getToken(JavaScriptParser.RightShiftLogicalAssign, 0);
};

AssignmentOperatorContext.prototype.BitAndAssign = function() {
    return this.getToken(JavaScriptParser.BitAndAssign, 0);
};

AssignmentOperatorContext.prototype.BitXorAssign = function() {
    return this.getToken(JavaScriptParser.BitXorAssign, 0);
};

AssignmentOperatorContext.prototype.BitOrAssign = function() {
    return this.getToken(JavaScriptParser.BitOrAssign, 0);
};

AssignmentOperatorContext.prototype.PowerAssign = function() {
    return this.getToken(JavaScriptParser.PowerAssign, 0);
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;

JavaScriptParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, JavaScriptParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        _la = this._input.LA(1);
        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (JavaScriptParser.MultiplyAssign - 46)) | (1 << (JavaScriptParser.DivideAssign - 46)) | (1 << (JavaScriptParser.ModulusAssign - 46)) | (1 << (JavaScriptParser.PlusAssign - 46)) | (1 << (JavaScriptParser.MinusAssign - 46)) | (1 << (JavaScriptParser.LeftShiftArithmeticAssign - 46)) | (1 << (JavaScriptParser.RightShiftArithmeticAssign - 46)) | (1 << (JavaScriptParser.RightShiftLogicalAssign - 46)) | (1 << (JavaScriptParser.BitAndAssign - 46)) | (1 << (JavaScriptParser.BitXorAssign - 46)) | (1 << (JavaScriptParser.BitOrAssign - 46)) | (1 << (JavaScriptParser.PowerAssign - 46)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.NullLiteral = function() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(JavaScriptParser.StringLiteral, 0);
};

LiteralContext.prototype.TemplateStringLiteral = function() {
    return this.getToken(JavaScriptParser.TemplateStringLiteral, 0);
};

LiteralContext.prototype.RegularExpressionLiteral = function() {
    return this.getToken(JavaScriptParser.RegularExpressionLiteral, 0);
};

LiteralContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

LiteralContext.prototype.bigintLiteral = function() {
    return this.getTypedRuleContext(BigintLiteralContext,0);
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.LiteralContext = LiteralContext;

JavaScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, JavaScriptParser.RULE_literal);
    try {
        this.state = 926;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 919;
            this.match(JavaScriptParser.NullLiteral);
            break;
        case JavaScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 920;
            this.match(JavaScriptParser.BooleanLiteral);
            break;
        case JavaScriptParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 921;
            this.match(JavaScriptParser.StringLiteral);
            break;
        case JavaScriptParser.TemplateStringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 922;
            this.match(JavaScriptParser.TemplateStringLiteral);
            break;
        case JavaScriptParser.RegularExpressionLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 923;
            this.match(JavaScriptParser.RegularExpressionLiteral);
            break;
        case JavaScriptParser.DecimalLiteral:
        case JavaScriptParser.HexIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral:
        case JavaScriptParser.OctalIntegerLiteral2:
        case JavaScriptParser.BinaryIntegerLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 924;
            this.numericLiteral();
            break;
        case JavaScriptParser.BigHexIntegerLiteral:
        case JavaScriptParser.BigOctalIntegerLiteral:
        case JavaScriptParser.BigBinaryIntegerLiteral:
        case JavaScriptParser.BigDecimalIntegerLiteral:
            this.enterOuterAlt(localctx, 7);
            this.state = 925;
            this.bigintLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.DecimalLiteral = function() {
    return this.getToken(JavaScriptParser.DecimalLiteral, 0);
};

NumericLiteralContext.prototype.HexIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.HexIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral, 0);
};

NumericLiteralContext.prototype.OctalIntegerLiteral2 = function() {
    return this.getToken(JavaScriptParser.OctalIntegerLiteral2, 0);
};

NumericLiteralContext.prototype.BinaryIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BinaryIntegerLiteral, 0);
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.NumericLiteralContext = NumericLiteralContext;

JavaScriptParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, JavaScriptParser.RULE_numericLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 928;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (JavaScriptParser.DecimalLiteral - 61)) | (1 << (JavaScriptParser.HexIntegerLiteral - 61)) | (1 << (JavaScriptParser.OctalIntegerLiteral - 61)) | (1 << (JavaScriptParser.OctalIntegerLiteral2 - 61)) | (1 << (JavaScriptParser.BinaryIntegerLiteral - 61)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BigintLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_bigintLiteral;
    return this;
}

BigintLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BigintLiteralContext.prototype.constructor = BigintLiteralContext;

BigintLiteralContext.prototype.BigDecimalIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BigDecimalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigHexIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BigHexIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigOctalIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BigOctalIntegerLiteral, 0);
};

BigintLiteralContext.prototype.BigBinaryIntegerLiteral = function() {
    return this.getToken(JavaScriptParser.BigBinaryIntegerLiteral, 0);
};

BigintLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitBigintLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.BigintLiteralContext = BigintLiteralContext;

JavaScriptParser.prototype.bigintLiteral = function() {

    var localctx = new BigintLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, JavaScriptParser.RULE_bigintLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 930;
        _la = this._input.LA(1);
        if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (JavaScriptParser.BigHexIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigOctalIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigBinaryIntegerLiteral - 66)) | (1 << (JavaScriptParser.BigDecimalIntegerLiteral - 66)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_identifierName;
    return this;
}

IdentifierNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierNameContext.prototype.constructor = IdentifierNameContext;

IdentifierNameContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

IdentifierNameContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

IdentifierNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitIdentifierName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.IdentifierNameContext = IdentifierNameContext;

JavaScriptParser.prototype.identifierName = function() {

    var localctx = new IdentifierNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, JavaScriptParser.RULE_identifierName);
    try {
        this.state = 934;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 932;
            this.match(JavaScriptParser.Identifier);
            break;
        case JavaScriptParser.NullLiteral:
        case JavaScriptParser.BooleanLiteral:
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
            this.enterOuterAlt(localctx, 2);
            this.state = 933;
            this.reservedWord();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

ReservedWordContext.prototype.NullLiteral = function() {
    return this.getToken(JavaScriptParser.NullLiteral, 0);
};

ReservedWordContext.prototype.BooleanLiteral = function() {
    return this.getToken(JavaScriptParser.BooleanLiteral, 0);
};

ReservedWordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitReservedWord(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.ReservedWordContext = ReservedWordContext;

JavaScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, JavaScriptParser.RULE_reservedWord);
    try {
        this.state = 939;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JavaScriptParser.Break:
        case JavaScriptParser.Do:
        case JavaScriptParser.Instanceof:
        case JavaScriptParser.Typeof:
        case JavaScriptParser.Case:
        case JavaScriptParser.Else:
        case JavaScriptParser.New:
        case JavaScriptParser.Var:
        case JavaScriptParser.Catch:
        case JavaScriptParser.Finally:
        case JavaScriptParser.Return:
        case JavaScriptParser.Void:
        case JavaScriptParser.Continue:
        case JavaScriptParser.For:
        case JavaScriptParser.Switch:
        case JavaScriptParser.While:
        case JavaScriptParser.Debugger:
        case JavaScriptParser.Function:
        case JavaScriptParser.This:
        case JavaScriptParser.With:
        case JavaScriptParser.Default:
        case JavaScriptParser.If:
        case JavaScriptParser.Throw:
        case JavaScriptParser.Delete:
        case JavaScriptParser.In:
        case JavaScriptParser.Try:
        case JavaScriptParser.As:
        case JavaScriptParser.From:
        case JavaScriptParser.Class:
        case JavaScriptParser.Enum:
        case JavaScriptParser.Extends:
        case JavaScriptParser.Super:
        case JavaScriptParser.Const:
        case JavaScriptParser.Export:
        case JavaScriptParser.Import:
        case JavaScriptParser.Async:
        case JavaScriptParser.Await:
        case JavaScriptParser.Implements:
        case JavaScriptParser.Let:
        case JavaScriptParser.Private:
        case JavaScriptParser.Public:
        case JavaScriptParser.Interface:
        case JavaScriptParser.Package:
        case JavaScriptParser.Protected:
        case JavaScriptParser.Static:
        case JavaScriptParser.Yield:
            this.enterOuterAlt(localctx, 1);
            this.state = 936;
            this.keyword();
            break;
        case JavaScriptParser.NullLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 937;
            this.match(JavaScriptParser.NullLiteral);
            break;
        case JavaScriptParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 938;
            this.match(JavaScriptParser.BooleanLiteral);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.Break = function() {
    return this.getToken(JavaScriptParser.Break, 0);
};

KeywordContext.prototype.Do = function() {
    return this.getToken(JavaScriptParser.Do, 0);
};

KeywordContext.prototype.Instanceof = function() {
    return this.getToken(JavaScriptParser.Instanceof, 0);
};

KeywordContext.prototype.Typeof = function() {
    return this.getToken(JavaScriptParser.Typeof, 0);
};

KeywordContext.prototype.Case = function() {
    return this.getToken(JavaScriptParser.Case, 0);
};

KeywordContext.prototype.Else = function() {
    return this.getToken(JavaScriptParser.Else, 0);
};

KeywordContext.prototype.New = function() {
    return this.getToken(JavaScriptParser.New, 0);
};

KeywordContext.prototype.Var = function() {
    return this.getToken(JavaScriptParser.Var, 0);
};

KeywordContext.prototype.Catch = function() {
    return this.getToken(JavaScriptParser.Catch, 0);
};

KeywordContext.prototype.Finally = function() {
    return this.getToken(JavaScriptParser.Finally, 0);
};

KeywordContext.prototype.Return = function() {
    return this.getToken(JavaScriptParser.Return, 0);
};

KeywordContext.prototype.Void = function() {
    return this.getToken(JavaScriptParser.Void, 0);
};

KeywordContext.prototype.Continue = function() {
    return this.getToken(JavaScriptParser.Continue, 0);
};

KeywordContext.prototype.For = function() {
    return this.getToken(JavaScriptParser.For, 0);
};

KeywordContext.prototype.Switch = function() {
    return this.getToken(JavaScriptParser.Switch, 0);
};

KeywordContext.prototype.While = function() {
    return this.getToken(JavaScriptParser.While, 0);
};

KeywordContext.prototype.Debugger = function() {
    return this.getToken(JavaScriptParser.Debugger, 0);
};

KeywordContext.prototype.Function = function() {
    return this.getToken(JavaScriptParser.Function, 0);
};

KeywordContext.prototype.This = function() {
    return this.getToken(JavaScriptParser.This, 0);
};

KeywordContext.prototype.With = function() {
    return this.getToken(JavaScriptParser.With, 0);
};

KeywordContext.prototype.Default = function() {
    return this.getToken(JavaScriptParser.Default, 0);
};

KeywordContext.prototype.If = function() {
    return this.getToken(JavaScriptParser.If, 0);
};

KeywordContext.prototype.Throw = function() {
    return this.getToken(JavaScriptParser.Throw, 0);
};

KeywordContext.prototype.Delete = function() {
    return this.getToken(JavaScriptParser.Delete, 0);
};

KeywordContext.prototype.In = function() {
    return this.getToken(JavaScriptParser.In, 0);
};

KeywordContext.prototype.Try = function() {
    return this.getToken(JavaScriptParser.Try, 0);
};

KeywordContext.prototype.Class = function() {
    return this.getToken(JavaScriptParser.Class, 0);
};

KeywordContext.prototype.Enum = function() {
    return this.getToken(JavaScriptParser.Enum, 0);
};

KeywordContext.prototype.Extends = function() {
    return this.getToken(JavaScriptParser.Extends, 0);
};

KeywordContext.prototype.Super = function() {
    return this.getToken(JavaScriptParser.Super, 0);
};

KeywordContext.prototype.Const = function() {
    return this.getToken(JavaScriptParser.Const, 0);
};

KeywordContext.prototype.Export = function() {
    return this.getToken(JavaScriptParser.Export, 0);
};

KeywordContext.prototype.Import = function() {
    return this.getToken(JavaScriptParser.Import, 0);
};

KeywordContext.prototype.Implements = function() {
    return this.getToken(JavaScriptParser.Implements, 0);
};

KeywordContext.prototype.Let = function() {
    return this.getToken(JavaScriptParser.Let, 0);
};

KeywordContext.prototype.Private = function() {
    return this.getToken(JavaScriptParser.Private, 0);
};

KeywordContext.prototype.Public = function() {
    return this.getToken(JavaScriptParser.Public, 0);
};

KeywordContext.prototype.Interface = function() {
    return this.getToken(JavaScriptParser.Interface, 0);
};

KeywordContext.prototype.Package = function() {
    return this.getToken(JavaScriptParser.Package, 0);
};

KeywordContext.prototype.Protected = function() {
    return this.getToken(JavaScriptParser.Protected, 0);
};

KeywordContext.prototype.Static = function() {
    return this.getToken(JavaScriptParser.Static, 0);
};

KeywordContext.prototype.Yield = function() {
    return this.getToken(JavaScriptParser.Yield, 0);
};

KeywordContext.prototype.Async = function() {
    return this.getToken(JavaScriptParser.Async, 0);
};

KeywordContext.prototype.Await = function() {
    return this.getToken(JavaScriptParser.Await, 0);
};

KeywordContext.prototype.From = function() {
    return this.getToken(JavaScriptParser.From, 0);
};

KeywordContext.prototype.As = function() {
    return this.getToken(JavaScriptParser.As, 0);
};

KeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.KeywordContext = KeywordContext;

JavaScriptParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, JavaScriptParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        _la = this._input.LA(1);
        if(!(((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (JavaScriptParser.Break - 70)) | (1 << (JavaScriptParser.Do - 70)) | (1 << (JavaScriptParser.Instanceof - 70)) | (1 << (JavaScriptParser.Typeof - 70)) | (1 << (JavaScriptParser.Case - 70)) | (1 << (JavaScriptParser.Else - 70)) | (1 << (JavaScriptParser.New - 70)) | (1 << (JavaScriptParser.Var - 70)) | (1 << (JavaScriptParser.Catch - 70)) | (1 << (JavaScriptParser.Finally - 70)) | (1 << (JavaScriptParser.Return - 70)) | (1 << (JavaScriptParser.Void - 70)) | (1 << (JavaScriptParser.Continue - 70)) | (1 << (JavaScriptParser.For - 70)) | (1 << (JavaScriptParser.Switch - 70)) | (1 << (JavaScriptParser.While - 70)) | (1 << (JavaScriptParser.Debugger - 70)) | (1 << (JavaScriptParser.Function - 70)) | (1 << (JavaScriptParser.This - 70)) | (1 << (JavaScriptParser.With - 70)) | (1 << (JavaScriptParser.Default - 70)) | (1 << (JavaScriptParser.If - 70)) | (1 << (JavaScriptParser.Throw - 70)) | (1 << (JavaScriptParser.Delete - 70)) | (1 << (JavaScriptParser.In - 70)) | (1 << (JavaScriptParser.Try - 70)) | (1 << (JavaScriptParser.As - 70)) | (1 << (JavaScriptParser.From - 70)) | (1 << (JavaScriptParser.Class - 70)) | (1 << (JavaScriptParser.Enum - 70)) | (1 << (JavaScriptParser.Extends - 70)) | (1 << (JavaScriptParser.Super - 70)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (JavaScriptParser.Const - 102)) | (1 << (JavaScriptParser.Export - 102)) | (1 << (JavaScriptParser.Import - 102)) | (1 << (JavaScriptParser.Async - 102)) | (1 << (JavaScriptParser.Await - 102)) | (1 << (JavaScriptParser.Implements - 102)) | (1 << (JavaScriptParser.Let - 102)) | (1 << (JavaScriptParser.Private - 102)) | (1 << (JavaScriptParser.Public - 102)) | (1 << (JavaScriptParser.Interface - 102)) | (1 << (JavaScriptParser.Package - 102)) | (1 << (JavaScriptParser.Protected - 102)) | (1 << (JavaScriptParser.Static - 102)) | (1 << (JavaScriptParser.Yield - 102)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

GetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

GetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitGetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.GetterContext = GetterContext;

JavaScriptParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, JavaScriptParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 943;
        this.match(JavaScriptParser.Identifier);
        this.state = 944;
        if (!( this.p("get"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.p(\"get\")");
        }
        this.state = 945;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.Identifier = function() {
    return this.getToken(JavaScriptParser.Identifier, 0);
};

SetterContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.SetterContext = SetterContext;

JavaScriptParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, JavaScriptParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 947;
        this.match(JavaScriptParser.Identifier);
        this.state = 948;
        if (!( this.p("set"))) {
            throw new antlr4.error.FailedPredicateException(this, "this.p(\"set\")");
        }
        this.state = 949;
        this.propertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JavaScriptParser.RULE_eos;
    return this;
}

EosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EosContext.prototype.constructor = EosContext;

EosContext.prototype.SemiColon = function() {
    return this.getToken(JavaScriptParser.SemiColon, 0);
};

EosContext.prototype.EOF = function() {
    return this.getToken(JavaScriptParser.EOF, 0);
};

EosContext.prototype.accept = function(visitor) {
    if ( visitor instanceof JavaScriptParserVisitor ) {
        return visitor.visitEos(this);
    } else {
        return visitor.visitChildren(this);
    }
};




JavaScriptParser.EosContext = EosContext;

JavaScriptParser.prototype.eos = function() {

    var localctx = new EosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, JavaScriptParser.RULE_eos);
    try {
        this.state = 955;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 951;
            this.match(JavaScriptParser.SemiColon);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 952;
            this.match(JavaScriptParser.EOF);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 953;
            if (!( this.lineTerminatorAhead())) {
                throw new antlr4.error.FailedPredicateException(this, "this.lineTerminatorAhead()");
            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 954;
            if (!( this.closeBrace())) {
                throw new antlr4.error.FailedPredicateException(this, "this.closeBrace()");
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


JavaScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 19:
			return this.expressionStatement_sempred(localctx, predIndex);
	case 21:
			return this.iterationStatement_sempred(localctx, predIndex);
	case 23:
			return this.continueStatement_sempred(localctx, predIndex);
	case 24:
			return this.breakStatement_sempred(localctx, predIndex);
	case 25:
			return this.returnStatement_sempred(localctx, predIndex);
	case 26:
			return this.yieldStatement_sempred(localctx, predIndex);
	case 34:
			return this.throwStatement_sempred(localctx, predIndex);
	case 42:
			return this.classElement_sempred(localctx, predIndex);
	case 58:
			return this.singleExpression_sempred(localctx, predIndex);
	case 70:
			return this.getter_sempred(localctx, predIndex);
	case 71:
			return this.setter_sempred(localctx, predIndex);
	case 72:
			return this.eos_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

JavaScriptParser.prototype.expressionStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.notOpenBraceAndNotFunction();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.iterationStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.p("of");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.continueStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.breakStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.returnStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.yieldStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.throwStatement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.notLineTerminator();
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.classElement_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.n("static");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.singleExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 8:
			return this.precpred(this._ctx, 27);
		case 9:
			return this.precpred(this._ctx, 26);
		case 10:
			return this.precpred(this._ctx, 25);
		case 11:
			return this.precpred(this._ctx, 24);
		case 12:
			return this.precpred(this._ctx, 23);
		case 13:
			return this.precpred(this._ctx, 22);
		case 14:
			return this.precpred(this._ctx, 21);
		case 15:
			return this.precpred(this._ctx, 20);
		case 16:
			return this.precpred(this._ctx, 19);
		case 17:
			return this.precpred(this._ctx, 18);
		case 18:
			return this.precpred(this._ctx, 17);
		case 19:
			return this.precpred(this._ctx, 16);
		case 20:
			return this.precpred(this._ctx, 15);
		case 21:
			return this.precpred(this._ctx, 14);
		case 22:
			return this.precpred(this._ctx, 13);
		case 23:
			return this.precpred(this._ctx, 12);
		case 24:
			return this.precpred(this._ctx, 11);
		case 25:
			return this.precpred(this._ctx, 44);
		case 26:
			return this.precpred(this._ctx, 43);
		case 27:
			return this.precpred(this._ctx, 42);
		case 28:
			return this.precpred(this._ctx, 39);
		case 29:
			return this.notLineTerminator();
		case 30:
			return this.precpred(this._ctx, 38);
		case 31:
			return this.notLineTerminator();
		case 32:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.getter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.p("get");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.setter_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.p("set");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

JavaScriptParser.prototype.eos_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.lineTerminatorAhead();
		case 36:
			return this.closeBrace();
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.JavaScriptParser = JavaScriptParser;
