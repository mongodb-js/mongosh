// Polyfills for Node.js APIs that browserify provided but webpack didn't
globalThis.global = globalThis.global || globalThis;
globalThis.process = globalThis.process || {};
globalThis.Buffer = globalThis.Buffer || require('buffer').Buffer;
process.env = process.env || {};
process.cwd = process.cwd || (() => '/');
globalThis.btoa = globalThis.btoa || (data => Buffer.from(data, 'latin1').toString('base64'));
globalThis.atob = globalThis.atob || (data => Buffer.from(data, 'base64').toString('latin1'));

// The BSON package tries to use crypto.randomBytes(), but that throws
// in the current browserify replacement for that package.
// We provide a low-quality polyfill for now.
// https://jira.mongodb.org/browse/MONGOSH-988
const crypto = require('crypto');
try {
    crypto.randomBytes(1);
} catch (err) {
    crypto.randomBytes = function(size) {
        const uint8Array = new Uint8Array(size);
        for (var i = 0; i < uint8Array.length; i++) {
            uint8Array[i] = Math.random() * 256;
        }
        return size;
    };
};

require('../../../../service-provider-core'); // Ensure TextEncoder polyfill is loaded early enough
const ShellApi = require('../../../../shell-api/');
const ShellEvaluator = require('../../../../shell-evaluator/').default;

/** temporal object that is used to access symbols from closures generated by browserify */
_global = {
    ShellInstanceState: ShellApi.ShellInstanceState,
    ShellEvaluator: ShellEvaluator,
    toShellResult: ShellApi.toShellResult,
    getShellApiType: ShellApi.getShellApiType,
};
