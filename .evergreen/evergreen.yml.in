<%
const path = require('path');

const NODE_JS_VERSION_20 = require('./node-20-latest.json').version;
const NODE_JS_VERSION_16 = require('./node-16-latest.json').version;

const MONGODB_VERSIONS = [
  { shortName: '42xc', versionSpec: '4.2.x' },
  { shortName: '42xe', versionSpec: '4.2.x-enterprise' },
  { shortName: '44xc', versionSpec: '4.4.x' },
  { shortName: '44xe', versionSpec: '4.4.x-enterprise' },
  { shortName: '50xc', versionSpec: '5.0.x' },
  { shortName: '50xe', versionSpec: '5.0.x-enterprise' },
  { shortName: '60xc', versionSpec: '6.0.x' },
  { shortName: '60xe', versionSpec: '6.0.x-enterprise' },
  { shortName: '70xc', versionSpec: '7.0.x' },
  { shortName: '70xe', versionSpec: '7.0.x-enterprise' },
  { shortName: '80xc', versionSpec: '>= 8.0.0-rc15' },
  { shortName: '80xe', versionSpec: '>= 8.0.0-rc15-enterprise' },
  { shortName: 'latest', versionSpec: 'latest-alpha-enterprise' }
];
const NODE_VERSIONS = [
  { shortName: '20', versionSpec: NODE_JS_VERSION_20, skipNodeVersionCheck: '' },
  { shortName: '16', versionSpec: NODE_JS_VERSION_16, skipNodeVersionCheck: '' }
];

const pathToPackages = path.join(__dirname, '..', 'packages');
const MONGOSH_PACKAGES = fs.readdirSync(pathToPackages, { withFileTypes: true })
  .filter(d => d.isDirectory() && fs.existsSync(path.join(pathToPackages, d.name, 'package.json')))
  .map(d => ({
    name: d.name,
    ...(JSON.parse(fs.readFileSync(path.join(pathToPackages, d.name, 'package.json'))).mongosh || {})
  }));

const ALL_UNIT_TESTS = [];
for (const packageInfo of MONGOSH_PACKAGES) {
  for (const { shortName: nShort, versionSpec: nVersion, skipNodeVersionCheck } of NODE_VERSIONS) {
    const defaultVariants = ['darwin', 'linux', 'win32'];
    if (packageInfo.unitTestsOnly) {
      const id = `n${nShort}_${packageInfo.name.replace(/-/g, '_')}`;
      ALL_UNIT_TESTS.push({
        id, nShort, nVersion, skipNodeVersionCheck,
        packageName: packageInfo.name,
        variants: packageInfo.variants ?? defaultVariants
      });
    } else {
      for (const { shortName: mShort, versionSpec: mVersion } of MONGODB_VERSIONS) {
        let variants = packageInfo.variants ?? defaultVariants;
        variants = (mShort === '42xe') ?
          // The MongoDB 4.2 enterprise server does not work on Ubuntu 20.04
          variants.filter(v => v !== 'linux') :
          variants;
        const id = `m${mShort}_n${nShort}_${packageInfo.name.replace(/-/g, '_')}`;
        ALL_UNIT_TESTS.push({
          id, nShort, nVersion, mShort, mVersion, skipNodeVersionCheck,
          packageName: packageInfo.name,
          variants
        });
      }
    }
  }
}

const ALL_UNIT_TEST_BUILD_VARIANTS = ['darwin_unit', 'linux_unit', 'win32_unit'];

const { RELEASE_PACKAGE_MATRIX } = require('../config/release-package-matrix');

%>
exec_timeout_secs: 10800

post_error_fails_task: true
post:
  - command: shell.exec
    params:
      shell: bash
      script: |
        mkdir -p npm-logs
        tar cvzf npm-logs.tgz npm-logs

        if [ -d "src/tmp/mongodb-runner/logs" ]; then
          tar cvzf mongodb-runner-logs.tgz -C src/tmp/mongodb-runner logs
        else
          echo "Directory src/tmp/logs does not exist. Skipping."
        fi

        if [ -d "$HOME/.mongodb/mongosh" ]; then
          TARGET="$PWD/mongosh-logs.tgz"
          (cd $HOME/.mongodb && tar cvzf "$TARGET" mongosh/*_log)
        else
          echo "Directory ~/.mongodb/mongosh does not exist. Skipping."
        fi
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: npm-logs.tgz
      remote_file: mongosh/binaries/${revision}/${revision_order_id}/npm-logs-${build_variant}-${task_name}-${task_id}.tgz
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/x-gzip
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongosh-logs.tgz
      remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-logs-${build_variant}-${task_name}-${task_id}.tgz
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/x-gzip
      optional: true
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongodb-runner-logs.tgz
      remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongodb-runner-logs-${build_variant}-${task_name}-${task_id}.tgz
      bucket: mciuploads
      permissions: private
      visibility: signed
      content_type: application/x-gzip
      optional: true


# Functions are any command that can be run.
#
# Current functions:
#   checkout - Checks out the project from git.
#   compile_ts - Installs Node and all dependencies, and run all prepublish scripts.
#   install - Installs Node and all dependencies, and download the result of running all prepublish scripts.
#   check - Performs linter and dependency checks.
#   test - Runs all tests for a specific package.
#   test_vscode - Clones the vscode extension repository and runs its tests.
#   test_connectivity - Runs extra connectivity tests.
#   test_apistrict - Runs shell API and CLI tests with --apiStrict --apiDeprecationErrors.
#   compile_artifact - Compile the release binary.
#   package_artifact - Upload the release binary together with other files to S3.
#   sign_artifact - Get a package file from S3, sign it, put it back into S3.
#   verify_artifact - Verify if the package was successfully signed using Garasign.
#   test_linux_artifact - Test that the built artifact works where we expect it to.
#                         We use this to verify that e.g. the Ubuntu-built release
#                         binary also works on RHEL and Debian.
#   generate_license_and_vulnerability_report - Generates a report of vulnerabilities affecting the bundled application.
#   release_publish - Publishes the npm packages and uploads the tarballs.
functions:
  checkout:
    - command: git.get_project
      type: system
      params:
        directory: src
  compile_ts:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
          DISTRO_ID: ${distro_id}
          MONOGDB_DRIVER_VERSION_OVERRIDE: ${mongodb_driver_version_override}
        script: |
          source .evergreen/install-node.sh
          source .evergreen/install-npm-deps.sh
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          source .evergreen/setup-env.sh
          npm run compile
          tar cvzf compiled-ts.tgz packages/*/{lib,dist}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/compiled-ts.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/compiled-ts.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
  install:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
          DISTRO_ID: ${distro_id}
          MONOGDB_DRIVER_VERSION_OVERRIDE: ${mongodb_driver_version_override}
        script: |
          source .evergreen/install-node.sh
          source .evergreen/install-npm-deps.sh
    - command: s3.get
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/compiled-ts.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/compiled-ts.tgz
        bucket: mciuploads
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        script: |
          tar xvzf compiled-ts.tgz
  check:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run check-ci
          }
  test:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run test-ci
          echo "Archiving current coverage result..."
          tar cvzf nyc-output.tgz .nyc_output
          }
        env:
          NODE_JS_VERSION: ${node_js_version}
          MONGOSH_RUN_ONLY_IN_PACKAGE: ${mongosh_run_only_in_package}
          AWS_AUTH_IAM_ACCESS_KEY_ID: ${devtools_ci_aws_key}
          AWS_AUTH_IAM_SECRET_ACCESS_KEY: ${devtools_ci_aws_secret}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/nyc-output.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/nyc-output-${build_variant}-${mongosh_test_id}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/x-gzip

  check_coverage:
    <% for (let buildVariant of ALL_UNIT_TEST_BUILD_VARIANTS) {
        for (let unitTest of ALL_UNIT_TESTS.filter(t => t.variants.includes(buildVariant.replace(/_unit$/, '')))) { %>
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/nyc-output-<% out(buildVariant) %>-<% out(unitTest.id) %>.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/nyc-output-<% out(buildVariant) %>-<% out(unitTest.id) %>.tgz
        bucket: mciuploads
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          tar xvzf nyc-output-<% out(buildVariant) %>-<% out(unitTest.id) %>.tgz
    <% } } %>
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          tar cvzf full-nyc-output.tgz .nyc_output
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/full-nyc-output.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/full-nyc-output.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/x-gzip
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run report-coverage-ci
          echo "Creating coverage tarball..."
          tar cvzf coverage.tgz coverage
          }
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/coverage.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/coverage.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/x-gzip
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run check-coverage
          }

  test_vscode:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          (cd scripts/docker && docker build -t ubuntu22.04-xvfb -f ubuntu22.04-xvfb.Dockerfile .)
          docker run \
            --rm -v $PWD:/tmp/build ubuntu22.04-xvfb \
            -c 'cd /tmp/build && ./testing/test-vscode.sh'
          }
  test_connectivity:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
          TEST_MONGOSH_EXECUTABLE: ${test_mongosh_executable|}
          KERBEROS_JUMPHOST_DOCKERFILE: ${kerberos_jumphost_dockerfile|}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run test-connectivity
          }
  test_apistrict:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          {
          source .evergreen/setup-env.sh
          npm run test-apistrict-ci
          }

  ###
  # ARTIFACT COMPILATION
  #
  # compile_artifact generates the executable binary and uploads it as TGZ to S3 for later use.
  # Use download_compiled_artifact to download the TGZ from S3.
  #
  # Both functions expect the following arguments:
  # - executable_os_id
  ###
  compile_artifact:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/compile-artifact.sh
        env:
          DISTRO_ID: ${distro_id}
          NODE_JS_VERSION: ${node_js_version}
          MONGOSH_SHARED_OPENSSL: ${mongosh_shared_openssl}
          GITHUB_PR_NUMBER: ${github_pr_number}
  upload_sbom:
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/.sbom.json
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}${extra_upload_tag}-sbom.json
        bucket: mciuploads
        permissions: public-read
        content_type: application/json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist/.purls.txt
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}${extra_upload_tag}-purls.txt
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
  upload_compiled_artifact:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          DISTRO_ID: ${distro_id}
        script: |
          set -e
          set -x
          tar cvzf dist.tgz dist
          bash .evergreen/compilation-context-expansions.sh
    - command: expansions.update
      params:
        ignore_missing_file: false
        file: tmp/compiling-context.yml
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}${extra_upload_tag}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
  upload_first_party_deps_list:
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/.sbom/first-party-deps.json
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}${extra_upload_tag}-first-party-deps.json
        bucket: mciuploads
        permissions: public-read
        content_type: application/json
  download_compiled_artifact:
    - command: s3.get
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}${extra_upload_tag}.tgz
        bucket: mciuploads
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          tar xvzf dist.tgz

  ###
  # E2E TEST EXECUTION
  #
  # Runs the E2E tests against the compiled artifact, i.e. expects the compiled artifact to be already present.
  ###
  run_e2e_tests:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/run-e2e-tests.sh
        env:
          NODE_JS_VERSION: ${node_js_version}
          AWS_AUTH_IAM_ACCESS_KEY_ID: ${devtools_ci_aws_key}
          AWS_AUTH_IAM_SECRET_ACCESS_KEY: ${devtools_ci_aws_secret}
          DISABLE_OPENSSL_SHARED_CONFIG_FOR_BUNDLED_OPENSSL: ${disable_openssl_shared_config_for_bundled_openssl}
          E2E_TASK_NAME: ${task_name}

  ###
  # PACKAGING AND UPLOADING
  #
  # package_artifact generates a distributable package out of the compiled artifact,
  # i.e. it expects it to have been downloaded already. The distributable package will be uploaded
  # to a specifc Evergreen S3 bucket for later use.
  # sign_artifact signs and/or notarizes the distributable package as appropriate.
  #
  # The URL to download the distributable package can be retrieved by get_artifact_url.
  #
  # package_artifact expects the following arguments:
  # - distro_id
  # - package_variant
  # - executable_os_id
  #
  # get_artifact_url and put_artifact_url expects the following arguments:
  # - package_variant
  # - signature_tag (either 'signed' or 'unsigned')
  ###
  add_crypt_shared_and_sbom:
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/download-crypt-shared-and-generate-sbom.sh
        env:
          NODE_JS_VERSION: ${node_js_version}
          DISTRO_ID_OVERRIDE: ${distro_id}
          PACKAGE_VARIANT: ${package_variant}
          ARTIFACTORY_USERNAME: ${artifactory_username}
          ARTIFACTORY_PASSWORD: ${artifactory_password}
          # for Silk SBOM integration
          SILK_ASSET_GROUP: mongosh-${executable_os_id}
          SILK_CLIENT_ID: ${silk_client_id}
          SILK_CLIENT_SECRET: ${silk_client_secret}
  create_static_analysis_report:
  <%
  let firstPartyDepsFilenames = [];
  for (const { executableOsId, packages } of RELEASE_PACKAGE_MATRIX) {
        const filename = `mongosh-${executableOsId}-first-party-deps.json`;
        firstPartyDepsFilenames.push(filename); %>
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/.sbom/<% out(filename) %>
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/<% out(filename) %>
        bucket: mciuploads
  <% } %>
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/setup-env.sh
          .evergreen/create-static-analysis-report.sh
        env:
          NODE_JS_VERSION: ${node_js_version}
          FIRST_PARTY_DEPENDENCY_FILENAMES: <% out(firstPartyDepsFilenames.map(f => `.sbom/${f}`).join(',')) %>
          GITHUB_TOKEN: ${github_token}
          GITHUB_PR_NUMBER: ${github_pr_number}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/static-analysis-report.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-static-analysis-report.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/x-gzip
  package_artifact:
    - command: expansions.write
      type: setup
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/package-and-upload-artifact.sh
        env:
          NODE_JS_VERSION: ${node_js_version}
          DISTRO_ID_OVERRIDE: ${distro_id}
          PACKAGE_VARIANT: ${package_variant}
          ARTIFACT_URL_EXTRA_TAG: unsigned
  sign_artifact:
    - command: expansions.write
      type: setup
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/sign-packaged-artifact.sh
        env:
          NODE_JS_VERSION: ${node_js_version}
          DISTRO_ID_OVERRIDE: ${distro_id}
          PACKAGE_VARIANT: ${package_variant}
          MACOS_NOTARY_KEY: ${macos_notary_key}
          MACOS_NOTARY_SECRET: ${macos_notary_secret}
  verify_artifact:
    - command: expansions.write
      type: setup
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          .evergreen/verify-packaged-artifact.sh
  put_artifact_url:
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: artifact-url.txt
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/artifact-url-${package_variant}-${signature_tag}.txt
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
  get_artifact_url:
    - command: s3.get
      type: setup
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: artifact-url.txt
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/artifact-url-${package_variant}-${signature_tag}.txt
        bucket: mciuploads

  write_preload_script:
    - command: shell.exec
      # silent: true
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          connectivity_test_atlas_username: ${connectivity_test_atlas_username}
          connectivity_test_atlas_password: ${connectivity_test_atlas_password}
          connectivity_test_atlas_hostname: ${connectivity_test_atlas_hostname}
        script: |
          set -e
          .evergreen/create-preload-script.sh
  spawn_host:
    - command: host.create
      type: setup
      params:
        provider: ec2
        distro: ${distro}
        security_group_ids:
          - sg-097bff6dd0d1d31d0 # Magic string that's needed for SSH'ing.
    - command: host.list
      type: setup
      params:
        num_hosts: 1
        path: buildhosts.yml # Write the host information to disk.
        timeout_seconds: 1200
        wait: true
  run_pkg_tests_through_ssh:
    - command: shell.exec
      # silent: true
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          __project_aws_ssh_key_value: ${__project_aws_ssh_key_value}
        script: |
          set -e
          .evergreen/setup-ssh-key.sh
    - command: subprocess.exec
      params:
        working_dir: src
        binary: bash .evergreen/run-on-ssh-host.sh
        env:
          ADMIN_USER_NAME: ${admin_user_name}
          ONHOST_SCRIPT_PATH: ${onhost_script_path}
          PRELOAD_SCRIPT_PATH: ${preload_script_path}
  test_artifact_docker:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          set -x
          {
          . .evergreen/setup-env.sh
          . preload.sh
          ./scripts/docker/build.sh ${dockerfile}
          }
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
        script: |
          set -e
          set -x
          {
          . .evergreen/setup-env.sh
          . preload.sh
          ./scripts/docker/run.sh ${dockerfile} --smokeTests
          }
  test_artifact_macos:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          . preload.sh
          curl -sSfL "$ARTIFACT_URL" > mongosh.zip
          unzip mongosh.zip
          }
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          system_profiler SPSoftwareDataType # for debugging
          . preload.sh
          ./mongosh-*/bin/mongosh --smokeTests
          }
  test_artifact_rpmextract:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          . preload.sh
          curl -sSfL "$ARTIFACT_URL" > mongosh.rpm
          rpm2cpio mongosh.rpm | cpio -idmv
          }
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          . preload.sh
          ./usr/bin/mongosh --smokeTests
          }
  test_artifact_debextract:
    - command: shell.exec
      type: setup
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          . preload.sh
          curl -sSfL "$ARTIFACT_URL" > mongosh.deb
          dpkg -x mongosh.deb .
          }
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          {
          . preload.sh
          ./usr/bin/mongosh --smokeTests
          }

  generate_license_and_vulnerability_report:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          NODE_JS_VERSION: ${node_js_version}
          EVERGREEN_IS_PATCH: ${is_patch}
          SNYK_TOKEN: ${snyk_token}
          EVERGREEN_TASK_URL: https://evergreen.mongodb.com/task/${task_id}
          JIRA_API_TOKEN: ${jira_api_token}
        script: |
          set -e
          source .evergreen/setup-env.sh

          # validate licenses, we first remove THIRD_PARTY_NOTICES.md, so we are sure
          # that we would only upload the newly generated file in case of success.
          rm THIRD_PARTY_NOTICES.md
          npm run update-third-party-notices

          # generate vulnerability report
          set +e
          npm run generate-vulnerability-report
          return_code=$?
          set -e

          # if on main and not triggered by a tag, also create a ticket for each vulnerability found
          if [[ "${requester}" == "commit" ]]; then
            export JIRA_BASE_URL="https://jira.mongodb.org"
            export JIRA_PROJECT="MONGOSH"
            export JIRA_VULNERABILITY_BUILD_INFO="- [Evergreen task|$EVERGREEN_TASK_URL]"
            npm run create-vulnerability-tickets
          else
            cat .sbom/vulnerability-report.md
          fi

          if [[ "${is_patch}" != "true" ]]; then
            # Run `snyk monitor` to keep `main` tracked
            npx snyk monitor --org=dcd6db53-1532-4e65-beca-55db83f2cd52 --file=package-lock.json
            # Fails if the report failed and is not a patch, including during releases:
            exit $return_code
          fi

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        permissions: private
        visibility: signed
        local_file: src/.sbom/dependencies.json
        remote_file: ${project}/${revision}_${revision_order_id}/dependencies.json
        content_type: application/json
        optional: true
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        permissions: private
        visibility: signed
        local_file: src/.sbom/snyk-test-result.json
        remote_file: ${project}/${revision}_${revision_order_id}/snyk-test-result.json
        content_type: application/json
        optional: true
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        permissions: private
        visibility: signed
        local_file: src/.sbom/snyk-test-result.html
        remote_file: ${project}/${revision}_${revision_order_id}/snyk-test-result.html
        content_type: text/html
        optional: true
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        permissions: private
        visibility: signed
        local_file: src/.sbom/vulnerability-report.md
        remote_file: ${project}/${revision}_${revision_order_id}/vulnerability-report.md
        content_type: text/markdown
        optional: true
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        bucket: mciuploads
        permissions: private
        visibility: signed
        local_file: src/THIRD_PARTY_NOTICES.md
        remote_file: ${project}/${revision}_${revision_order_id}/THIRD_PARTY_NOTICES.md
        content_type: text/markdown
        optional: true

  papertrail_trace:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          ls -lh dist/
          if [ x"${triggered_by_git_tag}" == x"" ]; then
            tag=$(git describe --tags --always --dirty)
          else
            tag="${triggered_by_git_tag}"
          fi
          echo "Setting version for papertrail to $tag, with product ${product}"
          version="$(echo $tag | sed -e 's/^[vr]//')"
          cat <<EOT > trace-expansions.yml
          release_version: "$version"
          EOT
          cat trace-expansions.yml
    - command: expansions.update
      params:
        file: src/trace-expansions.yml
    - command: papertrail.trace
      params:
        key_id: ${papertrail_key_id}
        secret_key: ${papertrail_secret_key}
        product: ${product}
        version: ${release_version}
        filenames:
          - "src/dist/*"

  release_draft:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          {
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/setup-env.sh
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          npm run evergreen-release draft
          }

  release_publish_download_and_list_artifacts:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        env:
          node_js_version: ${node_js_version}
        script: |
          set -e
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          .evergreen/run-evergreen-release.sh download-and-list-artifacts
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          ls -lh dist/
          cat -n dist/SHASUMS1.txt
          cat -n dist/SHASUMS256.txt

  release_publish_dry_run:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      # silent: true
      params:
        working_dir: src
        shell: bash
        env:
          devtoolsbot_npm_token: ${devtoolsbot_npm_token}
          node_js_version: ${node_js_version}
        script: |
          set -e
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          .evergreen/run-evergreen-release.sh publish -- --dry-run

  release_publish:
    - command: expansions.write
      type: system
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      # silent: true
      params:
        working_dir: src
        shell: bash
        env:
          devtoolsbot_npm_token: ${devtoolsbot_npm_token}
          node_js_version: ${node_js_version}
        script: |
          set -e
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          .evergreen/run-evergreen-release.sh publish

  run_perf_tests:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          set -x
          # fix rh-allow-sha1-signatures error, see run-e2e-tests.sh
          export OPENSSL_CONF=""
          npx -y mongodb-runner exec -t standalone --version=7.0.x-enterprise -- \
            sh -c 'MONGOSH_SMOKE_TEST_SERVER="$MONGODB_URI" ./dist/mongosh --perfTests > perf_results.json'
        env:
          DISTRO_ID: ${distro_id}
    - command: perf.send
      params:
        file: src/perf_results.json

# Tasks will show up as the individual blocks in the Evergreen UI that can
# pass or fail.
#
# Current tasks:
#   compile_ts - Do the initial compilation of TS sources.
#   check - Performs linter and dependency checks.
#   check_coverage - Performs coverage check by merging all NYC outputs first
#   test_{version} - Runs all tests, against a specified mongod version.
#   test_vscode - Run the vscode extension integration tests.
#   test_connectivity - Runs extra connectivity tests.
#   test_apistrict - Runs shell API and CLI tests with --apiStrict --apiDeprecationErrors.
#   compile_artifact - Compile the release binary.
#   package_artifact - Upload the release binary together with other files to S3.
#   sign_artifact - Get a package file from S3, sign it, put it back into S3.
#   test_linux_artifact - Test that the built artifact works where we expect it to.
#   release_publish - Publishes the npm packages and uploads the tarballs.
#   generate_license_and_vulnerability_report - Generates a report of vulnerabilities affecting the bundled application.
#   pkg_test_* - Run tests on the release packages
tasks:
  - name: compile_ts
    commands:
      - func: checkout
      - func: compile_ts
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  - name: check
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: check
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  - name: check_coverage
    depends_on:
      - name: ".unit-test"
        variant: "*"
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: check_coverage
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  ###
  # UNIT TESTS
  # E.g. test_m60xc_n16 stands for mongod 6.0.x, community edition, Node.js 16
  ###
  <% for (const { id, nShort, nVersion, mShort, mVersion, skipNodeVersionCheck, packageName } of ALL_UNIT_TESTS) { %>
  - name: test_<% out(id) %>
    tags: <% out(["unit-test", ...(mShort === 'latest' ? ["mlatest"] : [])]) %>
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(nVersion) %>"
      - func: test
        vars:
          mongosh_server_test_version: "<% out(mVersion || '') %>"
          node_js_version: "<% out(nVersion) %>"
          mongosh_skip_node_version_check: "<% out(skipNodeVersionCheck) %>"
          mongosh_test_id: "<% out(id) %>"
          mongosh_run_only_in_package: "<% out(packageName) %>"
  <% } %>

  ###
  # INTEGRATION TESTS
  ###
  - name: test_vscode
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: test_vscode
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
  - name: test_connectivity
    tags: ["extra-integration-test"]
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: test_connectivity
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
  - name: test_apistrict
    tags: ["extra-integration-test"]
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: test_apistrict
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          mongosh_server_test_version: "latest-alpha-enterprise"
          mongosh_test_force_api_strict: "1"
  - name: compile_artifact
    tags: ["compile-artifact"]
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: compile_artifact
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: upload_compiled_artifact
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: upload_first_party_deps_list
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  - name: generate_license_and_vulnerability_report
    tags: ["extra-integration-test"]
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: generate_license_and_vulnerability_report
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  ###
  # E2E TESTS
  ###
  <% for (const { executableOsId, compileBuildVariant } of RELEASE_PACKAGE_MATRIX) {
    for (const mVersion of ['stable', '8.0.0-rc15', '6.0.x']) {
      for (const fipsVariant of ['fips', 'nofips']) {
    %>
  - name: e2e_tests_<% out(executableOsId.replace(/-/g, '_')) %><% out(mVersion === 'stable' ? '' : '_' + mVersion.replace(/[^a-zA-Z0-9]/g, '')) %><% out(fipsVariant === 'fips' ? '_fips' : '') %>
    tags: ["e2e-test"]
    depends_on:
      - name: compile_artifact
        variant: <% out(compileBuildVariant) %>
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: download_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
      - func: run_e2e_tests
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          mongosh_server_test_version: "<% out(mVersion) %>-enterprise"
          mongosh_test_e2e_force_fips: "<% out(fipsVariant === 'fips' ? '1' : '') %>"
          disable_openssl_shared_config_for_bundled_openssl: ${disable_openssl_shared_config_for_bundled_openssl|false}
  <% } } %>
  - name: perf_tests_<% out(executableOsId.replace(/-/g, '_')) %>
    tags: ["perf-test"]
    depends_on:
      - name: compile_artifact
        variant: <% out(compileBuildVariant) %>
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: download_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
      - func: run_perf_tests
  <% } %>

  ###
  # EXECUTABLE CONNECTIVITY TESTS
  ###
  <% const executableConnectivityTests = [];
  for (const { executableOsId, compileBuildVariant, kerberosConnectivityTestDockerfiles = [] } of RELEASE_PACKAGE_MATRIX) {
    for (const dockerFile of kerberosConnectivityTestDockerfiles) {
      const taskName = `executable_connectivity_test_${executableOsId.replace(/-/g, '_')}_${dockerFile.replace(/-/g, '_')}`;
      executableConnectivityTests.push({ executableOsId, taskName });
    %>
  - name: <% out(taskName) %>
    tags: ["connectivity-test"]
    depends_on:
      - name: compile_artifact
        variant: <% out(compileBuildVariant) %>
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: download_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
      - func: test_connectivity
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          test_mongosh_executable: dist/mongosh
          kerberos_jumphost_dockerfile: "Dockerfile.<% out(dockerFile) %>"
  <% } } %>

  ###
  # PACKAGING
  ###
  <% for (const { executableOsId, compileBuildVariant, packages } of RELEASE_PACKAGE_MATRIX) {
       for (const { name: packageVariant } of packages) { %>
  - name: add_crypt_shared_and_sbom_<% out(packageVariant.replace(/-/g, '_')) %>
    tags: ["add-sbom-task"]
    depends_on:
      - name: compile_artifact
        variant: <% out(compileBuildVariant) %>
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: download_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
      - func: add_crypt_shared_and_sbom
        vars:
          package_variant: <% out(packageVariant) %>
          executable_os_id: <% out(executableOsId) %>
      - func: upload_sbom
        vars:
          executable_os_id: <% out(executableOsId) %>
          extra_upload_tag: -<% out(packageVariant) %>-sbom
      - func: upload_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
          extra_upload_tag: -<% out(packageVariant) %>-complete
  - name: package_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
    depends_on:
      - name: add_crypt_shared_and_sbom_<% out(packageVariant.replace(/-/g, '_')) %>
        variant: linux_package
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: download_compiled_artifact
        vars:
          executable_os_id: <% out(executableOsId) %>
          extra_upload_tag: -<% out(packageVariant) %>-complete
      - func: package_artifact
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          package_variant: <% out(packageVariant) %>
          executable_os_id: <% out(executableOsId) %>
      - func: put_artifact_url
        vars:
          package_variant: <% out(packageVariant) %>
          signature_tag: unsigned
  - name: sign_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
    depends_on:
      - name: package_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
        variant: "*"
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: get_artifact_url
        vars:
          package_variant: <% out(packageVariant) %>
          signature_tag: unsigned
      - func: sign_artifact
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          package_variant: <% out(packageVariant) %>
      - func: papertrail_trace
        vars:
          product: "mongosh-dev"
      - func: put_artifact_url
        vars:
          package_variant: <% out(packageVariant) %>
          signature_tag: signed
  - name: verify_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
    tags: ["smoke-test"]
    depends_on:
      - name: sign_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
        variant: "*"
    commands:
      - func: checkout
      - func: get_artifact_url
        vars:
          package_variant: <% out(packageVariant) %>
          signature_tag: signed
      - func: verify_artifact
  <% } } %>

  ###
  # SMOKE TESTS
  ###
  <%
  const packageSmokeTestTasks = [];
  for (const { packages, executableOsId } of RELEASE_PACKAGE_MATRIX) {
       for (const { name, packageOn, smokeTestKind, smokeTestDockerfiles } of packages) if (smokeTestKind !== 'none') {
        for (const dockerfile of smokeTestDockerfiles || ['']) {
          const taskName = `pkg_test_${smokeTestKind}_${name}${dockerfile ? `_${dockerfile}` : ''}`.replace(/[-.]/g, '_');
          packageSmokeTestTasks.push({taskName, executableOsId}); %>
  - name: <% out(taskName) %>
    tags: ["smoke-test"]
    depends_on:
      - name: sign_artifact_<% out(name.replace(/-/g, '_')) %>
        variant: "*"
    commands:
      - func: checkout
      - func: get_artifact_url
        vars:
          package_variant: <% out(name) %>
          signature_tag: signed
      - func: write_preload_script
    <% switch (smokeTestKind) {
      case 'ssh': { %>
      - func: spawn_host
        vars:
          distro: windows-vsCurrent-small
      - func: run_pkg_tests_through_ssh
        vars:
          admin_user_name: Administrator
          onhost_script_path: .evergreen/test-package-win32.sh
          preload_script_path: preload.sh
    <% }; break;
       case 'docker': { %>
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: test_artifact_docker
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
          dockerfile: <% out(dockerfile) %>
    <% }; break;
    // We don't have docker for platforms other than x64, so for those we just
    // extract the archives locally.
       case 'macos':
       case 'rpmextract':
       case 'debextract': { %>
      - func: test_artifact_<% out(smokeTestKind) %>
    <% }; break;
      default:
        throw new Error(`pkg ${name} is missing a valid smoke test indicator`);
    } %>
  <% } } } %>
  - name: create_static_analysis_report
    tags: ["extra-integration-test"]
    depends_on:
      - name: ".compile-artifact"
        variant: "*"
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: create_static_analysis_report
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

  ###
  # RELEASE TASKS
  ###
  - name: release_draft
    git_tag_only: true
    depends_on:
      - name: ".smoke-test"
        variant: "*"
      - name: ".extra-integration-test"
        variant: "*"
      - name: ".e2e-test"
        variant: "*"
      - name: ".connectivity-test"
        variant: "*"
      - name: check
        variant: "*"
      - name: ".unit-test"
        variant: "*"
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: release_draft
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
  - name: release_publish_dry_run
    git_tag_only: true
    exec_timeout_secs: 86400
    depends_on:
      - name: release_draft
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: release_publish_download_and_list_artifacts
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: papertrail_trace
        vars:
          product: "mongosh-draft"
      - func: release_publish_dry_run
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
  - name: release_publish
    tags: ["publish"]
    git_tag_only: true
    exec_timeout_secs: 86400
    depends_on:
      - name: compile_ts
        variant: linux_unit
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: release_publish_download_and_list_artifacts
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"
      - func: papertrail_trace
        vars:
          product: "mongosh"
      - func: release_publish
        vars:
          node_js_version: "<% out(NODE_JS_VERSION_20) %>"

# Need to run builds for every possible build variant.
buildvariants:
  - name: darwin_unit
    display_name: "MacOS Big Sur (Unit tests)"
    run_on: macos-1100
    expansions:
      executable_os_id: darwin-x64
    tasks:
      - name: check
      <% for (const test of ALL_UNIT_TESTS.filter(t => t.variants.includes('darwin'))) { %>
      - name: test_<% out(test.id) %>
      <% } %>
  - name: darwin
    display_name: "MacOS Big Sur"
    run_on: macos-1100
    expansions:
      executable_os_id: darwin-x64
    tasks:
      - name: compile_artifact
      - name: e2e_tests_darwin_x64
      - name: package_artifact_darwin_x64
      - name: sign_artifact_darwin_x64
      - name: package_artifact_darwin_arm64
      - name: sign_artifact_darwin_arm64
  - name: darwin_arm64
    display_name: "MacOS Big Sur (arm64)"
    run_on: macos-1100-arm64
    expansions:
      executable_os_id: darwin-arm64
    tasks:
      - name: compile_artifact
      - name: e2e_tests_darwin_arm64

  - name: linux_unit
    display_name: "Ubuntu 20.04 x64 (Unit tests)"
    run_on: ubuntu2004-small
    tags: ["nightly-driver"]
    tasks:
      - name: compile_ts
      - name: check
      <% for (const test of ALL_UNIT_TESTS.filter(t => t.variants.includes('linux'))) { %>
      - name: test_<% out(test.id) %>
      <% } %>
      - name: test_vscode
      - name: test_connectivity
      - name: test_apistrict
  - name: linux_coverage
    display_name: "Coverage and Static Analysis Check"
    run_on: ubuntu2004-small
    tasks:
      - name: check_coverage
      - name: create_static_analysis_report
  - name: linux_package
    display_name: "Ubuntu 20.04 x64 (Packaging)"
    run_on: ubuntu2004-small
    tags: ["nightly-driver"]
    tasks:
      <% for (const { executableOsId, packages } of RELEASE_PACKAGE_MATRIX) {
          for (const { name: packageVariant } of packages) { %>
      - name: add_crypt_shared_and_sbom_<% out(packageVariant.replace(/-/g, '_')) %>
      <%
            if (executableOsId.startsWith('linux')) { %>
      - name: package_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
      - name: sign_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
      <% if (packageVariant.startsWith('deb')) { %>
      - name: verify_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
      <% } %>
      <% } } } %>
      - name: sign_artifact_win32_x64
      - name: sign_artifact_win32msi_x64
  - name: verify_rhel_artifact
    display_name: "RHEL (Signature Verification)"
    run_on: rhel80-small
    tasks:
      <% for (const { packages } of RELEASE_PACKAGE_MATRIX) {
          for (const { name: packageVariant } of packages) {
            if (packageVariant.startsWith('rpm')) { %>
      - name: verify_artifact_<% out(packageVariant.replace(/-/g, '_')) %>
      <% } } } %>
  - name: verify_windows_artifact
    display_name: "Windows (Signature Verification)"
    run_on: windows-vsCurrent-small
    tasks:
      - name: verify_artifact_win32_x64
      - name: verify_artifact_win32msi_x64
  - name: verify_mac_artifact
    display_name: "MacOS (Signature Verification)"
    run_on: macos-1100
    tasks:
      - name: verify_artifact_darwin_arm64
      - name: verify_artifact_darwin_x64
  - name: linux_x64_build
    display_name: "RHEL 7.0 x64 (build)"
    run_on: rhel70-build
    expansions:
      executable_os_id: linux-x64
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_x64_build_rhel8
    display_name: "RHEL 8.0 x64 (build)"
    run_on: rhel80-build
    expansions:
      executable_os_id: linux-x64
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_x64_build_openssl11
    display_name: "RHEL 7.0 x64 (build, shared OpenSSL 1.1)"
    run_on: rhel70-build
    expansions:
      executable_os_id: linux-x64-openssl11
      mongosh_shared_openssl: openssl11
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_x64_build_openssl11_rhel8
    display_name: "RHEL 8.0 x64 (build, shared OpenSSL 1.1)"
    run_on: rhel80-build
    expansions:
      executable_os_id: linux-x64-openssl11
      mongosh_shared_openssl: openssl11
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_x64_build_openssl3
    display_name: "RHEL 7.0 x64 (build, shared OpenSSL 3)"
    run_on: rhel70-build
    expansions:
      executable_os_id: linux-x64-openssl3
      mongosh_shared_openssl: openssl3
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_x64_build_openssl3_rhel8
    display_name: "RHEL 8.0 x64 (build, shared OpenSSL 3)"
    run_on: rhel80-build
    expansions:
      executable_os_id: linux-x64-openssl3
      mongosh_shared_openssl: openssl3
    tags: ["nightly-driver"]
    tasks:
      - name: compile_artifact
  - name: linux_arm64_build
    display_name: "Amazon 2 arm64 (build)"
    run_on: amazon2-arm64-large
    expansions:
      executable_os_id: linux-arm64
    tasks:
      - name: compile_artifact
  - name: linux_arm64_build_openssl11
    display_name: "Amazon 2 arm64 (build, shared OpenSSL 1.1)"
    run_on: amazon2-arm64-large
    expansions:
      executable_os_id: linux-arm64-openssl11
      mongosh_shared_openssl: openssl11
    tasks:
      - name: compile_artifact
  - name: linux_arm64_build_openssl3
    display_name: "Amazon 2 arm64 (build, shared OpenSSL 3)"
    run_on: amazon2-arm64-large
    expansions:
      executable_os_id: linux-arm64-openssl3
      mongosh_shared_openssl: openssl3
    tasks:
      - name: compile_artifact
  - name: linux_ppc64le_build
    display_name: "RHEL 8.1 PPC (build)"
    run_on: rhel81-power8-small
    expansions:
      executable_os_id: linux-ppc64le
    tasks:
      - name: compile_artifact
  - name: linux_s390x_build
    display_name: "RHEL 7.2 s390x (build)"
    run_on: rhel72-zseries-large
    expansions:
      executable_os_id: linux-s390x
    tasks:
      - name: compile_artifact

  - name: e2e_rhel70_x64
    display_name: "RHEL 7.0 x64 (E2E Tests)"
    run_on: rhel70-large
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_rhel76_x64
    display_name: "RHEL 7.6 x64 (E2E Tests)"
    run_on: rhel76-large
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_rhel80_x64
    display_name: "RHEL 8.0 x64 (E2E Tests)"
    run_on: rhel80-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_rhel90_x64
    display_name: "RHEL 9.0 x64 (E2E Tests)"
    run_on: rhel90-small
    expansions:
      disable_openssl_shared_config_for_bundled_openssl: true
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_rhel83_x64
    display_name: "RHEL 8.3 x64 (E2E Tests, FIPS-available OS)"
    run_on: rhel83-fips
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
      - name: e2e_tests_linux_x64_openssl11
      - name: e2e_tests_linux_x64_openssl11_fips
  - name: e2e_rhel92_x64
    display_name: "RHEL 9.2 x64 (E2E Tests, FIPS-available OS)"
    run_on: rhel92-fips
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
      - name: e2e_tests_linux_x64_openssl3
      - name: e2e_tests_linux_x64_openssl3_fips
  - name: e2e_ubuntu1804_x64
    display_name: "Ubuntu 18.04 x64 (E2E Tests)"
    run_on: ubuntu1804-large
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64_60x
  - name: e2e_ubuntu2004_x64
    display_name: "Ubuntu 20.04 x64 (E2E Tests)"
    run_on: ubuntu2004-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
      - name: e2e_tests_linux_x64_openssl11
  - name: e2e_ubuntu2204_x64
    display_name: "Ubuntu 22.04 x64 (E2E Tests)"
    run_on: ubuntu2204-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
      - name: e2e_tests_linux_x64_openssl3
  - name: e2e_ubuntu2404_x64
    display_name: "Ubuntu 24.04 x64 (E2E Tests)"
    run_on: ubuntu2404-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64_800rc15
      - name: e2e_tests_linux_x64_openssl3_800rc15
  - name: e2e_debian10_x64
    display_name: "Debian 10 x64 (E2E Tests)"
    run_on: debian10-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64_60x
      - name: e2e_tests_linux_x64_openssl11_60x
  - name: e2e_debian11_x64
    display_name: "Debian 11 x64 (E2E Tests)"
    run_on: debian11-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
      - name: e2e_tests_linux_x64_openssl11
  - name: e2e_amazon2_x64
    display_name: "Amazon Linux 2 x64 (E2E Tests)"
    run_on: amazon2-large
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_amazon2023_x64
    display_name: "Amazon Linux 2023 x64 (E2E Tests)"
    run_on: amazon2023.0-small
    expansions:
      disable_openssl_shared_config_for_bundled_openssl: true
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_suse12_x64
    display_name: "SLES 12 x64 (E2E Tests)"
    run_on: suse12-sp5-large
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_suse15_x64
    display_name: "SLES 15 x64 (E2E Tests)"
    run_on: suse15sp4-small
    tags: ["nightly-driver"]
    tasks:
      - name: e2e_tests_linux_x64
  - name: e2e_ubuntu1804_arm64
    display_name: "Ubuntu 18.04 arm64 (E2E Tests)"
    run_on: ubuntu1804-arm64-large
    tasks:
      - name: e2e_tests_linux_arm64_60x
  - name: e2e_ubuntu2004_arm64
    display_name: "Ubuntu 20.04 arm64 (E2E Tests)"
    run_on: ubuntu2004-arm64-small
    tasks:
      - name: e2e_tests_linux_arm64
      - name: e2e_tests_linux_arm64_openssl11
  - name: e2e_ubuntu2204_arm64
    display_name: "Ubuntu 22.04 arm64 (E2E Tests)"
    run_on: ubuntu2204-arm64-small
    tasks:
      - name: e2e_tests_linux_arm64
      - name: e2e_tests_linux_arm64_openssl3
  - name: e2e_ubuntu2404_arm64
    display_name: "Ubuntu 24.04 arm64 (E2E Tests)"
    run_on: ubuntu2404-arm64-small
    tasks:
      - name: e2e_tests_linux_arm64_800rc15
      - name: e2e_tests_linux_arm64_openssl3_800rc15
  - name: e2e_amazon2_arm64
    display_name: "Amazon Linux 2 arm64 (E2E Tests)"
    run_on: amazon2-arm64-large
    tasks:
      - name: e2e_tests_linux_arm64
  - name: e2e_amazon2023_arm64
    display_name: "Amazon Linux 2023 arm64 (E2E Tests)"
    run_on: amazon2023.0-arm64-small
    expansions:
      disable_openssl_shared_config_for_bundled_openssl: true
    tasks:
      - name: e2e_tests_linux_arm64
  - name: e2e_rhel82_arm64
    display_name: "RHEL 8.2 arm64 (E2E Tests)"
    run_on: rhel82-arm64-small
    tasks:
      - name: e2e_tests_linux_arm64
  - name: e2e_rhel90_arm64
    display_name: "RHEL 9.0 arm64 (E2E Tests)"
    run_on: rhel90-arm64-small
    expansions:
      disable_openssl_shared_config_for_bundled_openssl: true
    tasks:
      - name: e2e_tests_linux_arm64
      - name: e2e_tests_linux_arm64_openssl3
  - name: e2e_rhel81_ppc64le
    display_name: "RHEL 8.1 PPC (E2E Tests)"
    run_on: rhel81-power8-small
    tasks:
      - name: e2e_tests_linux_ppc64le
  - name: e2e_rhel72_s390x
    display_name: "RHEL 7.2 s390x (E2E Tests)"
    run_on: rhel72-zseries-large
    tasks:
      - name: e2e_tests_linux_s390x_60x
  - name: e2e_rhel83_s390x
    display_name: "RHEL 8.3 s390x (E2E Tests)"
    run_on: rhel83-zseries-small
    tasks:
      - name: e2e_tests_linux_s390x
  - name: e2e_macos14_x64
    display_name: "MacOS 14 x64 (E2E Tests)"
    run_on: macos-14
    expansions:
      executable_os_id: darwin-x64
    tasks:
      - name: e2e_tests_darwin_x64
  - name: e2e_macos14_arm64
    display_name: "MacOS 14 arm64 (E2E Tests)"
    run_on: macos-14-arm64
    expansions:
      executable_os_id: darwin-arm64
    tasks:
      - name: e2e_tests_darwin_arm64

  - name: win32_unit
    display_name: "Windows (Unit tests)"
    run_on: windows-vsCurrent-small
    expansions:
      executable_os_id: win32
    tasks:
      - name: check
      <% for (const test of ALL_UNIT_TESTS.filter(t => t.variants.includes('win32'))) { %>
      - name: test_<% out(test.id) %>
      <% } %>
  - name: win32
    display_name: "Windows VS 2022"
    run_on: windows-vsCurrent-small
    expansions:
      executable_os_id: win32
    tasks:
      - name: e2e_tests_win32
      - name: package_artifact_win32_x64
      - name: package_artifact_win32msi_x64
  - name: win32_build
    display_name: "Windows VS 2022 (build)"
    run_on: windows-vsCurrent-large
    expansions:
      executable_os_id: win32
    tasks:
      - name: compile_artifact

  - name: pkg_smoke_tests_docker_x64
    display_name: "package smoke (x64 Docker)"
    run_on: ubuntu2004-small
    tags: ["nightly-driver"]
    tasks:
  <% for (const { taskName, executableOsId } of packageSmokeTestTasks) {
      if (executableOsId.includes('linux-x64')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: pkg_smoke_tests_docker_arm64
    display_name: "package smoke (arm64 Docker)"
    run_on: ubuntu2004-arm64-small
    tags: ["nightly-driver"]
    tasks:
  <% for (const { taskName, executableOsId } of packageSmokeTestTasks) {
      if (executableOsId.includes('linux-arm64')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: exec_connectitivty_tests_docker_x64_openssl11
    display_name: "executable connectivity tests (x64 Docker for OpenSSL 1.1 base OS)"
    run_on: ubuntu2004-small
    tags: ["nightly-driver"]
    tasks:
  <% for (const { taskName, executableOsId } of executableConnectivityTests) {
      if (executableOsId.includes('linux-x64') && !taskName.includes('openssl3')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: exec_connectitivty_tests_docker_arm64_openssl11
    display_name: "executable connectivity tests (arm64 Docker for OpenSSL 1.1 base OS)"
    run_on: ubuntu2004-arm64-small
    tasks:
  <% for (const { taskName, executableOsId } of executableConnectivityTests) {
      if (executableOsId.includes('linux-arm64') && !taskName.includes('openssl3')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: exec_connectitivty_tests_docker_x64_openssl3
    display_name: "executable connectivity tests (x64 Docker for OpenSSL 3 base OS)"
    run_on: ubuntu2204-small
    tags: ["nightly-driver"]
    tasks:
  <% for (const { taskName, executableOsId } of executableConnectivityTests) {
      if (executableOsId.includes('linux-x64') && !taskName.includes('openssl11')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: exec_connectitivty_tests_docker_arm64_openssl3
    display_name: "executable connectivity tests (arm64 Docker for OpenSSL 3 base OS)"
    run_on: ubuntu2204-arm64-small
    tasks:
  <% for (const { taskName, executableOsId } of executableConnectivityTests) {
      if (executableOsId.includes('linux-arm64') && !taskName.includes('openssl11')) { %>
      - name: <% out(taskName) %>
  <% } } %>
  - name: pkg_smoke_tests_win32
    display_name: "package smoke tests (win32)"
    run_on: ubuntu2004-small
    tasks:
      - name: pkg_test_ssh_win32_x64
      - name: pkg_test_ssh_win32msi_x64
  - name: pkg_smoke_tests_macos_1100_x64
    display_name: "package smoke tests (macos 11.00 x64)"
    run_on: macos-1100
    tasks:
      - name: pkg_test_macos_darwin_x64
  - name: pkg_smoke_tests_macos_1100_arm64
    display_name: "package smoke tests (macos 11.00 arm64)"
    run_on: macos-1100-arm64
    tasks:
      - name: pkg_test_macos_darwin_arm64
  - name: pkg_smoke_tests_macos_1300_arm64
    display_name: "package smoke tests (macos 13.00 arm64)"
    run_on: macos-1300-arm64
    tasks:
      - name: pkg_test_macos_darwin_arm64
  - name: pkg_smoke_tests_macos_1400_x64
    display_name: "package smoke tests (macos 14.00 x64)"
    run_on: macos-14
    tasks:
      - name: pkg_test_macos_darwin_x64
  - name: pkg_smoke_tests_macos_1400_arm64
    display_name: "package smoke tests (macos 14.00 arm64)"
    run_on: macos-14-arm64
    tasks:
      - name: pkg_test_macos_darwin_arm64
  - name: pkg_smoke_tests_rhel72_s390x
    display_name: "package smoke tests (RHEL 7.2 s390x)"
    run_on: rhel72-zseries-small
    tasks:
      - name: pkg_test_rpmextract_rpm_s390x
  - name: pkg_smoke_tests_rhel83_s390x
    display_name: "package smoke tests (RHEL 8.3 s390x)"
    run_on: rhel83-zseries-small
    tasks:
      - name: pkg_test_rpmextract_rpm_s390x
  - name: pkg_smoke_tests_rhel81_ppc64le
    display_name: "package smoke tests (RHEL 8.1 ppc64le)"
    run_on: rhel81-power8-small
    tasks:
      - name: pkg_test_rpmextract_rpm_ppc64le

  - name: draft_publish_release
    display_name: "Draft/Publish Release"
    run_on: ubuntu2004-small
    tasks:
      - name: release_draft
      - name: release_publish_dry_run
      - name: release_publish

  - name: generate_license_and_vulnerability_report
    display_name: "License and Vulnerability Report"
    run_on: ubuntu2004-small
    tasks:
      - name: generate_license_and_vulnerability_report

  - name: perf_tests
    display_name: "Performance Tests"
    run_on: rhel90-dbx-perf-large
    tasks:
      - name: perf_tests_linux_x64
