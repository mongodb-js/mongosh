exec_timeout_secs: 7200

# Variables for common functions.
#
# compile_and_release: Runs the exec compile and release process.
variables:
  - &compile_and_release
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        cat <<RELEASE_MONGOSH > ~/release_mongosh.sh
        cd $(pwd)
        source .evergreen/.setup_env
        export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
        export EVERGREEN_EXPANSIONS_PATH="$(pwd)/../tmp/expansions.yaml"
        npm run evergreen-release package
        RELEASE_MONGOSH

        if [ `uname` == Darwin ]; then
          ssh -v -p 2222 localhost "bash ~/release_mongosh.sh"
        else
          bash ~/release_mongosh.sh
        fi

        ls -la dist/
  - &compile_and_release_ps
    command: shell.exec
    params:
      working_dir: src
      shell: powershell
      script: |
        .\.evergreen\SetupEnv
        node --version
        npm --version
        $Env:PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = "true"
        $Env:EVERGREEN_EXPANSIONS_PATH = $(Join-Path -Path '..' -ChildPath 'tmp/expansions.yaml' -Resolve)
        npm run evergreen-release package
        Get-ChildItem -Path .\dist\
# Functions are any command that can be run.
#
# Current functions:
#   checkout - Checks out the project from git.
#   install - Installs Node and all dependencies.
#   check - Performs linter and dependency checks.
#   test - Runs all tests.
#   release_macos - Publishes the npm packages and uploads the tarballs.
#   release_linux - Publishes the npm packages and uploads the tarballs.
#   release_win_ps - Publishes the npm packages and uploads the tarballs.
functions:
  checkout:
    - command: git.get_project
      params:
        directory: src
  install:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.install_node
  install_ps:
    - command: shell.exec
      params:
        working_dir: src
        shell: powershell
        script: |
          .\.evergreen\InstallNode
  check:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          source .evergreen/.setup_env
          npm run check-ci
  check_ps:
    - command: shell.exec
      params:
        working_dir: src
        shell: powershell
        script: |
          .\.evergreen\SetupEnv
          npm run check-ci
  test:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          source .evergreen/.setup_env
          export EVERGREEN_EXPANSIONS_PATH="$(pwd)/../tmp/expansions.yaml"
          export MONGOSH_TEST_EXECUTABLE_PATH="$(pwd)/dist/mongosh"
          echo "$MONGOSH_TEST_EXECUTABLE_PATH"
          npm run compile-exec
          npm run test-ci
  test_ps:
    - command: expansions.write
      params:
        file: tmp\expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: powershell
        script: |
          .\.evergreen\SetupEnv
          .\.evergreen\DownloadAndRunMongod
          $Env:EVERGREEN_EXPANSIONS_PATH = $(Join-Path -Path '..' -ChildPath 'tmp/expansions.yaml' -Resolve)
          npm run compile-exec
          $Env:MONGOSH_TEST_EXECUTABLE_PATH = $(Join-Path -Path '.' -ChildPath 'dist/mongosh.exe' -Resolve)
          $Env:MONGOSH_TEST_SERVER_URL = "mongodb://localhost:27018"
          echo "$Env:MONGOSH_TEST_EXECUTABLE_PATH"
          npm run test-ci
  release_macos:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *compile_and_release
  release_linux:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *compile_and_release
  release_debian:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *compile_and_release
  release_rhel:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *compile_and_release
  release_win_ps:
    - command: expansions.write
      params:
        file: tmp\expansions.yaml
        redacted: true
    - <<: *compile_and_release_ps
  release_publish:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          source .evergreen/.setup_env
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          export EVERGREEN_EXPANSIONS_PATH="$(pwd)/../tmp/expansions.yaml"
          npm run evergreen-release publish

# Tasks will show up as the individual blocks in the Evergreen UI that can
# pass or fail.
#
# Current tasks:
#   check - Performs linter and dependency checks.
#   test - Runs all tests.
#   release_macos - Publishes the npm packages and uploads the tarballs.
#   release_linux - Publishes the npm packages and uploads the tarballs.
#   release_win_ps - Publishes the npm packages and uploads the tarballs (from powershell).
tasks:
  - name: check
    commands:
      - func: checkout
      - func: install
      - func: check
  - name: check_ps
    commands:
      - func: checkout
      - func: install_ps
      - func: check_ps
  - name: test
    commands:
      - func: checkout
      - func: install
      - func: test
  - name: test_ps
    commands:
      - func: checkout
      - func: install_ps
      - func: test_ps
  - name: release_macos
    depends_on:
      - name: check
      - name: test
    commands:
      - func: checkout
      - func: install
      - func: release_macos
  - name: release_linux
    depends_on:
      - name: check
      - name: test
    commands:
      - func: checkout
      - func: install
      - func: release_linux
  - name: release_debian
    depends_on:
      - name: check
      - name: test
        variant: linux
    commands:
      - func: checkout
      - func: install
      - func: release_debian
  - name: release_rhel
    depends_on:
      - name: check
      - name: test
        variant: linux
    commands:
      - func: checkout
      - func: install
      - func: release_rhel
  - name: release_win_ps
    depends_on:
      - name: check_ps
    commands:
      - func: checkout
      - func: install_ps
      - func: release_win_ps
  - name: release_publish
    depends_on:
      - name: release_win_ps
        variant: win32
      - name: release_linux
        variant: linux
      - name: release_rhel
        variant: rhel
      - name: release_debian
        variant: debian
      - name: release_macos
        variant: darwin
    commands:
      - func: checkout
      - func: install
      - func: release_publish

# Need to run builds for every possible build variant.
buildvariants:
  - name: darwin
    display_name: "MacOS Mohave"
    run_on: macos-1014-codesign
    tasks:
      - name: check
      - name: test
      - name: release_macos
  - name: linux
    display_name: "Ubuntu 18.04"
    run_on: ubuntu1804-test
    tasks:
      - name: check
      - name: test
      - name: release_linux
  - name: rhel
    display_name: "RHEL 8.0"
    run_on: rhel80-large
    tasks:
      - name: check
      - name: release_rhel
  - name: win32
    display_name: "Windows VS 2019 PowerShell"
    run_on: windows-64-vs2019-test
    tasks:
      - name: check_ps
      - name: test_ps
      - name: release_win_ps
  - name: debian
    display_name: "Debian 10"
    run_on: debian10-large
    tasks:
      - name: check
      - name: release_debian
  - name: darwin_release_publish
    display_name: "Publish Release"
    run_on: macos-1014-codesign
    tasks:
      - name: release_publish
