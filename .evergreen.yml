exec_timeout_secs: 7200

# Variables for common functions.
#
# compile_artifact: Compile the mongosh executable.
# package_and_upload_artifact: Package the executable and upload the artifacts.
variables:
  - &compile_artifact
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -e
        cd $(pwd)
        export NODE_JS_VERSION=${node_js_version}
        source .evergreen/.setup_env
        export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
        if [ `uname` == Linux ]; then
          mkdir -p tmp
          cp "$(pwd)/../tmp/expansions.yaml" tmp/expansions.yaml
          (cd scripts/docker && docker build -t centos7-build -f centos7-build.Dockerfile .)
          echo Starting Docker container build
          docker run -e PUPPETEER_SKIP_CHROMIUM_DOWNLOAD \
            -e EVERGREEN_EXPANSIONS_PATH=/tmp/build/tmp/expansions.yaml \
            -e NODE_JS_VERSION \
            -e BUILD_VARIANT \
            --rm -v $PWD:/tmp/build --network host centos7-build \
            -c 'source /opt/rh/devtoolset-8/enable && cd /tmp/build && npm run evergreen-release compile && dist/mongosh --version'
        else
          npm run evergreen-release compile
        fi
        dist/mongosh --version
        source .evergreen/.setup_env
        export MONGOSH_TEST_EXECUTABLE_PATH="$(pwd)/dist/mongosh"
        if [ x"$OS" == x"Windows_NT" ]; then
          export MONGOSH_TEST_EXECUTABLE_PATH="$(cygpath -w "$MONGOSH_TEST_EXECUTABLE_PATH")"
        fi
        echo "$MONGOSH_TEST_EXECUTABLE_PATH"
        npm run test-e2e-ci
        tar cvzf dist.tgz dist

  - &package_and_upload_artifact
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -e
        cat <<RELEASE_MONGOSH > ~/release_mongosh.sh
        set -e
        cd $(pwd)
        export NODE_JS_VERSION=${node_js_version}
        source .evergreen/.setup_env
        tar xvzf dist.tgz
        dist/mongosh --version
        if [ `uname` == Linux ]; then
          mkdir -p tmp
          cp "$(pwd)/../tmp/expansions.yaml" tmp/expansions.yaml
          (cd scripts/docker && docker build -t centos7-package -f centos7-package.Dockerfile .)
          echo Starting Docker container packaging
          docker run -e PUPPETEER_SKIP_CHROMIUM_DOWNLOAD \
            -e EVERGREEN_EXPANSIONS_PATH=/tmp/build/tmp/expansions.yaml \
            -e NODE_JS_VERSION \
            -e BUILD_VARIANT \
            --rm -v $PWD:/tmp/build --network host centos7-package \
            -c 'cd /tmp/build && npm run evergreen-release package && npm run evergreen-release upload'
        else
          npm run evergreen-release package
          if [ `uname` == Darwin ]; then
            # Verify signing
            spctl -a -vvv -t install dist/mongosh
          fi
          npm run evergreen-release upload
        fi
        RELEASE_MONGOSH
        if [ `uname` == Darwin ]; then
          ssh -v -p 2222 localhost "bash ~/release_mongosh.sh"
        else
          bash ~/release_mongosh.sh
        fi

  - &test_linux_artifact
    command: shell.exec
    params:
      working_dir: src
      shell: bash
      script: |
        set -e
        export NODE_JS_VERSION=${node_js_version}
        source .evergreen/.setup_env
        node scripts/download-linux-artifact
        dist/mongosh --version
        export MONGOSH_TEST_EXECUTABLE_PATH="$(pwd)/dist/mongosh"
        echo "$MONGOSH_TEST_EXECUTABLE_PATH"
        npm run test-e2e-ci

# Functions are any command that can be run.
#
# Current functions:
#   checkout - Checks out the project from git.
#   install - Installs Node and all dependencies.
#   check - Performs linter and dependency checks.
#   test - Runs all tests.
#   test_vscode - Clones the vscode extension repository and runs its tests.
#   test_connectivity - Runs extra connectivity tests.
#   compile_artifact - Compile the release binary.
#   package_and_upload_artifact - Upload the release binary to S3.
#   test_linux_artifact - Test that the built artifact works where we expect it to.
#                         We use this to verify that e.g. the Ubuntu-built release
#                         binary also works on RHEL and Debian.
#   release_publish - Publishes the npm packages and uploads the tarballs.
functions:
  checkout:
    - command: git.get_project
      params:
        directory: src
  install:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/.install_node
  check:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/.setup_env
          npm run check-ci
  test:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/.setup_env
          npm run test-ci
  test_vscode:
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          (cd scripts/docker && docker build -t ubuntu18.04-xvfb -f ubuntu18.04-xvfb.Dockerfile .)
          docker run \
            --rm -v $PWD:/tmp/build ubuntu18.04-xvfb \
            -c 'cd /tmp/build && ./testing/test-vscode.sh'
  test_connectivity:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/.setup_env
          npm run test-connectivity
  compile_artifact:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *compile_artifact
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
  package_and_upload_artifact:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/dist.tgz
        remote_file: mongosh/binaries/${revision}/${revision_order_id}/mongosh-${executable_os_id}.tgz
        bucket: mciuploads
    - <<: *package_and_upload_artifact
  test_linux_artifact:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - <<: *test_linux_artifact
  release_publish:
    - command: expansions.write
      params:
        file: tmp/expansions.yaml
        redacted: true
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          export NODE_JS_VERSION=${node_js_version}
          source .evergreen/.setup_env
          export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD="true"
          npm run evergreen-release publish

# Tasks will show up as the individual blocks in the Evergreen UI that can
# pass or fail.
#
# Current tasks:
#   check - Performs linter and dependency checks.
#   test_{version} - Runs all tests, against a specified mongod version.
#   test_vscode - Run the vscode extension integration tests.
#   test_connectivity - Runs extra connectivity tests.
#   compile_artifact - Compile the release binary.
#   package_and_upload_artifact - Upload the release binary to S3.
#   test_linux_artifact - Test that the built artifact works where we expect it to.
#   release_publish - Publishes the npm packages and uploads the tarballs.
tasks:
  - name: check
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: check
        vars:
          node_js_version: "14.15.1"
  - name: test_m40x_n12
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "12.20.0"
      - func: test
        vars:
          mongosh_server_test_version: "4.0.x"
          node_js_version: "12.20.0"
          mongosh_skip_node_version_check: "1"
  - name: test_m42x_n12
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "12.20.0"
      - func: test
        vars:
          mongosh_server_test_version: "4.2.x"
          node_js_version: "12.20.0"
          mongosh_skip_node_version_check: "1"
  - name: test_m44x_n12
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "12.20.0"
      - func: test
        vars:
          mongosh_server_test_version: "4.4.x"
          node_js_version: "12.20.0"
          mongosh_skip_node_version_check: "1"
  - name: test_mlatest_n12
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "12.20.0"
      - func: test
        vars:
          mongosh_server_test_version: "latest-alpha"
          node_js_version: "12.20.0"
          mongosh_skip_node_version_check: "1"
  - name: test_m40x_n14
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test
        vars:
          mongosh_server_test_version: "4.0.x"
          node_js_version: "14.15.1"
  - name: test_m42x_n14
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test
        vars:
          mongosh_server_test_version: "4.2.x"
          node_js_version: "14.15.1"
  - name: test_m44x_n14
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test
        vars:
          mongosh_server_test_version: "4.4.x"
          node_js_version: "14.15.1"
  - name: test_mlatest_n14
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test
        vars:
          mongosh_server_test_version: "latest-alpha"
          node_js_version: "14.15.1"
  - name: test_vscode
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "12.20.0"
      - func: test_vscode
  - name: test_connectivity
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test_connectivity
  - name: compile_artifact
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: compile_artifact
        vars:
          node_js_version: "14.15.1"
  - name: package_and_upload_artifact_macos
    depends_on:
      - name: check
        variant: darwin
      - name: test_m40x_n12
        variant: darwin
      - name: test_m42x_n12
        variant: darwin
      - name: test_m44x_n12
        variant: darwin
      - name: test_mlatest_n12
        variant: darwin
      - name: test_m40x_n14
        variant: darwin
      - name: test_m42x_n14
        variant: darwin
      - name: test_m44x_n14
        variant: darwin
      - name: test_mlatest_n14
        variant: darwin
      - name: compile_artifact
        variant: darwin
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: package_and_upload_artifact
        vars:
          node_js_version: "14.15.1"
  - name: package_and_upload_artifact_linux
    depends_on:
      - name: check
        variant: linux
      - name: test_m40x_n12
        variant: linux
      - name: test_m42x_n12
        variant: linux
      - name: test_m44x_n12
        variant: linux
      - name: test_mlatest_n12
        variant: linux
      - name: test_m40x_n14
        variant: linux
      - name: test_m42x_n14
        variant: linux
      - name: test_m44x_n14
        variant: linux
      - name: test_mlatest_n14
        variant: linux
      - name: compile_artifact
        variant: linux_build
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: package_and_upload_artifact
        vars:
          node_js_version: "14.15.1"
  - name: package_and_upload_artifact_win
    depends_on:
      - name: check
        variant: win32
      - name: test_m40x_n12
        variant: win32
      - name: test_m42x_n12
        variant: win32
      - name: test_m44x_n12
        variant: win32
      - name: test_mlatest_n12
        variant: win32
      - name: test_m40x_n14
        variant: win32
      - name: test_m42x_n14
        variant: win32
      - name: test_m44x_n14
        variant: win32
      - name: test_mlatest_n14
        variant: win32
      - name: compile_artifact
        variant: win32_build
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: package_and_upload_artifact
        vars:
          node_js_version: "14.15.1"
  - name: test_linux_artifact
    depends_on:
      - name: package_and_upload_artifact_linux
        variant: linux
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: test_linux_artifact
        vars:
          node_js_version: "14.15.1"
  - name: release_publish
    depends_on:
      - name: package_and_upload_artifact_win
        variant: win32
      - name: package_and_upload_artifact_linux
        variant: linux
      - name: package_and_upload_artifact_macos
        variant: darwin_codesign
      - name: test_linux_artifact
        variant: rhel70
      - name: test_linux_artifact
        variant: rhel76
      - name: test_linux_artifact
        variant: debian10
      - name: test_linux_artifact
        variant: ubuntu1604
      - name: test_linux_artifact
        variant: ubuntu2004
      - name: test_vscode
        variant: linux
    commands:
      - func: checkout
      - func: install
        vars:
          node_js_version: "14.15.1"
      - func: release_publish
        vars:
          node_js_version: "14.15.1"

# Need to run builds for every possible build variant.
buildvariants:
  - name: darwin_codesign
    display_name: "MacOS Mojave (codesign)"
    run_on: macos-1014-codesign
    expansions:
      executable_os_id: darwin
    tasks:
      - name: package_and_upload_artifact_macos
  - name: darwin
    display_name: "MacOS Mojave"
    run_on: macos-1014
    expansions:
      executable_os_id: darwin
    tasks:
      - name: check
      - name: test_m40x_n12
      - name: test_m42x_n12
      - name: test_m44x_n12
      - name: test_mlatest_n12
      - name: test_m40x_n14
      - name: test_m42x_n14
      - name: test_m44x_n14
      - name: test_mlatest_n14
      - name: compile_artifact
  - name: linux
    display_name: "Ubuntu 18.04"
    run_on: ubuntu1804-small
    expansions:
      executable_os_id: linux
    tasks:
      - name: check
      - name: test_m40x_n12
      - name: test_m42x_n12
      - name: test_m44x_n12
      - name: test_mlatest_n12
      - name: test_m40x_n14
      - name: test_m42x_n14
      - name: test_m44x_n14
      - name: test_mlatest_n14
      - name: test_vscode
      - name: test_connectivity
      - name: package_and_upload_artifact_linux
  - name: linux_build
    display_name: "Ubuntu 18.04 (build)"
    run_on: ubuntu1804-build
    expansions:
      executable_os_id: linux
    tasks:
      - name: compile_artifact
  - name: rhel
    display_name: "Ubuntu 18.04 (rpm target)"
    run_on: ubuntu1804-small
    expansions:
      executable_os_id: linux
    tasks:
      - name: package_and_upload_artifact_linux
  - name: debian
    display_name: "Ubuntu 18.04 (deb target)"
    run_on: ubuntu1804-small
    expansions:
      executable_os_id: linux
    tasks:
      - name: package_and_upload_artifact_linux
  - name: rhel70
    display_name: "RHEL 7.0"
    run_on: rhel70-small
    tasks:
      - name: test_linux_artifact
  - name: rhel76
    display_name: "RHEL 7.6"
    run_on: rhel76-small
    tasks:
      - name: test_linux_artifact
  - name: ubuntu1604
    display_name: "Ubuntu 16.04"
    run_on: ubuntu1604-small
    tasks:
      - name: test_linux_artifact
  - name: ubuntu2004
    display_name: "Ubuntu 20.04"
    run_on: ubuntu2004-small
    tasks:
      - name: test_linux_artifact
  - name: debian10
    display_name: "Debian 10"
    run_on: debian10-small
    tasks:
      - name: test_linux_artifact
  - name: win32
    display_name: "Windows VS 2019"
    run_on: windows-64-vs2019-small
    expansions:
      executable_os_id: win32
    tasks:
      - name: check
      - name: test_m40x_n12
      - name: test_m42x_n12
      - name: test_m44x_n12
      - name: test_mlatest_n12
      - name: test_m40x_n14
      - name: test_m42x_n14
      - name: test_m44x_n14
      - name: test_mlatest_n14
      - name: package_and_upload_artifact_win
  - name: win32_build
    display_name: "Windows VS 2019 (build)"
    run_on: windows-64-vs2019-build
    expansions:
      executable_os_id: win32
    tasks:
      - name: compile_artifact
  - name: darwin_release_publish
    display_name: "Publish Release"
    run_on: macos-1014-codesign
    tasks:
      - name: release_publish
